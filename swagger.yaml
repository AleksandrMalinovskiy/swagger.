swagger: '2.0'
info:
  version: 3.0.3
  title: Букмекерская контора
  description: "
    __Приложения:__\n
      1. Developer:\n
        [Модуль администратора](http://91.218.229.82:3100/24HVv17a9QDJ68sCUd538bWs52Yaf4/betstream)\n
        [Модуль игрока](http://91.218.229.82:3100/live)\n
      2. QA:\n
        [Модуль администратора](http://bet-unlim.com/admin/line/)\n
        [Модуль игрока](http://bet-unlim.com/line/)\n
      3. Stage:\n
        [Модуль администратора](http://bet-unlim.com/admin/line/)\n
        [Модуль игрока](http://bet-unlim.com/line/)\n
      4. Master:\n
        [Модуль администратора](http://bet-unlim.com/admin/line/)\n
        [Модуль игрока](http://bet-unlim.com/line/)\n
        
    __База данных:__\n
      1. Developer:\n
        [Adminer-db-dev](http://91.218.229.82:8080/?pgsql=db-dev)\n
      2. QA:\n
        [Adminer-db](http://88.198.55.137:8080/?pgsql=db)\n
      3. Stage:\n
        [Adminer-db](http://88.198.55.137:8080/?pgsql=db)\n
      4. Master:\n
        [Adminer-db](http://88.198.55.137:8080/?pgsql=db)\n
        
    __Дополнительно:__\n
      1. [Figma](https://www.figma.com/file/Lf6uVFjg3Wkzr751DKLNmW/Betunlim)\n
      2. [Git](https://gitlab.loldev.ru/jerik/bookmaker/)\n
      3. [YouTrack](https://red-flag.myjetbrains.com/youtrack/agiles/)\n"
host: 91.218.229.82:3100
tags:
  - name: authorization
    description: Контроллер авторизации
  - name: support
    description: Контроллер службы поддержки
  - name: table-settings
    description: Контроллер настройки таблиц
  - name: admin-themes
    description: Контроллер тем сотрудников
  - name: admin-events
    description: Контроллер событий
  - name: admin-betting-stream
    description: Контроллер потока ставок
  - name: admin-payment-requests
    description: Контроллер заявок на выплаты
  - name: admin-completed-events
    description: Контроллер завершенных событий
  - name: admin-multivariate-analysis
    description: Контроллер многомерного анализа
  - name: admin-events-calculation
    description: Контроллер расчета событий
  - name: admin-logs
    description: Контроллер логов
  - name: admin-sliders
    description: Контроллер слайдеров в админке
  - name: admin-users-list
    description: Контроллер списка пользователей
  - name: admin-leagues-setting
    description: Контроллер настройки чемпионатов
  - name: admin-players-identification
    description: Контроллер проверки идентификации игроков
  - name: admin-event-analysis
    description: Контроллер анализа события
  - name: admin-player-analysis
    description: Контроллер анализа игрока
  - name: admin-player-bet-history
    description: Контроллер истории ставок игрока
  - name: admin-player-cuts
    description: Контроллер порезок игрока
  - name: admin-search
    description: Контроллер поиска
  - name: admin-translator
    description: Контроллер переводов
  - name: player-themes
    description: Контроллер тем игрока
  - name: player-events
    description: Контроллер событий
  - name: player-sliders
    description: Контроллер слайдеров у игрока
  - name: player-stocks
    description: Контроллер акций у игрока
  - name: player-bet-basket
    description: Контроллер корзины ставок
  - name: player-event-card
    description: Контроллер карточки события
  - name: player-search
    description: Контроллер поиска
  - name: player-profile
    description: Контроллер профиля игрока
  - name: player-history
    description: Контроллер истории игрока
  - name: player-identification
    description: Контроллер идентификации игрока
  - name: player-payments
    description: Контроллер пополнений и выплат игрока
  - name: player-referral
    description: Контроллер реферальной программы
schemes:
  - http
paths:
  /authorization/login-user:
    post:
      tags:
        - authorization
      summary: "Авторизация текущего пользователя"
      description: "При авторизации проверять совпадения в таблице __users__ по полям __username__ + __password__ и __number__ + __password__"
      operationId: login-user
      produces:
        - application/json
      parameters:
        - in: body
          name: user
          description: "Логин, номер счета и пароль пользователя"
          required: true
          schema:
            $ref: '#/definitions/user'
      responses:
        '200':
          description: "Успешно"
          schema:
            $ref: '#/definitions/userHash'
        '400':
          description: "Ошибка в запросе (некорректное значение в полях __Логин__ или __Пароль__)"
  /authorization/logout-user:
    get:
      tags:
        - authorization
      summary: "Дисконнект текущего пользователя"
      operationId: logout-user
      produces:
        - application/json
      parameters: []
      responses:
        '200':
          description: "Успешно"
  /authorization/add-player:
    post:
      tags:
        - authorization
      summary: "Регистрация игрока"
      description: "
        1. Значение __email__ необходимо так же записать в поле __username__\n
        2. Записать уникальное цифровое значение в поле __number__ (7 символов)\n
        3. Записать уникальное строковое значение в поле __referrer_hash__\n
        4. Проверить осуществляется ли регистрация по реферальной программе (наличие во входном параметре эндпоинта значения __referrer_hash__):\n
          а) Если значение __referrer_hash__ имеется, то по нему определить __user_id__ реферала (через таблицу __users__) и записать его в поле __referral_id__ у добавляемой записи (__referrer_hash__ должен быть валидным!)\n
          б) Если значение __referrer_hash__ отсутствует, то значению в поле __referral_id__ у добавляемой записи присвоить __Null__\n"
      operationId: add-player
      produces:
        - application/json
      parameters:
        - in: body
          name: playerForAdd
          description: "Электронная почта и пароль пользователя"
          required: true
          schema:
            $ref: '#/definitions/playerForAdd'
      responses:
        '200':
          description: "Успешно"
          schema:
            $ref: '#/definitions/userHash'
        '400':
          description: "Ошибка в запросе (некорректное значение в полях __Электронная почта__ или __Пароль__)"
  /authorization/resending-letter-to-email/{email}:
    get:
      tags:
        - authorization
      summary: "Повторная отправка письма на почтовый адрес"
      description: "Выполняется по запросу игрока для повторного получения письма или автоматически по истечению времени действия кода верификации"
      operationId: resending-letter-to-email
      produces:
        - application/json
      parameters:
        - name: email
          in: path
          description: "Адрес электронной почты игрока, на который необходимо отправить письмо"
          required: true
          type: string
      responses:
        '200':
          description: "Успешно"
  /authorization/confirm-email/{code}:
    get:
      tags:
        - authorization
      summary: "Подтверждение электронной почты"
      operationId: confirm-email
      produces:
        - application/json
      parameters:
        - name: code
          in: path
          description: "Код подтверждения (__code__), который встроен в ссылку в электронном письме о регистрации"
          required: true
          type: string
      responses:
        '200':
          description: "Успешно"
        '400':
          description: "Ошибка в запросе (некорректное значение __code__)"
  /authorization/password-recovery-request:
    post:
      tags:
        - authorization
      summary: "Отправить запрос для получения кода подтверждения восстановления пароля"
      description: "Выполняется по запросу игрока"
      operationId: request-password-recovery
      produces:
        - application/json
      parameters:
        - in: body
          name: passwordRecoveryAdress
          description: "Адрес электронной почты или телефонный номер, на который должен быть отправлен код подтверждения восстановления пароля"
          required: true
          schema:
            $ref: '#/definitions/passwordRecoveryAdress'
      responses:
        '200':
          description: "Успешно"
          schema:
            $ref: '#/definitions/passwordRecoveryRequest'
        '400':
          description: "Ошибка в запросе (некорректное значение в полях __Электронная почта__ или __Номер телефона__)"
  /authorization/check-recovery-code:
    post:
      tags:
        - authorization
      summary: "Проверка кода восстановления при восстановлении пароля"
      operationId: check-recovery-code
      produces:
        - application/json
      parameters:
        - in: body
          name: passwordRecoveryCode
          description: "Код подтверждения восстановления пароля"
          required: true
          schema:
            $ref: '#/definitions/passwordRecoveryCode'
      responses:
        '200':
          description: "Успешно"
          schema:
            $ref: '#/definitions/passwordRecoveryRequest'
        '400':
          description: "Ошибка в запросе (некорректное значение в поле __Код потверждения__)"
  /authorization/change-password-from-recovery-request:
    post:
      tags:
        - authorization
      summary: "Изменение пароля игрока при запросе на восстановление"
      operationId: change-password-from-recovery-request
      produces:
        - application/json
      parameters:
        - in: body
          name: newPlayerPassword
          description: "Новый пароль игрока"
          required: true
          schema:
            $ref: '#/definitions/newPlayerPassword'
      responses:
        '200':
          description: "Успешно"
        '400':
          description: "Ошибка в запросе (некорректное значение в полях __Новый пароль__ или __Код потверждения__)"
  /authorization/get-admin-header:
    get:
      tags:
        - authorization
      summary: "Получить данные о текущем сотруднике в шапку сайта"
      description: "Выполняется при загрузке страницы (у авторизованного сотрудника)"
      operationId: get-admin-header
      produces:
        - application/json
      parameters: []
      responses:
        '200':
          description: "Успешно"
          schema:
            $ref: '#/definitions/adminHeader'
        '401':
          description: "Пользователь не авторизован"
        '403':
          description: "У пользователя нет прав доступа"
      security:
        - userAuthentication: []
        - adminRole: []
  /authorization/get-player-header:
    get:
      tags:
        - authorization
      summary: "Получить данные о текущем игроке в шапку сайта"
      description: "Выполняется при загрузке страницы (у авторизованного игрока). Дополнительно проверяется статус идентификации игрока"
      operationId: get-player-header
      produces:
        - application/json
      parameters: []
      responses:
        '200':
          description: "Успешно"
          schema:
            $ref: '#/definitions/playerHeader'
        '401':
          description: "Пользователь не авторизован"
      security:
        - userAuthentication: []
        - playerRole: []
        - playerIdentificationStatus: []
  /support/support-request-by-email:
    post:
      tags:
        - support
      summary: "Отправить запрос в службу поддержки по электронной почте"
      description: "
        1. Необходимо отправить письмо на почтовый адрес букмекерской конторы с того же самого почтового адреса (иными словами - отправляем сами себе)\n
        2. Письмо содержит в себе:\n
          а) Контактная электронная почта (значение в поле __email__),\n
          б) Тема обращения (интерпретация значения в поле __requestSubject__),\n
          в) Текст запроса (значение в поле __requestMessage__)\n"
      operationId: support-request-by-email
      produces:
        - application/json
      parameters:
        - in: body
          name: supportRequestByEmail
          description: "Данные для запроса в службу поддержки (по электронной почте)"
          required: true
          schema:
            $ref: '#/definitions/supportRequestByEmail'
      responses:
        '200':
          description: "Успешно"
        '400':
          description: "Ошибка в запросе (некорректное значение в полях __Электронная почта__ или __Тема обращения__)"
  /table-settings/save-user-head-items-settings-list:
    post:
      tags:
        - table-settings
      summary: "Сохранить настройки таблицы (индексы столбцов и их видимость)"
      operationId: save-user-head-items-settings-list
      produces:
        - application/json
      parameters:
        - in: body
          name: headItemsSettingsList
          description: "Настройки таблицы, которые необходимо сохранить"
          required: true
          schema:
            $ref: '#/definitions/headItemsSettingsList'
      responses:
        '200':
          description: "Успешно"
        '401':
          description: "Пользователь не авторизован"
      security:
        - userAuthentication: []
  /table-settings/save-user-head-items-widths-list:
    post:
      tags:
        - table-settings
      summary: "Сохранить настройки таблицы (ширина столбцов)"
      operationId: save-user-head-items-widths-list
      produces:
        - application/json
      parameters:
        - in: body
          name: headItemsWidthsList
          description: "Ширина столбца таблицы, которую необходимо сохранить"
          required: true
          schema:
            $ref: '#/definitions/headItemsWidthsList'
      responses:
        '200':
          description: "Успешно"
        '401':
          description: "Пользователь не авторизован"
      security:
        - userAuthentication: []
  /admin-themes/get-admin-sidebar-status:
    get:
      tags:
        - admin-themes
      summary: "Получить статус бокового меню"
      description: "Выполняется при загрузке страницы (Получить значение поля __admin_sidebar_status__ таблицы __user_theme__)"
      operationId: get-admin-sidebar-status
      produces:
        - application/json
      parameters: []
      responses:
        '200':
          description: "Успешно"
          schema:
            $ref: '#/definitions/adminSidebar'
        '401':
          description: "Пользователь не авторизован"
        '403':
          description: "У пользователя нет прав доступа"
      security:
        - userAuthentication: []
        - adminRole: []
  /admin-themes/collapse-admin-sidebar:
    get:
      tags:
        - admin-themes
      summary: "Свернуть боковое меню"
      description: "В поле __admin_sidebar_status__ таблицы __user_theme__ задать значение __1__"
      operationId: collapse-admin-sidebar
      produces:
        - application/json
      parameters: []
      responses:
        '200':
          description: "Успешно"
        '401':
          description: "Пользователь не авторизован"
        '403':
          description: "У пользователя нет прав доступа"
      security:
        - userAuthentication: []
        - adminRole: []
  /admin-themes/expand-admin-sidebar:
    get:
      tags:
        - admin-themes
      summary: "Развернуть боковое меню"
      description: "В поле __admin_sidebar_status__ таблицы __user_theme__ задать значение __0__"
      operationId: expand-admin-sidebar
      produces:
        - application/json
      parameters: []
      responses:
        '200':
          description: "Успешно"
        '401':
          description: "Пользователь не авторизован"
        '403':
          description: "У пользователя нет прав доступа"
      security:
        - userAuthentication: []
        - adminRole: []
  /admin-events/get-admin-events-filter:
    post:
      tags:
        - admin-events
      summary: "Получить данные в поля фильтров по событиям"
      description: "Для таблиц: __На сайте__, __Не на сайте__, __Удаленное__ (в Line и Live)"
      operationId: get-admin-events-filter
      produces:
        - application/json
      parameters:
        - in: body
          name: adminEventsFilterParams
          description: "Входные параметры фильтра"
          required: true
          schema:
            $ref: '#/definitions/adminEventsFilterParams'
      responses:
        '200':
          description: "Успешно"
          schema:
            $ref: '#/definitions/adminEventsFilter'
        '401':
          description: "Пользователь не авторизован"
        '403':
          description: "У пользователя нет прав доступа"
      security:
        - userAuthentication: []
        - adminRole: []
  /admin-events/get-admin-events-table:
    post:
      tags:
        - admin-events
      summary: "Получить данные в таблицы по событиям"
      description: "Таблицы: __На сайте__, __Не на сайте__, __Удаленное__ (в Line и Live)"
      operationId: get-admin-events-table
      produces:
        - application/json
      parameters:
        - in: body
          name: adminEventsTableParams
          description: "Входные параметры таблиц"
          required: true
          schema:
            $ref: '#/definitions/adminEventsTableParams'
      responses:
        '200':
          description: "Успешно"
          schema:
            $ref: '#/definitions/adminEventsTable'
        '401':
          description: "Пользователь не авторизован"
        '403':
          description: "У пользователя нет прав доступа"
      security:
        - userAuthentication: []
        - adminRole: []
  /admin-events/send-event-on-site:
    post:
      tags:
        - admin-events
      summary: "Отправить событие в \"На сайте\""
      description: "
        1. Для вкладок __Не на сайте__ и __Удаленное__\n
        2. Значение в поле __active__ таблицы __events__ поменять на __1__\n
        3. Значение в поле __is_stopped__ таблицы __events__ поменять на __false__\n
        4. Обновить значение в поле __send_on_site_at__ таблицы __events__\n"
      operationId: send-event-on-site
      produces:
        - application/json
      parameters:
        - in: body
          name: sendEvents
          description: "Список событий, которые необходимо отправить в __На сайте__"
          required: true
          schema:
            $ref: '#/definitions/sendEvents'
      responses:
        '200':
          description: "Успешно"
        '401':
          description: "Пользователь не авторизован"
        '403':
          description: "У пользователя нет прав доступа"
      security:
        - userAuthentication: []
        - adminRole: []
  /admin-events/send-event-not-on-site:
    post:
      tags:
        - admin-events
      summary: "Отправить событие в \"Не на сайте\""
      description: "
        1. Для вкладки __На сайте__\n
        2. Значение в поле __active__ таблицы __events__ поменять на __0__\n
        3. Значение в поле __is_stopped__ таблицы __events__ поменять на __true__\n
        4. Обновить значение в поле __send_not_on_site_at__ таблицы __events__\n"
      operationId: send-event-not-on-site
      produces:
        - application/json
      parameters:
        - in: body
          name: sendEvents
          description: "Список событий, которые необходимо отправить в __Не на сайте__"
          required: true
          schema:
            $ref: '#/definitions/sendEvents'
      responses:
        '200':
          description: "Успешно"
        '401':
          description: "Пользователь не авторизован"
        '403':
          description: "У пользователя нет прав доступа"
      security:
        - userAuthentication: []
        - adminRole: []
  /admin-events/delete-event:
    post:
      tags:
        - admin-events
      summary: "Отправить событие в \"Удаленное\" или удалить событие полностью"
      description: "
        1. Для вкладок __На сайте__ и __Не на сайте__:\n
          а) Значение в поле __active__ таблицы __events__ поменять на __2__\n
          б) Значение в поле __is_stopped__ таблицы __events__ поменять на __true__\n
          в) Обновить значение в поле __send_on_deleted_at__ таблицы 'events'\n
        2. Для вкладки __Удаленное__ - удалить событие:\n
          а) Значение в поле __active__ таблицы __events__ поменять на __3__\n"
      operationId: delete-event
      produces:
        - application/json
      parameters:
        - in: body
          name: sendEvents
          description: "Список событий, которые необходимо отправить в __Удаленное__ или удалить полностью"
          required: true
          schema:
            $ref: '#/definitions/sendEvents'
      responses:
        '200':
          description: "Успешно"
        '401':
          description: "Пользователь не авторизован"
        '403':
          description: "У пользователя нет прав доступа"
      security:
        - userAuthentication: []
        - adminRole: []
  /admin-events/get-event-risk-group-list:
    get:
      tags:
        - admin-events
      summary: "Получить список групп риска событий"
      description: "Выполняется при загрузке страницы"
      operationId: get-event-risk-group-list
      produces:
        - application/json
      parameters: []
      responses:
        '200':
          description: "Успешно"
          schema:
            $ref: '#/definitions/riskGroupList'
        '401':
          description: "Пользователь не авторизован"
        '403':
          description: "У пользователя нет прав доступа"
      security:
        - userAuthentication: []
        - adminRole: []
  /admin-events/set-event-risk-group/{eventId}/{riskGroupId}:
    get:
      tags:
        - admin-events
      summary: "Установить группу риска события"
      description: "Через контекстное меню (ПКМ на событии)"
      operationId: set-event-risk-group
      produces:
        - application/json
      parameters:
        - name: eventId
          in: path
          description: "ID события, которому присваивается группа риска"
          required: true
          type: integer
        - name: riskGroupId
          in: path
          description: "ID группы риска, которая присваивается событию"
          required: true
          type: integer
      responses:
        '200':
          description: "Успешно"
        '401':
          description: "Пользователь не авторизован"
        '403':
          description: "У пользователя нет прав доступа"
      security:
        - userAuthentication: []
        - adminRole: []
  /admin-events/save-event-max-risk/{eventId}/{maxRisk}:
    get:
      tags:
        - admin-events
      summary: "Сохранить значение максимальных рисков для события"
      description: "Через контекстное меню (ПКМ на событии)"
      operationId: save-event-max-risk
      produces:
        - application/json
      parameters:
        - name: eventId
          in: path
          description: "ID события, которому устанавливается значение максимальных рисков"
          required: true
          type: integer
        - name: maxRisk
          in: path
          description: "Значение максимальных рисков для события"
          required: true
          type: integer
      responses:
        '200':
          description: "Успешно"
        '400':
          description: "Ошибка в запросе (некорректное значение в поле __Максимальные риски__)"
        '401':
          description: "Пользователь не авторизован"
        '403':
          description: "У пользователя нет прав доступа"
      security:
        - userAuthentication: []
        - adminRole: []
  /admin-events/save-event-level/{eventId}/{level}:
    get:
      tags:
        - admin-events
      summary: "Сохранить уровень росписи события"
      description: "Через контекстное меню (ПКМ на событии)"
      operationId: save-event-level
      produces:
        - application/json
      parameters:
        - name: eventId
          in: path
          description: "ID события, которому присваивается уровень росписи"
          required: true
          type: integer
        - name: level
          in: path
          description: "Уровень росписи события (от 1 до 10), который присваивается событию"
          enum:
            - 1
            - 2
            - 3
            - 4
            - 5
            - 6
            - 7
            - 8
            - 9
            - 10
          required: true
          type: integer
      responses:
        '200':
          description: "Успешно"
        '401':
          description: "Пользователь не авторизован"
        '403':
          description: "У пользователя нет прав доступа"
      security:
        - userAuthentication: []
        - adminRole: []
  /admin-betting-stream/get-betting-stream-filter:
    post:
      tags:
        - admin-betting-stream
      summary: "Получить данные в поля фильтров по потоку ставок"
      operationId: get-betting-stream-filter
      produces:
        - application/json
      parameters:
        - in: body
          name: bettingStreamFilterParams
          description: "Входные параметры фильтра"
          required: true
          schema:
            $ref: '#/definitions/bettingStreamFilterParams'
      responses:
        '200':
          description: "Успешно"
          schema:
            $ref: '#/definitions/bettingStreamFilter'
        '401':
          description: "Пользователь не авторизован"
        '403':
          description: "У пользователя нет прав доступа"
      security:
        - userAuthentication: []
        - adminRole: []
  /admin-betting-stream/get-betting-stream-table:
    post:
      tags:
        - admin-betting-stream
      summary: "Получить данные в таблицу по потоку ставок"
      description: "
        1. По значению входного параметра __type__ возвращать одиночные (__1__) или экспресс ставки (__2__), либо все ставки (__0__). Для этого использовать параметр __is_express__ (таблица __bets__)\n
        2. По значению входного параметра __timeStatus__ возвращать ставки, в которых есть хотя бы один Line (__1__) или Live (__2__) маркет, либо все ставки (__0__). Для этого использовать параметр __is_event_live__ (таблица __bets_odds__)\n"
      operationId: get-betting-stream-table
      produces:
        - application/json
      parameters:
        - in: body
          name: bettingStreamTableParams
          description: "Входные параметры таблицы"
          required: true
          schema:
            $ref: '#/definitions/bettingStreamTableParams'
      responses:
        '200':
          description: "Успешно"
          schema:
            $ref: '#/definitions/bettingStreamTable'
        '401':
          description: "Пользователь не авторизован"
        '403':
          description: "У пользователя нет прав доступа"
      security:
        - userAuthentication: []
        - adminRole: []
  /admin-betting-stream/get-player-type-list:
    get:
      tags:
        - admin-betting-stream
      summary: "Получить список классов игроков"
      description: "Выполняется при загрузке страницы"
      operationId: get-player-type-list
      produces:
        - application/json
      parameters: []
      responses:
        '200':
          description: "Успешно"
          schema:
            $ref: '#/definitions/playerTypeList'
        '401':
          description: "Пользователь не авторизован"
        '403':
          description: "У пользователя нет прав доступа"
      security:
        - userAuthentication: []
        - adminRole: []
  /admin-betting-stream/set-player-type/{playerId}/{playerTypeId}:
    get:
      tags:
        - admin-betting-stream
      summary: "Установить класс игрока"
      description: "Через контекстное меню (ПКМ на ставке)"
      operationId: set-player-type
      produces:
        - application/json
      parameters:
        - name: playerId
          in: path
          description: "ID игрока, которому присваивается класс"
          required: true
          type: integer
        - name: playerTypeId
          in: path
          description: "ID класса, который присваивается игроку"
          required: true
          type: integer
      responses:
        '200':
          description: "Успешно"
        '401':
          description: "Пользователь не авторизован"
        '403':
          description: "У пользователя нет прав доступа"
      security:
        - userAuthentication: []
        - adminRole: []
  /admin-payment-requests/get-payment-requests-table:
    post:
      tags:
        - admin-payment-requests
      summary: "Получить данные в таблицу по заявкам на выплаты"
      description: "Таблицы: __Новые__, __Одобренные__, __Отклоненные__"
      operationId: get-payment-requests-table
      produces:
        - application/json
      parameters:
        - in: body
          name: paymentRequestsTableParams
          description: "Входные параметры таблиц"
          required: true
          schema:
            $ref: '#/definitions/paymentRequestsTableParams'
      responses:
        '200':
          description: "Успешно"
          schema:
            $ref: '#/definitions/paymentRequestsTable'
        '401':
          description: "Пользователь не авторизован"
        '403':
          description: "У пользователя нет прав доступа"
      security:
        - userAuthentication: []
        - adminRole: []
  /admin-payment-requests/confirm-payment-request/{withdrawId}:
    get:
      tags:
        - admin-payment-requests
      summary: "Одобрить заявку на выплату"
      description: "Для заявок со статусом __Новая__"
      operationId: confirm-payment-request
      produces:
        - application/json
      parameters:
        - name: withdrawId
          in: path
          description: "ID заявки на выплату, которую необходимо одобрить"
          required: true
          type: integer
      responses:
        '200':
          description: "Успешно"
        '400':
          description: "Ошибка в запросе (некорректный статус заявки на выплату)"
        '401':
          description: "Пользователь не авторизован"
        '403':
          description: "У пользователя нет прав доступа"
      security:
        - userAuthentication: []
        - adminRole: []
  /admin-payment-requests/reject-payment-request:
    post:
      tags:
        - admin-payment-requests
      summary: "Отклонить заявку на выплату"
      description: "Для заявок со статусом __Новая__"
      operationId: reject-payment-request
      produces:
        - application/json
      parameters:
        - in: body
          name: rejectPaymentRequestParams
          description: "Входные параметры отклонения заявки на выплату"
          required: true
          schema:
            $ref: '#/definitions/rejectPaymentRequestParams'
      responses:
        '200':
          description: "Успешно"
        '400':
          description: "Ошибка в запросе (некорректный статус заявки на выплату)"
        '401':
          description: "Пользователь не авторизован"
        '403':
          description: "У пользователя нет прав доступа"
      security:
        - userAuthentication: []
        - adminRole: []
  /admin-payment-requests/request-player-withdraw-documents:
    post:
      tags:
        - admin-payment-requests
      summary: "Запросить документы у игрока при отклонении заявки на выплату"
      description: "
        1. Для заявок со статусами __Новая__\n 
        2. Запрос документов приводит к автоматическому отклонению заявки на выплату - значению параметра __rejectionReason__ необходимо присвоить __Запрошены документы__\n
        3. В таблице __users__ параметру __identification_status__ присвоить значение __2__ (__Документы запрошены__)\n
        4. В таблице __identification_requests__ для данного __user_id__ создать запись со статусом __status=0__ (__Открыт__)\n
        5. В таблице __user_documents__ по __user_id__ и __type__ проверяется наличие старых записей:\n
          а) Если запись с такими параметрами найдена, то ее статус изменить на __4__ (__Архив__)\n
          б) Создать новую запись с параметрами __user_id__, __type__ и __status=1__ (__Ожидает загрузки__) для каждого типа документа из входного параметра\n
          в) Связать записи в таблицах __user_documents__ и __identification_requests__ через __identification_request_id__\n"
      operationId: request-player-withdraw-documents
      produces:
        - application/json
      parameters:
        - in: body
          name: requestPlayerWithdrawDocumentsParams
          description: "Входные параметры запроса документов у игрока"
          required: true
          schema:
            $ref: '#/definitions/requestPlayerWithdrawDocumentsParams'
      responses:
        '200':
          description: "Успешно"
        '400':
          description: "Ошибка в запросе (некорректный статус заявки на выплату или некорректные типы документов)"
        '401':
          description: "Пользователь не авторизован"
        '403':
          description: "У пользователя нет прав доступа"
      security:
        - userAuthentication: []
        - adminRole: []
  /admin-completed-events/get-completed-events-filter:
    post:
      tags:
        - admin-completed-events
      summary: "Получить данные в поля фильтров по завершенным событиям"
      description: "Возвращать данные в поля фильтров для событий со значением в поле __time_status__ таблицы __events__ равным __3__"
      operationId: get-completed-events-filter
      produces:
        - application/json
      parameters:
        - in: body
          name: completedEventsFilterParams
          description: "Входные параметры фильтра"
          required: true
          schema:
            $ref: '#/definitions/completedEventsFilterParams'
      responses:
        '200':
          description: "Успешно"
          schema:
            $ref: '#/definitions/completedEventsFilter'
        '401':
          description: "Пользователь не авторизован"
        '403':
          description: "У пользователя нет прав доступа"
      security:
        - userAuthentication: []
        - adminRole: []
  /admin-completed-events/get-completed-events-table:
    post:
      tags:
        - admin-completed-events
      summary: "Получить данные в таблицу по завершенным событиям"
      description: "Возвращать данные в таблицу для событий со значением в поле __time_status__ таблицы __events__ равным __3__"
      operationId: get-completed-events-table
      produces:
        - application/json
      parameters:
        - in: body
          name: completedEventsTableParams
          description: "Входные параметры таблицы"
          required: true
          schema:
            $ref: '#/definitions/completedEventsTableParams'
      responses:
        '200':
          description: "Успешно"
          schema:
            $ref: '#/definitions/completedEventsTable'
        '401':
          description: "Пользователь не авторизован"
        '403':
          description: "У пользователя нет прав доступа"
      security:
        - userAuthentication: []
        - adminRole: []
  /admin-multivariate-analysis/get-bet-analysis-filter:
    post:
      tags:
        - admin-multivariate-analysis
      summary: "Получить данные в поля фильтров анализа по ставкам"
      description: "
        1. Для вкладки __Анализ по ставкам__\n
        2. В поля фильтров необходимо возвращать только те данные, для которых существует запись в таблице __bets_odds__ при заданных параметрах __dateFrom__ и __dateTo__ (По умолчанию = 7 дней)\n"
      operationId: get-bet-analysis-filter
      produces:
        - application/json
      parameters:
        - in: body
          name: betAnalysisFilterParams
          description: "Входные параметры фильтра"
          required: true
          schema:
            $ref: '#/definitions/betAnalysisFilterParams'
      responses:
        '200':
          description: "Успешно"
          schema:
            $ref: '#/definitions/betAnalysisFilter'
        '401':
          description: "Пользователь не авторизован"
        '403':
          description: "У пользователя нет прав доступа"
      security:
        - userAuthentication: []
        - adminRole: []
  /admin-multivariate-analysis/get-bet-analysis-table:
    post:
      tags:
        - admin-multivariate-analysis
      summary: "Получить данные в таблицу анализа по ставкам"
      description: "Для вкладки __Анализ по ставкам__"
      operationId: get-bet-analysis-table
      produces:
        - application/json
      parameters:
        - in: body
          name: betAnalysisTableParams
          description: "Входные параметры таблицы"
          required: true
          schema:
            $ref: '#/definitions/betAnalysisTableParams'
      responses:
        '200':
          description: "Успешно"
          schema:
            $ref: '#/definitions/betAnalysisTable'
        '401':
          description: "Пользователь не авторизован"
        '403':
          description: "У пользователя нет прав доступа"
      security:
        - userAuthentication: []
        - adminRole: []
  /admin-multivariate-analysis/get-financial-flow-analysis-filter:
    post:
      tags:
        - admin-multivariate-analysis
      summary: "Получить данные в поля фильтров анализа по финансовым потокам"
      description: "Для вкладки __Анализ по финансовым потокам__"
      operationId: get-financial-flow-analysis-filter
      produces:
        - application/json
      parameters:
        - in: body
          name: financialFlowAnalysisFilterParams
          description: "Входные параметры фильтра"
          required: true
          schema:
            $ref: '#/definitions/financialFlowAnalysisFilterParams'
      responses:
        '200':
          description: "Успешно"
          schema:
            $ref: '#/definitions/financialFlowAnalysisFilter'
        '401':
          description: "Пользователь не авторизован"
        '403':
          description: "У пользователя нет прав доступа"
      security:
        - userAuthentication: []
        - adminRole: []
  /admin-multivariate-analysis/get-financial-flow-analysis-table:
    post:
      tags:
        - admin-multivariate-analysis
      summary: "Получить данные в таблицу анализа по финансовым потокам"
      description: "Для вкладки __Анализ по финансовым потокам__"
      operationId: get-financial-flow-analysis-table
      produces:
        - application/json
      parameters:
        - in: body
          name: financialFlowAnalysisTableParams
          description: "Входные параметры таблицы"
          required: true
          schema:
            $ref: '#/definitions/financialFlowAnalysisTableParams'
      responses:
        '200':
          description: "Успешно"
          schema:
            $ref: '#/definitions/financialFlowAnalysisTable'
        '401':
          description: "Пользователь не авторизован"
        '403':
          description: "У пользователя нет прав доступа"
      security:
        - userAuthentication: []
        - adminRole: []
  /admin-events-calculation/get-events-calculation-filter:
    post:
      tags:
        - admin-events-calculation
      summary: "Получить данные в поля фильтров по расчету событий"
      description: "
        1. Возвращать данные в поля фильтров для событий со значением в поле __time_status__ таблицы __events__ равным __3__\n
        2. По значению входного параметра __betTimeStatus__ возвращать данные в поля фильтров для событий, у которых есть нерассчитанные ставки в Line или Live\n
          а) Для определения Line (__1__) и Live (__2__) использовать параметр __is_event_live__ (таблица __bets_odds__)\n
          б) Для определения статуса ставки (__Не рассчитана = 0__) использовать параметр __status__ (таблица __bets_odds__)\n"
      operationId: get-events-calculation-filter
      produces:
        - application/json
      parameters:
        - in: body
          name: eventCalculationFilterParams
          description: "Входные параметры фильтра"
          required: true
          schema:
            $ref: '#/definitions/eventCalculationFilterParams'
      responses:
        '200':
          description: "Успешно"
          schema:
            $ref: '#/definitions/eventCalculationFilter'
        '401':
          description: "Пользователь не авторизован"
        '403':
          description: "У пользователя нет прав доступа"
      security:
        - userAuthentication: []
        - adminRole: []
  /admin-events-calculation/get-events-calculation-table:
    post:
      tags:
        - admin-events-calculation
      summary: "Получить данные в таблицу по расчету событий"
      description: "
        1. Возвращать данные в таблицу для событий со значением в поле __time_status__ таблицы __events__ равным __3__\n
        2. По значению входного параметра __betTimeStatus__ возвращать данные в таблицу для событий, у которых есть нерассчитанные ставки в Line или Live\n
          а) Для определения Line (__1__) и Live (__2__) использовать параметр __is_event_live__ (таблица __bets_odds__)\n
          б) Для определения статуса ставки (__Не рассчитана = 0__) использовать параметр __status__ (таблица __bets_odds__)\n
        3. Выходной параметр __isCalculationComplete__ отвечает за состояние кнопки __\"Расчитать\"__:\n
          а) __isCalculationComplete = null__ - кнопка __\"Расчитать\"__ активна\n
          б) __isCalculationComplete = false__ - кнопка __\"Расчитать\"__ неактивна\n"
      operationId: get-events-calculation-table
      produces:
        - application/json
      parameters:
        - in: body
          name: eventCalculationTableParams
          description: "Входные параметры таблиц"
          required: true
          schema:
            $ref: '#/definitions/eventCalculationTableParams'
      responses:
        '200':
          description: "Успешно"
          schema:
            $ref: '#/definitions/eventCalculationTable'
        '401':
          description: "Пользователь не авторизован"
        '403':
          description: "У пользователя нет прав доступа"
      security:
        - userAuthentication: []
        - adminRole: []
  /admin-events-calculation/calculate-event/{eventId}:
    get:
      tags:
        - admin-events-calculation
      summary: "Расчитать ставки по событию"
      description: "
        1. Расчитывает ставки на событие с помощью последовательного изменения данных по матчу (Использование тригеров авторасчета)\n
        2. Выходной параметр __isCalculationComplete__ отвечает за состояние кнопки __\"Расчитать\"__ и за отображение матча на странице __\"Расчет\"__:\n
          а) __isCalculationComplete = null__ - матч отображается на сайте и кнопка __\"Расчитать\"__ активна\n
          б) __isCalculationComplete = false__ - матч отображается на сайте и кнопка __\"Расчитать\"__ неактивна\n
          в) __isCalculationComplete = true__ - матч необходимо скрыть\n"
      operationId: calculate-event
      produces:
        - application/json
      parameters:
        - name: eventId
          in: path
          description: "ID события, ставки которого необходимо расчитать"
          required: true
          type: integer
      responses:
        '200':
          description: "Успешно"
          schema:
            $ref: '#/definitions/eventCalculationResult'
        '401':
          description: "Пользователь не авторизован"
        '403':
          description: "У пользователя нет прав доступа"
      security:
        - userAuthentication: []
        - adminRole: []
  /admin-events-calculation/get-event-result/{eventId}:
    get:
      tags:
        - admin-events-calculation
      summary: "Получить данные при редактировании результатов события"
      operationId: get-event-result
      produces:
        - application/json
      parameters:
        - name: eventId
          in: path
          description: "ID события, результаты которого необходимо получить"
          required: true
          type: integer
      responses:
        '200':
          description: "Успешно"
          schema:
            $ref: '#/definitions/eventResults'
        '401':
          description: "Пользователь не авторизован"
        '403':
          description: "У пользователя нет прав доступа"
      security:
        - userAuthentication: []
        - adminRole: []
  /admin-events-calculation/save-event-result/{eventId}/{currentScore}:
    get:
      tags:
        - admin-events-calculation
      summary: "Сохранить данные при редактировании результатов события"
      operationId: save-event-result
      produces:
        - application/json
      parameters:
        - name: eventId
          in: path
          description: "ID события, результаты которого необходимо сохранить"
          required: true
          type: integer
        - name: currentScore
          in: path
          description: "Результаты события, которые необходимо сохранить"
          required: true
          type: string
      responses:
        '200':
          description: "Успешно"
        '400':
          description: "Ошибка в запросе (некорректное значение в поле __Счет__)"
        '401':
          description: "Пользователь не авторизован"
        '403':
          description: "У пользователя нет прав доступа"
      security:
        - userAuthentication: []
        - adminRole: []
  /admin-logs/get-logs-filter:
    post:
      tags:
        - admin-logs
      summary: "Получить данные в поля фильтров по логам"
      operationId: get-logs-filter
      produces:
        - application/json
      parameters:
        - in: body
          name: logsFilterParams
          description: "Входные параметры фильтра"
          required: true
          schema:
            $ref: '#/definitions/logsFilterParams'
      responses:
        '200':
          description: "Успешно"
          schema:
            $ref: '#/definitions/logsFilter'
        '401':
          description: "Пользователь не авторизован"
        '403':
          description: "У пользователя нет прав доступа"
      security:
        - userAuthentication: []
        - adminRole: []
  /admin-logs/get-logs-table:
    post:
      tags:
        - admin-logs
      summary: "Получить данные в таблицу по логам"
      operationId: get-logs-table
      produces:
        - application/json
      parameters:
        - in: body
          name: logsTableParams
          description: "Входные параметры таблицы"
          required: true
          schema:
            $ref: '#/definitions/logsTableParams'
      responses:
        '200':
          description: "Успешно"
          schema:
            $ref: '#/definitions/logsTable'
        '401':
          description: "Пользователь не авторизован"
        '403':
          description: "У пользователя нет прав доступа"
      security:
        - userAuthentication: []
        - adminRole: []
  /admin-sliders/get-sliders-for-edit:
    get:
      tags:
        - admin-sliders
      summary: "Получить данные по слайдерам для редактирования"
      description: "Необходимо возвращать слайдеры со статусом __status=0__ (__Активен__)"
      operationId: get-sliders-for-edit
      produces:
        - application/json
      parameters: []
      responses:
        '200':
          description: "Успешно"
          schema:
            $ref: '#/definitions/slidersForGet'
        '401':
          description: "Пользователь не авторизован"
        '403':
          description: "У пользователя нет прав доступа"
      security:
        - userAuthentication: []
        - adminRole: []
  /admin-sliders/save-sliders:
    post:
      tags:
        - admin-sliders
      summary: "Сохранить данные по слайдерам при редактировании"
      operationId: save-sliders
      produces:
        - application/json
      parameters:
        - in: body
          name: slidersForEdit
          description: "Данные по слайдерам, которые необходимо сохранить"
          required: true
          schema:
            $ref: '#/definitions/slidersForEdit'
      responses:
        '200':
          description: "Успешно"
        '401':
          description: "Пользователь не авторизован"
        '403':
          description: "У пользователя нет прав доступа"
      security:
        - userAuthentication: []
        - adminRole: []
  /admin-sliders/get-banner-stock-list:
    get:
      tags:
        - admin-sliders
      summary: "Получить список баннеров и акций"
      description: "Необходимо возвращать баннеры и акции со статусом __status=0__ (__Активен__)"
      operationId: get-banner-stock-list
      produces:
        - application/json
      parameters: []
      responses:
        '200':
          description: "Успешно"
          schema:
            $ref: '#/definitions/bannerStockList'
        '401':
          description: "Пользователь не авторизован"
        '403':
          description: "У пользователя нет прав доступа"
      security:
        - userAuthentication: []
        - adminRole: []
  /admin-sliders/add-banner:
    post:
      tags:
        - admin-sliders
      summary: "Добавить баннер"
      operationId: add-banner
      produces:
        - application/json
      parameters:
        - in: body
          name: addBanner
          description: "Баннер, который необходимо добавить"
          required: true
          schema:
            $ref: '#/definitions/addBanner'
      responses:
        '200':
          description: "Успешно"
          schema:
            $ref: '#/definitions/bannerId'
        '400':
          description: "Ошибка в запросе (некорректное значение в полях __Событие__ или __Срок действия__)"
        '401':
          description: "Пользователь не авторизован"
        '403':
          description: "У пользователя нет прав доступа"
      security:
        - userAuthentication: []
        - adminRole: []
  /admin-sliders/get-banner-filter:
    get:
      tags:
        - admin-sliders
      summary: "Получить данные в поля фильтров в баннере"
      description: "
        1. Выполняется при загрузке страницы добавления/редактирования баннера\n
        2. Возвращать события со значением в поле __active__ таблицы __events__ равным __1__\n"
      operationId: get-banner-filter
      parameters:
        - in: body
          name: bannerFilterParams
          description: "Входные параметры фильтра"
          required: true
          schema:
            $ref: '#/definitions/bannerFilterParams'
      responses:
        '200':
          description: "Успешно"
          schema:
            $ref: '#/definitions/bannerFilter'
        '401':
          description: "Пользователь не авторизован"
        '403':
          description: "У пользователя нет прав доступа"
      security:
        - userAuthentication: []
        - adminRole: []
  /admin-sliders/get-event-info-to-banner/{eventId}:
    get:
      tags:
        - admin-sliders
      summary: "Получить данные по событию при добавлении его в баннер"
      description: "Выполняется при выбранном в поле фильтра событии в момент добавления/редактирования баннера"
      operationId: get-event-info-to-banner
      parameters:
        - name: eventId
          in: path
          description: "ID события, данные которого необходимо получить"
          required: true
          type: integer
      responses:
        '200':
          description: "Успешно"
          schema:
            $ref: '#/definitions/eventInfoToBanner'
        '401':
          description: "Пользователь не авторизован"
        '403':
          description: "У пользователя нет прав доступа"
      security:
        - userAuthentication: []
        - adminRole: []
  /admin-sliders/get-banner-template-list:
    get:
      tags:
        - admin-sliders
      summary: "Получить список шаблонов баннеров"
      description: "Необходимо возвращать шаблоны баннеров со статусом __status=0__ (__Активен__)"
      operationId: get-banner-template-list
      produces:
        - application/json
      parameters: []
      responses:
        '200':
          description: "Успешно"
          schema:
            $ref: '#/definitions/bannerTemplateList'
        '401':
          description: "Пользователь не авторизован"
        '403':
          description: "У пользователя нет прав доступа"
      security:
        - userAuthentication: []
        - adminRole: []
  /admin-sliders/add-banner-template:
    post:
      tags:
        - admin-sliders
      summary: "Добавить шаблон баннера"
      operationId: add-banner-template
      consumes:
        - multipart/form-data
      produces:
        - application/json
      parameters:
        - name: bannerTemplateName
          in: formData
          description: "Название шаблона баннера, который необходимо сохранить"
          required: true
          type: string
        - name: bannerTemplateImage
          in: formData
          description: "Изображение шаблона баннера, который необходимо сохранить"
          required: true
          type: file
      responses:
        '200':
          description: "Успешно"
          schema:
            $ref: '#/definitions/bannerTemplate'
        '400':
          description: "Ошибка в запросе (некорректное значение в полях __Название шаблона баннера__ или __Изображение шаблона баннера__)"
        '401':
          description: "Пользователь не авторизован"
        '403':
          description: "У пользователя нет прав доступа"
      security:
        - userAuthentication: []
        - adminRole: []
  /admin-sliders/delete-banner-template/{bannerTemplateId}:
    get:
      tags:
        - admin-sliders
      summary: "Удалить шаблон баннера"
      description: "Поменять значение поля __status__ таблицы __banner_templates__ на __1__"
      operationId: delete-banner-template
      produces:
        - application/json
      parameters:
        - name: bannerTemplateId
          in: path
          description: "ID шаблона баннера, который необходимо удалить"
          required: true
          type: integer
      responses:
        '200':
          description: "Успешно"
        '401':
          description: "Пользователь не авторизован"
        '403':
          description: "У пользователя нет прав доступа"
      security:
        - userAuthentication: []
        - adminRole: []
  /admin-sliders/recovery-banner-template/{bannerTemplateId}:
    get:
      tags:
        - admin-sliders
      summary: "Восстановить шаблон баннера"
      description: "Поменять значение поля __status__ таблицы __banner_templates__ на __0__"
      operationId: recovery-banner-template
      produces:
        - application/json
      parameters:
        - name: bannerTemplateId
          in: path
          description: "ID шаблона баннера, который необходимо восстановить"
          required: true
          type: integer
      responses:
        '200':
          description: "Успешно"
        '401':
          description: "Пользователь не авторизован"
        '403':
          description: "У пользователя нет прав доступа"
      security:
        - userAuthentication: []
        - adminRole: []
  /admin-sliders/get-banner/{bannerId}:
    get:
      tags:
        - admin-sliders
      summary: "Получить данные для редактирования баннера"
      operationId: get-banner
      produces:
        - application/json
      parameters:
        - name: bannerId
          in: path
          description: "ID баннера, данные которого необходимо получить при редактировании"
          required: true
          type: integer
      responses:
        '200':
          description: "Успешно"
          schema:
            $ref: '#/definitions/editBanner'
        '401':
          description: "Пользователь не авторизован"
        '403':
          description: "У пользователя нет прав доступа"
      security:
        - userAuthentication: []
        - adminRole: []
  /admin-sliders/edit-banner:
    post:
      tags:
        - admin-sliders
      summary: "Редактировать данные баннера"
      operationId: edit-banner
      produces:
        - application/json
      parameters:
        - in: body
          name: editBanner
          description: "Баннер, который необходимо отредактировать"
          required: true
          schema:
            $ref: '#/definitions/editBanner'
      responses:
        '200':
          description: "Успешно"
        '400':
          description: "Ошибка в запросе (некорректное значение в полях __Название шаблона баннера__ или __Изображение шаблона баннера__)"
        '401':
          description: "Пользователь не авторизован"
        '403':
          description: "У пользователя нет прав доступа"
      security:
        - userAuthentication: []
        - adminRole: []
  /admin-sliders/delete-banner/{bannerId}:
    get:
      tags:
        - admin-sliders
      summary: "Удалить баннер"
      description: "Поменять значение поля __status__ таблицы __banners__ на __1__"
      operationId: delete-banner
      produces:
        - application/json
      parameters:
        - name: bannerId
          in: path
          description: "ID баннера, который необходимо удалить"
          required: true
          type: integer
      responses:
        '200':
          description: "Успешно"
        '401':
          description: "Пользователь не авторизован"
        '403':
          description: "У пользователя нет прав доступа"
      security:
        - userAuthentication: []
        - adminRole: []
  /admin-sliders/recovery-banner/{bannerId}:
    get:
      tags:
        - admin-sliders
      summary: "Восстановить баннер"
      description: "Поменять значение поля __status__ таблицы __banners__ на __0__"
      operationId: recovery-banner
      produces:
        - application/json
      parameters:
        - name: bannerId
          in: path
          description: "ID баннера, который необходимо восстановить"
          required: true
          type: integer
      responses:
        '200':
          description: "Успешно"
        '401':
          description: "Пользователь не авторизован"
        '403':
          description: "У пользователя нет прав доступа"
      security:
        - userAuthentication: []
        - adminRole: []
  /admin-sliders/add-stock:
    post:
      tags:
        - admin-sliders
      summary: "Добавить акцию"
      operationId: add-stock
      consumes:
        - multipart/form-data
      produces:
        - application/json
      parameters:
        - name: type
          in: formData
          description: "Формат-тип добавляемой акции. Варианты: 1 - __1 Баннер__, 2 - __2 баннера__, 3 - __4 баннера__"
          enum:
            - 1
            - 2
            - 3
          required: true
          type: integer
        - name: title
          in: formData
          description: "Название добавляемой акции (на русском языке)"
          required: true
          type: string
        - name: title_en
          in: formData
          description: "Название добавляемой акции (на английском языке)"
          required: true
          type: string
        - name: text
          in: formData
          description: "Текст в добавляемой акции (на русском языке)"
          required: false
          type: string
        - name: text_en
          in: formData
          description: "Текст в добавляемой акции (на английском языке)"
          required: false
          type: string
        - name: url
          in: formData
          description: "Ссылка в добавляемой акции"
          required: false
          type: string
        - name: startAt
          in: formData
          description: "Время начала действия добавляемой акции"
          required: true
          type: integer
        - name: endAt
          in: formData
          description: "Время завершения действия добавляемой акции"
          required: true
          type: integer
        - name: isLanding
          in: formData
          description: "Отображать добавляемую акцию на странице акций?"
          required: true
          type: boolean
        - name: landingImage
          in: formData
          description: "Изображение добавляемой акции для страницы акций"
          required: false
          type: file
        - name: bannerImage
          in: formData
          description: "Изображение добавляемой акции для баннера"
          required: false
          type: file
      responses:
        '200':
          description: "Успешно"
          schema:
            $ref: '#/definitions/editStock'
        '400':
          description: "Ошибка в запросе (некорректное значение в полях __Ссылка__, __Время__, __Изображение для страницы акций__ или __Изображение для баннера__)"
        '401':
          description: "Пользователь не авторизован"
        '403':
          description: "У пользователя нет прав доступа"
      security:
        - userAuthentication: []
        - adminRole: []
  /admin-sliders/get-stock/{stockId}:
    get:
      tags:
        - admin-sliders
      summary: "Получить данные для редактирования акции"
      operationId: get-stock
      produces:
        - application/json
      parameters:
        - name: stockId
          in: path
          description: "ID акции, данные которой необходимо получить при редактировании"
          required: true
          type: integer
      responses:
        '200':
          description: "Успешно"
          schema:
            $ref: '#/definitions/editStock'
        '401':
          description: "Пользователь не авторизован"
        '403':
          description: "У пользователя нет прав доступа"
      security:
        - userAuthentication: []
        - adminRole: []
  /admin-sliders/edit-stock:
    post:
      tags:
        - admin-sliders
      summary: "Редактировать данные акции"
      operationId: edit-stock
      consumes:
        - multipart/form-data
      produces:
        - application/json
      parameters:
        - name: id
          in: formData
          description: "ID редактируемой акции"
          required: true
          type: integer
        - name: type
          in: formData
          description: "Формат-тип редактируемой акции. Варианты: 1 - __1 Баннер__, 2 - __2 баннера__, 3 - __4 баннера__"
          enum:
            - 1
            - 2
            - 3
          required: true
          type: integer
        - name: title
          in: formData
          description: "Название добавляемой акции (на русском языке)"
          required: true
          type: string
        - name: title_en
          in: formData
          description: "Название добавляемой акции (на английском языке)"
          required: true
          type: string
        - name: text
          in: formData
          description: "Текст в добавляемой акции (на русском языке)"
          required: false
          type: string
        - name: text_en
          in: formData
          description: "Текст в добавляемой акции (на английском языке)"
          required: false
          type: string
        - name: url
          in: formData
          description: "Ссылка в редактируемой акции"
          required: false
          type: string
        - name: startAt
          in: formData
          description: "Время начала действия добавляемой акции"
          required: true
          type: integer
        - name: endAt
          in: formData
          description: "Время завершения действия редактируемой акции"
          required: true
          type: integer
        - name: isLanding
          in: formData
          description: "Отображать редактируемую акцию на странице акций?"
          required: true
          type: boolean
        - name: landingImage
          in: formData
          description: "Изображение редактируемой акции для страницы акций"
          required: false
          type: file
        - name: bannerImage
          in: formData
          description: "Изображение редактируемой акции для баннера"
          required: false
          type: file
      responses:
        '200':
          description: "Успешно"
          schema:
            $ref: '#/definitions/editStock'
        '400':
          description: "Ошибка в запросе (некорректное значение в полях __Ссылка__, __Время__, __Изображение для страницы акций__ или __Изображение для баннера__)"
        '401':
          description: "Пользователь не авторизован"
        '403':
          description: "У пользователя нет прав доступа"
      security:
        - userAuthentication: []
        - adminRole: []
  /admin-sliders/delete-stock/{stockId}:
    get:
      tags:
        - admin-sliders
      summary: "Удалить акцию"
      description: "Поменять значение поля __status__ таблицы __stocks__ на __1__"
      operationId: delete-stock
      produces:
        - application/json
      parameters:
        - name: stockId
          in: path
          description: "ID акции, которую необходимо удалить"
          required: true
          type: integer
      responses:
        '200':
          description: "Успешно"
        '401':
          description: "Пользователь не авторизован"
        '403':
          description: "У пользователя нет прав доступа"
      security:
        - userAuthentication: []
        - adminRole: []
  /admin-sliders/recovery-stock/{stockId}:
    get:
      tags:
        - admin-sliders
      summary: "Восстановить акцию"
      description: "Поменять значение поля __status__ таблицы __stocks__ на __0__"
      operationId: recovery-stock
      produces:
        - application/json
      parameters:
        - name: stockId
          in: path
          description: "ID акции, которую необходимо восстановить"
          required: true
          type: integer
      responses:
        '200':
          description: "Успешно"
        '401':
          description: "Пользователь не авторизован"
        '403':
          description: "У пользователя нет прав доступа"
      security:
        - userAuthentication: []
        - adminRole: []
  /admin-users-list/get-player-list-filter:
    post:
      tags:
        - admin-users-list
      summary: "Получить данные в поля фильтров по списку игроков"
      description: "Для вкладки __Игроки__"
      operationId: get-player-list-filter
      produces:
        - application/json
      parameters:
        - in: body
          name: playerListFilterParams
          description: "Входные параметры фильтра"
          required: true
          schema:
            $ref: '#/definitions/playerListFilterParams'
      responses:
        '200':
          description: "Успешно"
          schema:
            $ref: '#/definitions/playerListFilter'
        '401':
          description: "Пользователь не авторизован"
        '403':
          description: "У пользователя нет прав доступа"
      security:
        - userAuthentication: []
        - adminRole: []
  /admin-users-list/get-player-list-table:
    post:
      tags:
        - admin-users-list
      summary: "Получить данные в таблицу по списку игроков"
      description: "Для вкладки __Игроки__"
      operationId: get-player-list-table
      produces:
        - application/json
      parameters:
        - in: body
          name: playerListTableParams
          description: "Входные параметры таблицы"
          required: true
          schema:
            $ref: '#/definitions/playerListTableParams'
      responses:
        '200':
          description: "Успешно"
          schema:
            $ref: '#/definitions/playerListTable'
        '401':
          description: "Пользователь не авторизован"
        '403':
          description: "У пользователя нет прав доступа"
      security:
        - userAuthentication: []
        - adminRole: []
  /admin-users-list/get-admin-list-filter:
    post:
      tags:
        - admin-users-list
      summary: "Получить данные в поля фильтров по списку сотрудников"
      description: "Для вкладки __Сотрудники__"
      operationId: get-admin-list-filter
      produces:
        - application/json
      parameters:
        - in: body
          name: adminListFilterParams
          description: "Входные параметры фильтра"
          required: true
          schema:
            $ref: '#/definitions/adminListFilterParams'
      responses:
        '200':
          description: "Успешно"
          schema:
            $ref: '#/definitions/adminListFilter'
        '401':
          description: "Пользователь не авторизован"
        '403':
          description: "У пользователя нет прав доступа"
      security:
        - userAuthentication: []
        - adminRole: []
  /admin-users-list/get-admin-list-table:
    post:
      tags:
        - admin-users-list
      summary: "Получить данные в таблицу по списку сотрудников"
      description: "Для вкладки __Сотрудники__"
      operationId: get-admin-list-table
      produces:
        - application/json
      parameters:
        - in: body
          name: adminListTableParams
          description: "Входные параметры таблицы"
          required: true
          schema:
            $ref: '#/definitions/adminListTableParams'
      responses:
        '200':
          description: "Успешно"
          schema:
            $ref: '#/definitions/adminListTable'
        '401':
          description: "Пользователь не авторизован"
        '403':
          description: "У пользователя нет прав доступа"
      security:
        - userAuthentication: []
        - adminRole: []
  /admin-users-list/get-admin-type-list:
    get:
      tags:
        - admin-users-list
      summary: "Получить список должностей сотрудников"
      description: "Выполняется при загрузке страницы"
      operationId: get-admin-type-list
      produces:
        - application/json
      parameters: []
      responses:
        '200':
          description: "Успешно"
          schema:
            $ref: '#/definitions/adminRoleList'
        '401':
          description: "Пользователь не авторизован"
        '403':
          description: "У пользователя нет прав доступа"
      security:
        - userAuthentication: []
        - adminRole: []
  /admin-users-list/add-admin:
    post:
      tags:
        - admin-users-list
      summary: "Добавить данные по сотруднику"
      operationId: add-admin
      produces:
        - application/json
      parameters:
        - in: body
          name: adminForAdd
          description: "Данные сотрудника при добавлении"
          required: true
          schema:
            $ref: '#/definitions/adminForAdd'
      responses:
        '200':
          description: "Успешно"
          schema:
            $ref: '#/definitions/adminForAdminListTable'
        '400':
          description: "Ошибка в запросе (некорректное значение в полях __Фамилия__, __Имя__, __Отчество__, __Никнейм__ или __Пароль__)"
        '401':
          description: "Пользователь не авторизован"
        '403':
          description: "У пользователя нет прав доступа"
      security:
        - userAuthentication: []
        - adminRole: []
  /admin-users-list/block-player/{playerId}:
    get:
      tags:
        - admin-users-list
      summary: "Заблокировать игрока"
      description: "Поменять значение поля __status__ таблицы __users__ на __1__"
      operationId: block-player
      produces:
        - application/json
      parameters:
        - name: playerId
          in: path
          description: "ID игрока, которого необходимо заблокировать"
          required: true
          type: integer
      responses:
        '200':
          description: "Успешно"
        '401':
          description: "Пользователь не авторизован"
        '403':
          description: "У пользователя нет прав доступа"
      security:
        - userAuthentication: []
        - adminRole: []
  /admin-users-list/unblock-player/{playerId}:
    get:
      tags:
        - admin-users-list
      summary: "Разблокировать игрока"
      description: "Поменять значение поля __status__ таблицы __users__ на __0__"
      operationId: unblock-player
      produces:
        - application/json
      parameters:
        - name: playerId
          in: path
          description: "ID игрока, которого необходимо разблокировать"
          required: true
          type: integer
      responses:
        '200':
          description: "Успешно"
        '401':
          description: "Пользователь не авторизован"
        '403':
          description: "У пользователя нет прав доступа"
      security:
        - userAuthentication: []
        - adminRole: []
  /admin-users-list/block-admin/{adminId}:
    get:
      tags:
        - admin-users-list
      summary: "Заблокировать сотрудника"
      description: "Поменять значение поля __status__ таблицы __users__ на __1__"
      operationId: block-admin
      produces:
        - application/json
      parameters:
        - name: adminId
          in: path
          description: "ID сотрудника, которого необходимо заблокировать"
          required: true
          type: integer
      responses:
        '200':
          description: "Успешно"
        '401':
          description: "Пользователь не авторизован"
        '403':
          description: "У пользователя нет прав доступа"
      security:
        - userAuthentication: []
        - adminRole: []
  /admin-users-list/unblock-admin/{adminId}:
    get:
      tags:
        - admin-users-list
      summary: "Разблокировать сотрудника"
      description: "Поменять значение поля __status__ таблицы __users__ на __0__"
      operationId: unblock-admin
      produces:
        - application/json
      parameters:
        - name: adminId
          in: path
          description: "ID сотрудника, которого необходимо разблокировать"
          required: true
          type: integer
      responses:
        '200':
          description: "Успешно"
        '401':
          description: "Пользователь не авторизован"
        '403':
          description: "У пользователя нет прав доступа"
      security:
        - userAuthentication: []
        - adminRole: []
  /admin-users-list/delete-admin/{adminId}:
    get:
      tags:
        - admin-users-list
      summary: "Удалить сотрудника"
      description: "Поменять значение поля __status__ таблицы __users__ на __2__"
      operationId: delete-admin
      produces:
        - application/json
      parameters:
        - name: adminId
          in: path
          description: "ID сотрудника, которого необходимо удалить"
          required: true
          type: integer
      responses:
        '200':
          description: "Успешно"
        '401':
          description: "Пользователь не авторизован"
        '403':
          description: "У пользователя нет прав доступа"
      security:
        - userAuthentication: []
        - adminRole: []
  /admin-leagues-setting/get-league-list:
    get:
      tags:
        - admin-leagues-setting
      summary: "Получить список чемпионатов и их групп риска"
      description: "Выполняется при загрузке страницы"
      operationId: get-league-list
      produces:
        - application/json
      parameters: []
      responses:
        '200':
          description: "Успешно"
          schema:
            $ref: '#/definitions/adminSportList'
        '401':
          description: "Пользователь не авторизован"
        '403':
          description: "У пользователя нет прав доступа"
      security:
        - userAuthentication: []
        - adminRole: []
  /admin-leagues-setting/get-league-risk-group-list:
    get:
      tags:
        - admin-leagues-setting
      summary: "Получить список групп риска чемпионатов"
      description: "Выполняется при загрузке страницы"
      operationId: get-league-risk-group-list
      produces:
        - application/json
      parameters: []
      responses:
        '200':
          description: "Успешно"
          schema:
            $ref: '#/definitions/riskGroupList'
        '401':
          description: "Пользователь не авторизован"
        '403':
          description: "У пользователя нет прав доступа"
      security:
        - userAuthentication: []
        - adminRole: []
  /admin-leagues-setting/set-league-risk-group/{leagueId}/{riskGroupId}:
    get:
      tags:
        - admin-leagues-setting
      summary: "Установить группу риска чемпионата"
      description: "При смене группы риска чемпионата необходимо менять группу риска событий, которые относятся к данному чемпионату"
      operationId: set-league-risk-group
      produces:
        - application/json
      parameters:
        - name: leagueId
          in: path
          description: "ID чемпионата, которому присваивается группа риска"
          required: true
          type: integer
        - name: riskGroupId
          in: path
          description: "ID группы риска, которая присваивается чемпионату"
          required: true
          type: integer
      responses:
        '200':
          description: "Успешно"
        '401':
          description: "Пользователь не авторизован"
        '403':
          description: "У пользователя нет прав доступа"
      security:
        - userAuthentication: []
        - adminRole: []
  /admin-players-identification/get-player-identification-filter:
    post:
      tags:
        - admin-players-identification
      summary: "Получить данные в поле фильтра по идентификации игроков"
      description: "Необходимо возвращать заявки на идентификацию с значением в поле __identification_status__ равным __3__ (__Проверить документы__)"
      operationId: get-player-identification-filter
      produces:
        - application/json
      parameters:
        - in: body
          name: playerIdentificationFilterParams
          description: "Входные параметры фильтра"
          required: true
          schema:
            $ref: '#/definitions/playerIdentificationFilterParams'
      responses:
        '200':
          description: "Успешно"
          schema:
            $ref: '#/definitions/playerIdentificationFilter'
        '401':
          description: "Пользователь не авторизован"
        '403':
          description: "У пользователя нет прав доступа"
      security:
        - userAuthentication: []
        - adminRole: []
  /admin-players-identification/get-player-identification-table:
    post:
      tags:
        - admin-players-identification
      summary: "Получить данные в таблицу по идентификации игроков"
      description: "Необходимо возвращать заявки на идентификацию с значением в поле __status__ равным __1__ (__Документы загружены__)"
      operationId: get-player-identification-table
      produces:
        - application/json
      parameters:
        - in: body
          name: playerIdentificationTableParams
          description: "Входные параметры таблицы"
          required: true
          schema:
            $ref: '#/definitions/playerIdentificationTableParams'
      responses:
        '200':
          description: "Успешно"
          schema:
            $ref: '#/definitions/playerIdentificationTable'
        '401':
          description: "Пользователь не авторизован"
        '403':
          description: "У пользователя нет прав доступа"
      security:
        - userAuthentication: []
        - adminRole: []
  /admin-players-identification/get-player-identification-documents{playerId}:
    get:
      tags:
        - admin-players-identification
      summary: "Получить список документов для идентификации игрока"
      operationId: get-player-identification-documents
      produces:
        - application/json
      parameters:
        - name: playerId
          in: path
          description: "Id игрока, список документов которого необходимо получить"
          required: true
          type: integer
      responses:
        '200':
          description: "Успешно"
          schema:
            $ref: '#/definitions/identificationDocuments'
        '401':
          description: "Пользователь не авторизован"
        '403':
          description: "У пользователя нет прав доступа"
      security:
        - userAuthentication: []
        - adminRole: []
  /admin-players-identification/approve-player-identification-request:
    post:
      tags:
        - admin-players-identification
      summary: "Одобрить идентификацию игрока"
      description: "
        1. Для заявок на идентификацию со статусом __0__ (__Открыт__)\n
        2. Доступно только если все документы в заявке одобрены\n
        3. В таблице __users__ параметру __identification_status__ присвоить значение __4__ (__Идентифицирован__)\n
        4. Поменять значение поля __status__ в таблице __identification_requests__ на __1__ (__Одобрен__)\n"
      operationId: approve-player-identification-request
      produces:
        - application/json
      parameters:
        - in: body
          name: rejectIdentificationRequestParams
          description: "Входные параметры одобрения заявки на идентификацию"
          required: true
          schema:
            $ref: '#/definitions/rejectIdentificationRequestParams'
      responses:
        '200':
          description: "Успешно"
        '400':
          description: "Ошибка в запросе (некорректный статус заявки на идентификацию или некорректный статус статус документа)"
        '401':
          description: "Пользователь не авторизован"
        '403':
          description: "У пользователя нет прав доступа"
      security:
        - userAuthentication: []
        - adminRole: []
  /admin-players-identification/reject-player-identification-request:
    post:
      tags:
        - admin-players-identification
      summary: "Отклонить идентификацию игрока"
      description: "
        1. Для заявок на идентификацию со статусом __0__ (__Открыт__)\n
        2. Доступно только если хотя бы один документ в заявке отклонен/запрошен\n
        3. В таблице __users__ параметру __identification_status__ присвоить значение __2__ (__Документы запрошены__)\n"
      operationId: reject-player-identification-request
      produces:
        - application/json
      parameters:
        - in: body
          name: rejectIdentificationRequestParams
          description: "Входные параметры отклонения заявки на идентификацию"
          required: true
          schema:
            $ref: '#/definitions/rejectIdentificationRequestParams'
      responses:
        '200':
          description: "Успешно"
        '400':
          description: "Ошибка в запросе (некорректный статус заявки на идентификацию или некорректный статус статус документа)"
        '401':
          description: "Пользователь не авторизован"
        '403':
          description: "У пользователя нет прав доступа"
      security:
        - userAuthentication: []
        - adminRole: []  
  /admin-players-identification/download-player-identification-document{identificationDocumentId}:
    get:
      tags:
        - admin-players-identification
      summary: "Скачать конкретный документ игрока"
      operationId: download-player-identification-document
      produces:
        - application/json
      parameters:
        - name: identificationDocumentId
          in: path
          description: "ID документа игрока, который необходимо скачать"
          required: true
          type: integer
      responses:
        '200':
          description: "Успешно (возвращает сам документ - не адрес, а содержимое файла)"
        '401':
          description: "Пользователь не авторизован"
        '403':
          description: "У пользователя нет прав доступа"
        '404':
          description: "Документ не найден"
      security:
        - userAuthentication: []
        - adminRole: []
  /admin-players-identification/download-player-identification-documents{playerId}:
    get:
      tags:
        - admin-players-identification
      summary: "Скачать все документы игрока"
      description: "В данном случае не имеет значения какой статус у документа в базе данных. Необходимо возвращать документы по всем соответствующим записям"
      operationId: download-player-identification-documents
      produces:
        - application/json
      parameters:
        - name: playerId
          in: path
          description: "Id игрока, документы которого необходимо скачать"
          required: true
          type: integer
      responses:
        '200':
          description: "Успешно (возвращает сам(и) документ(ы) - не адрес, а содержимое файла(ов))"
        '401':
          description: "Пользователь не авторизован"
        '403':
          description: "У пользователя нет прав доступа"
        '404':
          description: "Документ(ы) не найден(ы)"
      security:
        - userAuthentication: []
        - adminRole: []
  /admin-players-identification/request-player-identification-document:
    post:
      tags:
        - admin-players-identification
      summary: "Запросить документ у игрока"
      description: "
        1. В таблице __users__ параметру __identification_status__ присвоить значение __2__ (__Документы запрошены__)\n
        2. В таблице __identification_requests__ по __user_id__ проверяется наличие записи со статусом __status=0__ (__Открыт__). Если записи нет, то ее необходимо создать\n
        3. В таблице __user_documents__ по __user_id__ и __type__ проверятеся наличие старой записи:\n
          а) Если запись с такими параметрами найдена, то ее статус изменить на __4__ (__Архив__)\n
          б) Создать новую запись с параметрами __user_id__, __type__ и __status=1__ (__Ожидает загрузки__)\n
          в) Связать записи в таблицах __user_documents__ и __identification_requests__ через __identification_request_id__\n"
      operationId: request-player-identification-document
      produces:
        - application/json
      parameters:
        - in: body
          name: requestPlayerIdentificationDocumentParams
          description: "Входные параметры запроса документов у игрока"
          required: true
          schema:
            $ref: '#/definitions/requestPlayerIdentificationDocumentParams'
      responses:
        '200':
          description: "Успешно"
        '401':
          description: "Пользователь не авторизован"
        '403':
          description: "У пользователя нет прав доступа"
      security:
        - userAuthentication: []
        - adminRole: []
      deprecated: true
  /admin-players-identification/approve-player-identification-document/{identificationDocumentId}:
    get:
      tags:
        - admin-players-identification
      summary: "Одобрить документ игрока"
      description: "Для документов со статусом __1__ (__Загружен__). Необходимо поменять значение поля __status__ в таблице __user_documents__ на __2__ (__Одобрен__)"
      operationId: approve-player-identification-document
      produces:
        - application/json
      parameters:
        - name: identificationDocumentId
          in: path
          description: "ID документа игрока, который необходимо одобрить"
          required: true
          type: integer
      responses:
        '200':
          description: "Успешно"
        '400':
          description: "Ошибка в запросе (некорректный статус документа)"
        '401':
          description: "Пользователь не авторизован"
        '403':
          description: "У пользователя нет прав доступа"
      security:
        - userAuthentication: []
        - adminRole: []
      deprecated: true
  /admin-players-identification/reject-player-identification-document/{identificationDocumentId}:
    get:
      tags:
        - admin-players-identification
      summary: "Отклонить документ игрока"
      description: "
        1. Для документов со статусом __1__ (__Загружен__). Необходимо поменять значение поля __status__ в таблице __user_documents__ на __3__ (__Отклонен__)\n
        2. Отклонение документа автоматически приводит к запросу нового документа такого же типа (в рамках текущей заявки на идентификацию)\n"
      operationId: reject-player-identification-document
      produces:
        - application/json
      parameters:
        - name: identificationDocumentId
          in: path
          description: "ID документа игрока, который необходимо отклонить"
          required: true
          type: integer
      responses:
        '200':
          description: "Успешно"
        '400':
          description: "Ошибка в запросе (некорректный статус документа)"
        '401':
          description: "Пользователь не авторизован"
        '403':
          description: "У пользователя нет прав доступа"
      security:
        - userAuthentication: []
        - adminRole: []
      deprecated: true
  /admin-event-analysis/get-event-financial-data/{eventId}:
    get:
      tags:
        - admin-event-analysis
      summary: "Получить финансовые данные по событию"
      description: "Выполняется при загрузке страницы"
      operationId: get-event-financial-data
      produces:
        - application/json
      parameters:
        - name: eventId
          in: path
          description: "ID события, для которого необходимо получить финансовые данные"
          required: true
          type: integer
      responses:
        '200':
          description: "Успешно"
          schema:
            $ref: '#/definitions/eventFinancialData'
        '401':
          description: "Пользователь не авторизован"
        '403':
          description: "У пользователя нет прав доступа"
      security:
        - userAuthentication: []
        - adminRole: []
  /admin-event-analysis/get-event-betting-stream-filter:
    post:
      tags:
        - admin-event-analysis
      summary: "Получить данные в поля фильтров по потоку ставок на событие"
      operationId: get-event-betting-stream-filter
      description: "В поля фильтров необходимо возвращать только те данные, для которых существует запись в таблице __bets_odds__ при заданном параметре __eventId__"
      produces:
        - application/json
      parameters:
        - in: body
          name: eventBettingStreamFilterParams
          description: "Входные параметры фильтра"
          required: true
          schema:
            $ref: '#/definitions/eventBettingStreamFilterParams'
      responses:
        '200':
          description: "Успешно"
          schema:
            $ref: '#/definitions/eventBettingStreamFilter'
        '401':
          description: "Пользователь не авторизован"
        '403':
          description: "У пользователя нет прав доступа"
      security:
        - userAuthentication: []
        - adminRole: []
  /admin-event-analysis/get-event-betting-stream-table:
    post:
      tags:
        - admin-event-analysis
      summary: "Получить данные по потоку ставок на событие"
      operationId: get-event-betting-stream-table
      produces:
        - application/json
      parameters:
        - in: body
          name: eventBettingStreamTableParams
          description: "Входные параметры таблицы"
          required: true
          schema:
            $ref: '#/definitions/eventBettingStreamTableParams'
      responses:
        '200':
          description: "Успешно"
          schema:
            $ref: '#/definitions/eventBettingStreamTable'
        '401':
          description: "Пользователь не авторизован"
        '403':
          description: "У пользователя нет прав доступа"
      security:
        - userAuthentication: []
        - adminRole: []
  /admin-event-analysis/get-event-not-calculated-bets-table:
    post:
      tags:
        - admin-event-analysis
      summary: "Получить данные по нерассчитанным ставкам на событие"
      operationId: get-event-not-calculated-bets-table
      description: "Возвращать ставки со значением в поле __status__ таблицы __bets_odds__ равным __0__ (Для записей в таблице __odd__ со значением в поле __is_returned__ равным __false__)"
      produces:
        - application/json
      parameters:
        - in: body
          name: eventNotCalculatedBetsTableParams
          description: "Входные параметры таблицы"
          required: true
          schema:
            $ref: '#/definitions/eventNotCalculatedBetsTableParams'
      responses:
        '200':
          description: "Успешно"
          schema:
            $ref: '#/definitions/eventNotCalculatedBetsTable'
        '401':
          description: "Пользователь не авторизован"
        '403':
          description: "У пользователя нет прав доступа"
      security:
        - userAuthentication: []
        - adminRole: []
      deprecated: true
  /admin-event-analysis/calculate-event-odd/{oddId}/{isWin}:
    get:
      tags:
        - admin-event-analysis
      summary: "Вручную рассчитать коэффициент на исход события"
      operationId: calculate-event-odd
      description: "В поле __is_win__ таблицы __odds__ задать значение входного параметра __isWin__ (__true__, __false__ или __null__)"
      produces:
        - application/json
      parameters:
        - name: oddId
          in: path
          description: "ID коэффициента, который рассчитывается вручную"
          required: true
          type: integer
        - name: isWin
          in: path
          description: "Результат коэффициента, который рассчитывается вручную"
          required: true
          type: boolean
      responses:
        '200':
          description: "Успешно"
        '401':
          description: "Пользователь не авторизован"
        '403':
          description: "У пользователя нет прав доступа"
      security:
        - userAuthentication: []
        - adminRole: []
  /admin-event-analysis/return-event-odd/{oddId}/{isReturned}:
    get:
      tags:
        - admin-event-analysis
      summary: "Возвратить коэффициент на исход события"
      operationId: return-event-odd
      description: "В поле __is_returned__ таблицы __odds__ задать значение входного параметра __isReturned__ (__true__ или __false__)"
      produces:
        - application/json
      parameters:
        - name: oddId
          in: path
          description: "ID коэффициента, который необходимо возвратить"
          required: true
          type: integer
        - name: isReturned
          in: path
          description: "Статус возвращаемого коэффициента"
          required: true
          type: boolean
      responses:
        '200':
          description: "Успешно"
        '401':
          description: "Пользователь не авторизован"
        '403':
          description: "У пользователя нет прав доступа"
      security:
        - userAuthentication: []
        - adminRole: []
      deprecated: true
  /admin-event-analysis/get-event-financial-risks/{eventId}:
    get:
      tags:
        - admin-event-analysis
      summary: "Получить данные по финансовым рискам на событие"
      description: "
        __I. Получение списка ставок на матч:__\n
          1. По __event_id__ получить все записи в таблице __bets__:\n
            а) По __event_id__ получить все записи в таблице __odds__ (получить __odd_id__, __outcome_id__)\n
            б) По __outcome_id__ выполнить джойн с таблицей __outcomes__ (получить __market_id__)\n
            в) По __odd_id__ выполнить джойн с таблицей __bets_odds__ (получить __bet_id__)\n
            г) По __bet_id__ выполнить джойн с таблицей __bets__ (получить __express_odd_value__, __amount__, __currency_id__)\n
            д) По __currency_id__ выполнить джойн с таблицей __currencies__ (получить __currency_course__)\n
          2. Для каждой полученной записи перевести сумму ставки в рубли:\n
            а) Умножить значение __amount__ на значение __course__\n
            б) Записать полученное значение в дополнительное поле __amount_rub__\n
        
        __II. Получение списка независимых рисков на исходы маркетов:__\n
          1. Сформировать таблицу по текущим ставкам на матч (по данным из __Пункта I__). Необходимые поля в таблице (в select):\n
            а) __outcome_id__\n
            б) __market_id__\n
            в) __express_odd_value__\n
            г) __amount_rub__\n
          2. Для каждой записи в таблице, полученной в __Пункте II.1__, рассчитать значение независимого риска (__risk__):\n
            а) Из значения __express_odd_value__ вычесть __1__\n
            б) Полученный результат умножить на значение __amount_rub__\n
            в) Полученный результат умножить на __-1__ (сделать отрицательным)\n
          3. Сгруппировать записи в таблице по полю __outcome_id__. Необходимые поля в таблице (в select):\n
            а) __outcome_id__\n
            б) __market_id__\n
            в) __risk__ (см. __Пункт II.2__) - применить агрегационную функцию __СУММ__ по полю __risk__\n
            г) __amount_rub__ - применить агрегационную функцию __СУММ__ по полю __amount_rub__\n
        
        __III. Получение списка независимых рисков на исходы маркетов (с учетом исходов без ставок):__\n
          1. По __market_id__ из таблицы по текущим ставкам на матч (см. __Пункт II.3__) сделать запрос в таблицу __outcomes__\n
          2. Получить соответствующие значения __outcome_id__\n
          3. Объединить полученные данные с таблицей по текущим ставкам на матч (см. __Пункт II.3__). Необходимые поля в итоговой таблице (в select):\n
            а) __outcome_id__ (с учетом новых __outcome_id__)\n
            б) __market_id__\n
            в) __risk__ (значение в поле равно __0__ если нет соответствующей записи в таблице по текущим ставкам)\n
            г) __amount_rub__ (значение в поле равно __0__ если нет соответствующей записи в таблице по текущим ставкам)\n
        
        __IV. Получение списка зависимых рисков на исходы маркетов:__\n
          1. Выполнить джойн таблицы, полученной в __Пункте III.3__, с таблицей __outcomes_connections_risk__ и таблицей __outcomes_connections_amount__. Необходимые поля в таблице (в select):\n
            а) __outcome_id__ - значение __outcome_id__ в таблице, полученной в __Пункте III.3__\n
            б) __market_id__ - значение __market_id__ в таблице, полученной в __Пункте III.3__\n
            в) __outcome_id2(risk)__ - значение __outcome_id_2__ (из таблицы __outcomes_connections_risk__)\n
            г) __risk__ - значение __risk__ для __outcome_id_2__ (из таблицы __outcomes_connections_risk__) в таблице, полученной в __Пункте III.3__\n
            д) __outcome_id2(amount)__ - значение __outcome_id_2__ (из таблицы __outcomes_connections_amount__)\n
            е) __amount_rub__ - значение __amount__ для __outcome_id_2__ (из таблицы __outcomes_connections_amount__) в таблице, полученной в __Пункте III.3__\n
          2. Удалить из полученной таблицы все записи, у которых значение в полях __outcome_id2(risk)__, __risk__, __outcome_id2(amount)__, __amount_rub__ равно __Null__\n
          3. Сгруппировать записи в таблице по полю __outcome_id__ и __outcome_id2(amount)__. Необходимые поля в таблице (в select):\n
            а) __outcome_id__\n
            б) __market_id__\n
            в) __risk__ - применить агрегационную функцию __СУММ__ по полю __risk__\n
            г) __outcome_id2(amount)__\n
            д) __amount_rub__ - применить агрегационную функцию __МАКС__ по полю __amount_rub__\n
          4. Сгруппировать записи в таблице по полю __outcome_id__. Необходимые поля в таблице (в select):\n
            а) __outcome_id__\n
            б) __risk__ - применить агрегационную функцию __МАКС__ по полю __risk__\n
            в) __amount_rub__ - применить агрегационную функцию __СУММ__ по полю __amount_rub__\n
          5. Для каждой записи в полученной таблице сложить значение __risk__ и __amount_rub__. Полученный результат будет являться значением __riskValue__ (см. Responses)\n
        
        __V. Формирование выходного параметра эндпоинта:__\n
          1. Получить данные по маркетам на матч:\n
            а) По __market_id__ выполнить джойн таблицы, полученной в пунтке IV.5, с таблицей __markets__\n
            б) Получить значения в полях __market_name__, __market_table_type__, __market_sort__\n
          2. Получить данные по исходам на матч:\n
            а) По __outcome_id__ выполнить джойн таблицы, полученной в пунтке V.1, с таблицей __outcomes__\n  
            б) Получить значения в полях __outcome_team__, __outcome_dst__, __outcome_sub_name__\n
          3. Сформировать объект в соответствии с моделью выходного параметра эндпоинта (см. Responses) и соответствующим алгоритмом\n"
      operationId: get-event-financial-risks
      produces:
        - application/json
      parameters:
        - name: eventId
          in: path
          description: "ID события, для которого необходимо получить финансовые риски"
          required: true
          type: integer
      responses:
        '200':
          description: "Успешно"
          schema:
            $ref: '#/definitions/eventFinancialRisks'
        '401':
          description: "Пользователь не авторизован"
        '403':
          description: "У пользователя нет прав доступа"
      security:
        - userAuthentication: []
        - adminRole: []
  /admin-event-analysis/get-event-cut/{eventId}:
    get:
      tags:
        - admin-event-analysis
      summary: "Получить порезки события"
      description: "Возвращать только те записи таблицы __limitations__, у которых значение в поле __player_id__ равно __null__"
      operationId: get-event-cut
      produces:
        - application/json
      parameters:
        - name: eventId
          in: path
          description: "ID события, для которого необходимо получить порезки"
          required: true
          type: integer
      responses:
        '200':
          description: "Успешно"
          schema:
            $ref: '#/definitions/eventCuts'
        '401':
          description: "Пользователь не авторизован"
        '403':
          description: "У пользователя нет прав доступа"
      security:
        - userAuthentication: []
        - adminRole: []
  /admin-event-analysis/save-event-cut:
    post:
      tags:
        - admin-event-analysis
      summary: "Сохранить порезки события"
      operationId: save-event-cut
      produces:
        - application/json
      parameters:
        - in: body
          name: updateEventCuts
          description: "Порезки события, которые необходимо сохранить"
          required: true
          schema:
            $ref: '#/definitions/updateEventCuts'
      responses:
        '200':
          description: "Успешно"
        '400':
          description: "Ошибка в запросе (некорректное значение в полях __Максимальная ставка__ или __Задержка__)"
        '401':
          description: "Пользователь не авторизован"
        '403':
          description: "У пользователя нет прав доступа"
      security:
        - userAuthentication: []
        - adminRole: []
  /admin-event-analysis/start-accepting-bets/{eventId}:
    get:
      tags:
        - admin-event-analysis
      summary: "Старт приема ставок по событию"
      description: "Поменять значение поля __is_stopped__ таблицы __events__ на __false__"
      operationId: start-accepting-bets
      produces:
        - application/json
      parameters:
        - name: eventId
          in: path
          description: "ID события, у которого необходимо разрешить прием ставок"
          required: true
          type: integer
      responses:
        '200':
          description: "Успешно"
        '401':
          description: "Пользователь не авторизован"
        '403':
          description: "У пользователя нет прав доступа"
      security:
        - userAuthentication: []
        - adminRole: []
  /admin-event-analysis/stop-accepting-bets/{eventId}:
    get:
      tags:
        - admin-event-analysis
      summary: "Стоп приема ставок по событию"
      description: "Поменять значение поля __is_stopped__ таблицы __events__ на __true__"
      operationId: stop-accepting-bets
      produces:
        - application/json
      parameters:
        - name: eventId
          in: path
          description: "ID события, у которого необходимо запретить прием ставок"
          required: true
          type: integer
      responses:
        '200':
          description: "Успешно"
        '401':
          description: "Пользователь не авторизован"
        '403':
          description: "У пользователя нет прав доступа"
      security:
        - userAuthentication: []
        - adminRole: []
  /admin-event-analysis/unblock-payout/{eventId}:
    get:
      tags:
        - admin-event-analysis
      summary: "Разблокирование выплат по событию"
      description: "Поменять значение поля __is_blocked__ таблицы __events__ на __false__"
      operationId: unblock-payout
      produces:
        - application/json
      parameters:
        - name: eventId
          in: path
          description: "ID события, у которого необходимо разрешить выплаты"
          required: true
          type: integer
      responses:
        '200':
          description: "Успешно"
        '401':
          description: "Пользователь не авторизован"
        '403':
          description: "У пользователя нет прав доступа"
      security:
        - userAuthentication: []
        - adminRole: []
  /admin-event-analysis/block-payout/{eventId}:
    get:
      tags:
        - admin-event-analysis
      summary: "Блокирование выплат по событию"
      description: "Поменять значение поля __is_blocked__ таблицы __events__ на __true__"
      operationId: block-payout
      produces:
        - application/json
      parameters:
        - name: eventId
          in: path
          description: "ID события, у которого необходимо запретить выплаты"
          required: true
          type: integer
      responses:
        '200':
          description: "Успешно"
        '401':
          description: "Пользователь не авторизован"
        '403':
          description: "У пользователя нет прав доступа"
      security:
        - userAuthentication: []
        - adminRole: []
  /admin-player-analysis/get-player-info/{playerId}:
    get:
      tags:
        - admin-player-analysis
      summary: "Получить данные игрока (основная таблица, рентабельность и профит по видам спорта)"
      operationId: get-player-info
      produces:
        - application/json
      parameters:
        - name: playerId
          in: path
          description: "ID игрока, по которому необходимо получить данные"
          required: true
          type: integer
      responses:
        '200':
          description: "Успешно"
          schema:
            $ref: '#/definitions/playerInfo'
        '401':
          description: "Пользователь не авторизован"
        '403':
          description: "У пользователя нет прав доступа"
      security:
        - userAuthentication: []
        - adminRole: []
  /admin-player-analysis/get-player-form/{playerId}:
    get:
      tags:
        - admin-player-analysis
      summary: "Получить анкету игрока"
      operationId: get-player-form
      produces:
        - application/json
      parameters:
        - name: playerId
          in: path
          description: "ID игрока, анкету которого необходимо получить"
          required: true
          type: integer
      responses:
        '200':
          description: "Успешно"
          schema:
            $ref: '#/definitions/playerForm'
        '401':
          description: "Пользователь не авторизован"
        '403':
          description: "У пользователя нет прав доступа"
      security:
        - userAuthentication: []
        - adminRole: []
  /admin-player-analysis/get-player-profit-in-time:
    post:
      tags:
        - admin-player-analysis
      summary: "Получить данные в график по профиту игрока (по периодам)"
      operationId: get-player-profit-in-time
      produces:
        - application/json
      parameters:
        - in: body
          name: playerProfitInTimeParams
          description: "Входные параметры графика"
          required: true
          schema:
            $ref: '#/definitions/playerProfitInTimeParams'
      responses:
        '200':
          description: "Успешно"
          schema:
            $ref: '#/definitions/playerProfitInTime'
        '401':
          description: "Пользователь не авторизован"
        '403':
          description: "У пользователя нет прав доступа"
      security:
        - userAuthentication: []
        - adminRole: []
  /admin-player-analysis/get-player-comments/{playerId}:
    get:
      tags:
        - admin-player-analysis
      summary: "Получить данные по комментариям на игрока"
      operationId: get-player-comments
      produces:
        - application/json
      parameters:
        - name: playerId
          in: path
          description: "ID игрока, комментарии по которому необходимо получить"
          required: true
          type: integer
      responses:
        '200':
          description: "Успешно"
          schema:
            $ref: '#/definitions/playerComments'
        '401':
          description: "Пользователь не авторизован"
        '403':
          description: "У пользователя нет прав доступа"
      security:
        - userAuthentication: []
        - adminRole: []
  /admin-player-analysis/save-player-comment:
    post:
      tags:
        - admin-player-analysis
      summary: "Сохранить данные по комментарию на игрока"
      operationId: save-player-comment
      produces:
        - application/json
      parameters:
        - in: body
          name: savePlayerComment
          description: "Комментарий на игрока, который необходимо сохранить"
          required: true
          schema:
            $ref: '#/definitions/savePlayerComment'
      responses:
        '200':
          description: "Успешно"
        '401':
          description: "Пользователь не авторизован"
        '403':
          description: "У пользователя нет прав доступа"
      security:
        - userAuthentication: []
        - adminRole: []
  /admin-player-analysis/get-player-deposits-payments/{playerId}:
    get:
      tags:
        - admin-player-analysis
      summary: "Получить данные по пополнениям и выплатам игрока"
      operationId: get-player-deposits-payments
      produces:
        - application/json
      parameters:
        - name: playerId
          in: path
          description: "ID игрока, историю пополнений и выплат которого необходимо получить"
          required: true
          type: integer
      responses:
        '200':
          description: "Успешно"
          schema:
            $ref: '#/definitions/playerDepositsPayments'
        '401':
          description: "Пользователь не авторизован"
        '403':
          description: "У пользователя нет прав доступа"
      security:
        - userAuthentication: []
        - adminRole: []
  /admin-player-bet-history/get-player-bet-history:
    post:
      tags:
        - admin-player-bet-history
      summary: "Получить данные по ставкам игрока"
      operationId: get-player-bet-history
      produces:
        - application/json
      parameters:
        - in: body
          name: playerBetHistoryTableParams
          description: "Входные параметры таблицы"
          required: true
          schema:
            $ref: '#/definitions/playerBetHistoryTableParams'
      responses:
        '200':
          description: "Успешно"
          schema:
            $ref: '#/definitions/playerBetHistoryTable'
        '401':
          description: "Пользователь не авторизован"
        '403':
          description: "У пользователя нет прав доступа"
      security:
        - userAuthentication: []
        - adminRole: []
  /admin-player-bet-history/get-player-bet/{betId}:
    get:
      tags:
        - admin-player-bet-history
      summary: "Получить данные при редактировании ставки игрока"
      operationId: get-player-bet
      produces:
        - application/json
      parameters:
        - name: betId
          in: path
          description: "ID ставки, данные которой необходимо получить"
          required: true
          type: integer
      responses:
        '200':
          description: "Успешно"
          schema:
            $ref: '#/definitions/playerBetForEdit'
        '401':
          description: "Пользователь не авторизован"
        '403':
          description: "У пользователя нет прав доступа"
      security:
        - userAuthentication: []
        - adminRole: []
  /admin-player-bet-history/save-player-bet:
    post:
      tags:
        - admin-player-bet-history
      summary: "Сохранить данные при редактировании ставки игрока"
      description: "
        __I. Отредактировать сумму ставки:__\n
          1. По __betId__ из входного параметра получить соответствующую запись в таблице __bets__\n
          2. Получить значение __amount__ из входного параметра\n
          3. Если оно корректно, то в таблице __bets__ значению __amount__ присвоить значение входного параметра __amount__\n
        
        __II. Отредактировать статус частей ставки в таблице bets_odds:__\n
          1. По __betId__ и __oddId__ из входного параметра получить значение __status__ у соответствующих записей в таблице __bets_odds__\n
          2. Получить значение __status__ для каждого объекта из массива __parts__ (см. входной параметр)\n
          3. Для каждой записи сравнить значение в таблице и значение входного параметра:\n
            а) Если для конкретной записи значения различны, то в поле __status__ таблицы __bets_odds__ записать соответствующее значение __status__ из входного параметра, а так же заменить значение в поле __is_manual_edit__ на __true__\n
            б) Если для конкретной записи значения идентичны, то перейти к следующему шагу\n
        
        __III. Отредактировать статус ставки в таблице bets (Замену статуса выполнять только при необходимости!):__\n
          1. По __bet_id__ получить соответствующие записи в таблице __bets_odds__\n
          2. Если в таблице __bets_odds__ получена только одна запись с этим __bet_id__, то в таблице __bets__ заменить значение в поле __status__ на значение __status__ из таблицы __bets_odds__\n
          3. Если в таблице __bets_odds__ несколько записей с этим __bet_id__, то:\n
            а) Если хотя бы у одной записи __status = 0__ и у всех остальных записей __status != 2__, то в таблице __bets__ заменить значение в поле __status__ на __0__\n
            б) Если хотя бы у одной записи __status = 1__ и у всех остальных записей __status = 1 or 4__, то в таблице __bets__ заменить значение в поле __status__ на __1__\n
            в) Если хотя бы у одной записи __status = 2__, то в таблице __bets__ заменить значение в поле __status__ на __2__\n
            г) Если у всех записей __status = 4__, то в таблице __bets__ заменить значение в поле __status__ на __4__\n
        
        __IV. Отредактировать значение коэффициента частей ставки в таблице bets_odds:__\n
          1. По __betId__ и __oddId__ из входного параметра получить значение __odd_value__ у соответствующих записей в таблице __bets_odds__\n
          2. Получить значение __oddValue__ для каждого объекта из массива __parts__ (см. входной параметр)\n
          3. Для каждой записи сравнить значение в таблице и значение входного параметра:\n
            а) Если для конкретной записи значения различны, то в поле __odd_value__ таблицы __bets_odds__ записать соответствующее значение __oddValue__ из входного параметра\n
            б) Если для конкретной записи значения идентичны, то перейти к следующему шагу\n
        
        __V. Отредактировать значение коэффициента ставки в таблице bets__\n
          1. По __bet_id__ получить соответствующие записи в таблице __bets_odds__ с значением в поле __status != 4__\n
          2. Получить значение __odd_value__ для каждой полученной записи\n
          3. Перемножить значения __odd_value__ и записать полученный результат в поле __express_odd_value__ (таблица __bets__)\n
          4. Примечание: Если в таблице __bets_odds__ у всех записей __status = 4__, то в поле __express_odd_value__ необходимо записать __1__\n
        
        __VI. Сформировать объект c данными по редактированной ставке и отправить его в ответе (см. Responses)__\n"
      operationId: save-player-bet
      produces:
        - application/json
      parameters:
        - in: body
          name: playerBetForSave
          description: "Данные ставки, которые необходимо сохранить"
          required: true
          schema:
            $ref: '#/definitions/playerBetForSave'
      responses:
        '200':
          description: "Успешно"
          schema:
            $ref: '#/definitions/playerBetForEdit'
        '400':
          description: "Ошибка в запросе (некорректное значение в полях __Сумма__, __Коэффициент__ или __Статус ставки__)"
        '401':
          description: "Пользователь не авторизован"
        '403':
          description: "У пользователя нет прав доступа"
      security:
        - userAuthentication: []
        - adminRole: []
  /admin-player-cuts/get-player-cuts/{playerId}:
    get:
      tags:
        - admin-player-cuts
      summary: "Получить данные по порезкам игрока"
      operationId: get-player-cuts
      produces:
        - application/json
      parameters:
        - name: playerId
          in: path
          description: "ID игрока, порезки которого необходимо получить"
          required: true
          type: integer
      responses:
        '200':
          description: "Успешно"
          schema:
            $ref: '#/definitions/playerCuts'
        '401':
          description: "Пользователь не авторизован"
        '403':
          description: "У пользователя нет прав доступа"
      security:
        - userAuthentication: []
        - adminRole: []
  /admin-player-cuts/get-player-cuts-filter:
    post:
      tags:
        - admin-player-cuts
      summary: "Получить данные в поля фильтров при редактировании/добавлении порезки игрока"
      operationId: get-player-cuts-filter
      produces:
        - application/json
      parameters:
        - in: body
          name: playerCutsFilterParams
          description: "Входные параметры фильтра"
          required: true
          schema:
            $ref: '#/definitions/playerCutsFilterParams'
      responses:
        '200':
          description: "Успешно"
          schema:
            $ref: '#/definitions/playerCutsFilter'
        '401':
          description: "Пользователь не авторизован"
        '403':
          description: "У пользователя нет прав доступа"
      security:
        - userAuthentication: []
        - adminRole: []
  /admin-player-cuts/edit-player-cut:
    post:
      tags:
        - admin-player-cuts
      summary: "Редактировать данные по порезке игрока"
      operationId: edit-player-cut
      produces:
        - application/json
      parameters:
        - in: body
          name: editPlayerCut
          description: "Данные порезки, которые необходимо редактировать"
          required: true
          schema:
            $ref: '#/definitions/editPlayerCut'
      responses:
        '200':
          description: "Успешно"
        '400':
          description: "Ошибка в запросе (некорректное значение в полях __Сумма__, __Коэффициент__, __Коэффициент экспресса__ или __Статус ставки__)"
        '401':
          description: "Пользователь не авторизован"
        '403':
          description: "У пользователя нет прав доступа"
      security:
        - userAuthentication: []
        - adminRole: []
  /admin-player-cuts/add-player-cut:
    post:
      tags:
        - admin-player-cuts
      summary: "Добавить порезку игрока"
      operationId: add-player-cut
      produces:
        - application/json
      parameters:
        - in: body
          name: addPlayerCut
          description: "Данные порезки, которые необходимо сохранить"
          required: true
          schema:
            $ref: '#/definitions/addPlayerCut'
      responses:
        '200':
          description: "Успешно"
          schema:
            $ref: '#/definitions/playerCut'
        '400':
          description: "Ошибка в запросе (некорректное значение в полях __Сумма__, __Коэффициент__, __Коэффициент экспресса__ или __Статус ставки__)"
        '401':
          description: "Пользователь не авторизован"
        '403':
          description: "У пользователя нет прав доступа"
      security:
        - userAuthentication: []
        - adminRole: []
  /admin-player-cuts/delete-player-cut/{cutId}:
    get:
      tags:
        - admin-player-cuts
      summary: "Удалить порезку игрока"
      description: "Удалить запись в таблице __limitations__"
      operationId: delete-player-cut
      produces:
        - application/json
      parameters:
        - name: cutId
          in: path
          description: "ID порезки игрока, которую необходимо удалить"
          required: true
          type: integer
      responses:
        '200':
          description: "Успешно"
        '401':
          description: "Пользователь не авторизован"
        '403':
          description: "У пользователя нет прав доступа"
      security:
        - userAuthentication: []
        - adminRole: []
  /admin-search/get-info-by-player/{player}:
    get:
      tags:
        - admin-search
      summary: "Получить данные при поиске по Id игрока"
      description: "Проверять совпадения в таблице __users__ по полям __id__ и __number__"
      operationId: get-info-by-player
      produces:
        - application/json
      parameters:
        - name: player
          in: path
          description: "ID или номер игрока, по которому необходимо получить данные"
          required: true
          type: integer
      responses:
        '200':
          description: "Успешно"
          schema:
            $ref: '#/definitions/infoByPlayer'
        '400':
          description: "Ошибка в запросе (некорректное значение в поле __Введите Ваш запрос__)"
        '401':
          description: "Пользователь не авторизован"
        '403':
          description: "У пользователя нет прав доступа"
      security:
        - userAuthentication: []
        - adminRole: []
  /admin-search/get-info-by-bet/{bet}:
    get:
      tags:
        - admin-search
      summary: "Получить данные при поиске ставки"
      description: "Проверять совпадения в таблице __bets__ по полям __id__ и __number__"
      operationId: get-info-by-bet
      produces:
        - application/json
      parameters:
        - name: bet
          in: path
          description: "ID или номер ставки, по которой необходимо получить данные"
          required: true
          type: string
      responses:
        '200':
          description: "Успешно"
          schema:
            $ref: '#/definitions/infoByBet'
        '400':
          description: "Ошибка в запросе (некорректное значение в поле __Введите Ваш запрос__)"
        '401':
          description: "Пользователь не авторизован"
        '403':
          description: "У пользователя нет прав доступа"
      security:
        - userAuthentication: []
        - adminRole: []
  /admin-search/get-info-by-event/{eventId}:
    get:
      tags:
        - admin-search
      summary: "Получить данные при поиске по Id события"
      operationId: get-info-by-match
      produces:
        - application/json
      parameters:
        - name: eventId
          in: path
          description: "ID события, по которому необходимо получить данные"
          required: true
          type: integer
      responses:
        '200':
          description: "Успешно"
          schema:
            $ref: '#/definitions/infoByEvent'
        '400':
          description: "Ошибка в запросе (некорректное значение в поле __Введите Ваш запрос__)"
        '401':
          description: "Пользователь не авторизован"
        '403':
          description: "У пользователя нет прав доступа"
      security:
        - userAuthentication: []
        - adminRole: []
  /admin-translator/get-languages-for-translations:
    get:
      tags:
        - admin-translator
      summary: "Получить список языков в шапку таблицы"
      operationId: get-languages-for-translations
      produces:
        - application/json
      parameters: []
      responses:
        '200':
          description: "Успешно"
          schema:
            $ref: '#/definitions/languagesList'
        '401':
          description: "Пользователь не авторизован"
        '403':
          description: "У пользователя нет прав доступа"
      security:
        - userAuthentication: []
        - adminRole: []
  /admin-translator/get-sports-translations-list:
    get:
      tags:
        - admin-translator
      summary: "Получить список видов спорта (для перевода)"
      operationId: get-sports-translations-list
      produces:
        - application/json
      parameters: []
      responses:
        '200':
          description: "Успешно"
          schema:
            $ref: '#/definitions/sportsNamesList'
        '401':
          description: "Пользователь не авторизован"
        '403':
          description: "У пользователя нет прав доступа"
      security:
        - userAuthentication: []
        - adminRole: []
  /admin-translator/get-leagues-translations-list:
    get:
      tags:
        - admin-translator
      summary: "Получить список чемпионатов (для перевода)"
      operationId: get-leagues-translations-list
      produces:
        - application/json
      parameters: []
      responses:
        '200':
          description: "Успешно"
          schema:
            $ref: '#/definitions/leaguesNamesList'
        '401':
          description: "Пользователь не авторизован"
        '403':
          description: "У пользователя нет прав доступа"
      security:
        - userAuthentication: []
        - adminRole: []
  /admin-translator/get-teams-translations-list:
    get:
      tags:
        - admin-translator
      summary: "Получить список команд (для перевода)"
      operationId: get-teams-translations-list
      produces:
        - application/json
      parameters: []
      responses:
        '200':
          description: "Успешно"
          schema:
            $ref: '#/definitions/teamsNamesList'
        '401':
          description: "Пользователь не авторизован"
        '403':
          description: "У пользователя нет прав доступа"
      security:
        - userAuthentication: []
        - adminRole: []
  /admin-translator/save-sport-translation:
    post:
      tags:
        - admin-translator
      summary: "Сохранить перевод вида спорта"
      description: "
        1. Необходимо добавить запись в таблицу __sports_translations__\n
        2. Если во входном параметре эндпоинта значение __name__ равно __null__, то необходимо удалить соответствующую запись в таблице __sports_translations__\n"
      operationId: save-sport-translation
      produces:
        - application/json
      parameters:
        - in: body
          name: sportTranslation
          description: "Перевод вида спорта, который необходимо сохранить"
          required: true
          schema:
            $ref: '#/definitions/sportTranslation'
      responses:
        '200':
          description: "Успешно"
        '400':
          description: "Ошибка в запросе (некорректное значение в поле __Название__)"
        '401':
          description: "Пользователь не авторизован"
        '403':
          description: "У пользователя нет прав доступа"
      security:
        - userAuthentication: []
        - adminRole: []
  /admin-translator/save-league-translation:
    post:
      tags:
        - admin-translator
      summary: "Сохранить перевод чемпионата"
      description: "
        1. Необходимо добавить запись в таблицу __leagues_translations__\n
        2. Если во входном параметре эндпоинта значение __name__ равно __null__, то необходимо удалить соответствующую запись в таблице __leagues_translations__\n"
      operationId: save-league-translation
      produces:
        - application/json
      parameters:
        - in: body
          name: leagueTranslation
          description: "Перевод чемпионата, который необходимо сохранить"
          required: true
          schema:
            $ref: '#/definitions/leagueTranslation'
      responses:
        '200':
          description: "Успешно"
        '400':
          description: "Ошибка в запросе (некорректное значение в поле __Название__)"
        '401':
          description: "Пользователь не авторизован"
        '403':
          description: "У пользователя нет прав доступа"
      security:
        - userAuthentication: []
        - adminRole: []
  /admin-translator/save-team-translation:
    post:
      tags:
        - admin-translator
      summary: "Сохранить перевод команды"
      description: "
        1. Необходимо добавить запись в таблицу __teams_translations__\n
        2. Если во входном параметре эндпоинта значение 'name' равно __null__, то необходимо удалить соответствующую запись в таблице __teams_translations__\n"
      operationId: save-team-translation
      produces:
        - application/json
      parameters:
        - in: body
          name: teamTranslation
          description: "Перевод команды, который необходимо сохранить"
          required: true
          schema:
            $ref: '#/definitions/teamTranslation'
      responses:
        '200':
          description: "Успешно"
        '400':
          description: "Ошибка в запросе (некорректное значение в поле __Название__)"
        '401':
          description: "Пользователь не авторизован"
        '403':
          description: "У пользователя нет прав доступа"
      security:
        - userAuthentication: []
        - adminRole: []
  /player-themes/get-player-theme:
    get:
      tags:
        - player-themes
      summary: "Получить тему игрока"
      operationId: get-player-theme
      produces:
        - application/json
      parameters: []
      responses:
        '200':
          description: "Успешно"
          schema:
            $ref: '#/definitions/playerTheme'
        '401':
          description: "Пользователь не авторизован"
      security:
        - userAuthentication: []
        - playerRole: []
  /player-themes/switch-player-theme/{type}:
    get:
      tags:
        - player-themes
      summary: "Переключить тему игрока"
      description: "В таблице __user_theme__ поменять значение поля __type__"
      operationId: switch-player-theme
      produces:
        - application/json
      parameters:
        - name: type
          in: path
          description: "Тип темы игрока, которую необходимо включить. Константы: 0 - __Light__, 1 - __Dark__"
          enum:
            - 0
            - 1
          required: true
          type: integer
      responses:
        '200':
          description: "Успешно"
        '401':
          description: "Пользователь не авторизован"
      security:
        - userAuthentication: []
        - playerRole: []
  /player-themes/get-languages-list:
    get:
      tags:
        - player-themes
      summary: "Получить список языков"
      operationId: get-languages-list
      produces:
        - application/json
      parameters: []
      responses:
        '200':
          description: "Успешно"
          schema:
            $ref: '#/definitions/languagesList'
  /player-themes/set-language/{languageId}:
    get:
      tags:
        - player-themes
      summary: "Установить язык игрока"
      description: "В таблице __user_theme__ поменять значение поля __language_id__"
      operationId: set-language
      produces:
        - application/json
      parameters:
        - name: languageId
          in: path
          description: "ID языка, который нужно установить"
          required: true
          type: integer
      responses:
        '200':
          description: "Успешно"
        '401':
          description: "Пользователь не авторизован"
      security:
        - userAuthentication: []
        - playerRole: []
  /player-themes/collapse-player-sidebar:
    get:
      tags:
        - player-themes
      summary: "Свернуть боковое меню"
      description: "В поле __player_sidebar_status__ таблицы __user_theme__ задать значение __1__"
      operationId: collapse-player-sidebar
      produces:
        - application/json
      parameters: []
      responses:
        '200':
          description: "Успешно"
        '401':
          description: "Пользователь не авторизован"
      security:
        - userAuthentication: []
        - playerRole: []
  /player-themes/expand-player-sidebar:
    get:
      tags:
        - player-themes
      summary: "Развернуть боковое меню"
      description: "В поле __player_sidebar_status__ таблицы __user_theme__ задать значение __0__"
      operationId: expand-player-sidebar
      produces:
        - application/json
      parameters: []
      responses:
        '200':
          description: "Успешно"
        '401':
          description: "Пользователь не авторизован"
      security:
        - userAuthentication: []
        - playerRole: []
  /player-themes/collapse-basket:
    get:
      tags:
        - player-themes
      summary: "Свернуть корзину ставок"
      description: "В поле __basket_status__ таблицы __user_theme__ задать значение __1__"
      operationId: collapse-basket
      produces:
        - application/json
      parameters: []
      responses:
        '200':
          description: "Успешно"
        '401':
          description: "Пользователь не авторизован"
      security:
        - userAuthentication: []
        - playerRole: []
  /player-themes/expand-basket:
    get:
      tags:
        - player-themes
      summary: "Развернуть корзину ставок"
      description: "В поле __basket_status__ таблицы __user_theme__ задать значение __0__"
      operationId: expand-basket
      produces:
        - application/json
      parameters: []
      responses:
        '200':
          description: "Успешно"
        '401':
          description: "Пользователь не авторизован"
      security:
        - userAuthentication: []
        - playerRole: []
  /player-themes/switch-player-odds-format/{oddsFormat}:
    get:
      tags:
        - player-themes
      summary: "Переключить формат коэффициентов игрока"
      description: "В таблице __user_theme__ поменять значение поля __odds_format__"
      operationId: switch-player-odds-format
      produces:
        - application/json
      parameters:
        - name: oddsFormat
          in: path
          description: "Формат коэффициентов, который необходимо установить. Константы: 0 - __Десятичный формат__, 1 - __Дробный формат__, 2 - __Американский формат__, 3 - __Гонконгский формат__"
          enum:
            - 0
            - 1
            - 2
            - 3
          required: true
          type: integer
      responses:
        '200':
          description: "Успешно"
        '401':
          description: "Пользователь не авторизован"
      security:
        - userAuthentication: []
        - playerRole: []
  /player-events/get-events-table:
    post:
      tags:
        - player-events
      summary: "Получить данные по событиям в боковое меню и основную таблицу"
      description: "
        1. Для таблиц: __Live__ и __Line__\n
        2. Возвращать события со значением в поле __active__ таблицы __events__ равным __1__\n
        3. При первичном запросе (без времени запроса) возвращать исходы с коэффициентами со значением в поле __is_stopped__ таблицы __odds__ равным __false__\n
        4. При последующих запросах (с временем запроса) возвращать исходы с коэффициентами со значением в поле __updated_at__ таблицы __odds__ большим чем время предыдущего запроса\n
        5. Если значение входного параметра __isPreview__ равно __true__, то в ответе возращать объект __filter__ и массив __sports__. Если значение входного параметра __isPreview__ равно __false__, то в ответе возращать только объект __filter__ (см. Responses)\n"
      operationId: get-events-table
      produces:
        - application/json
      parameters:
        - in: body
          name: playerEventsTableParams
          description: "Входные параметры таблиц"
          required: true
          schema:
            $ref: '#/definitions/playerEventsTableParams'
      responses:
        '200':
          description: "Успешно"
          schema:
            $ref: '#/definitions/playerEventsTable'
      security:
        - playerLanguage: []
  /player-events/get-favorite-events/{timeStatus}:
    get:
      tags:
        - player-events
      summary: "Получить список избранных событий в боковое меню"
      description: "
        1. Для таблиц: __Live__ и __Line__\n
        2. Возвращать события со значением в поле __active__ таблицы __events__ равным __1__\n"
      operationId: get-favorite-events
      produces:
        - application/json
      parameters:
        - name: timeStatus
          in: path
          description: "Статус событий, данные которых необходимо получить в список избранных. Константы: 1 - __Line__, 2 - __Live__"
          enum:
            - 1
            - 2
          required: true
          type: integer
      responses:
        '200':
          description: "Успешно"
          schema:
            $ref: '#/definitions/playerFavoriteEvents'
        '401':
          description: "Пользователь не авторизован"
      security:
        - userAuthentication: []
        - playerRole: []
  /player-events/add-event-to-favorites/{eventId}:
    get:
      tags:
        - player-events
      summary: "Добавить событие в \"Избранное\""
      description: "Для текущего пользователя (__user_id__ по MiddleWare) необходимо создать запись в таблице __user_favorite_events__"
      operationId: add-event-to-favorites
      produces:
        - application/json
      parameters:
        - name: eventId
          in: path
          description: "ID события, которое необходимо добавить в \"Избранное\""
          required: true
          type: integer
      responses:
        '200':
          description: "Успешно"
        '401':
          description: "Пользователь не авторизован"
      security:
        - userAuthentication: []
        - playerRole: []
  /player-events/remove-event-from-favorites/{eventId}:
    get:
      tags:
        - player-events
      summary: "Убрать событие из \"Избранное\""
      description: "Для текущего пользователя (__user_id__ по MiddleWare) необходимо удалить запись в таблице __user_favorite_events__"
      operationId: remove-event-from-favorites
      produces:
        - application/json
      parameters:
        - name: eventId
          in: path
          description: "ID события, которое необходимо убрать из \"Избранное\""
          required: true
          type: integer
      responses:
        '200':
          description: "Успешно"
        '401':
          description: "Пользователь не авторизован"
      security:
        - userAuthentication: []
        - playerRole: []
  /player-sliders/get-sliders-list:
    get:
      tags:
        - player-sliders
      summary: "Получить список слайдеров"
      description: "Необходимо возвращать слайдеры, баннеры и акции со статусом __status=0__ (__Активен__)"
      operationId: get-sliders-list
      produces:
        - application/json
      parameters: []
      responses:
        '200':
          description: "Успешно"
          schema:
            $ref: '#/definitions/playerSliders'
      security:
        - playerLanguage: []
  /player-stocks/get-stocks-list:
    get:
      tags:
        - player-stocks
      summary: "Получить список акций"
      description: "Необходимо возвращать акции со значением в поле __is_landing=true__ и со статусом __status=0__ (__Активна__)"
      operationId: get-stocks-list
      produces:
        - application/json
      parameters: []
      responses:
        '200':
          description: "Успешно"
          schema:
            $ref: '#/definitions/playerStocks'
      security:
        - playerLanguage: []
  /player-bet-basket/get-basket:
    post:
      tags:
        - player-bet-basket
      summary: "Получить корзину ставок (нерассчитанные и несохраненные ставки)"
      description: "
        __I. Общая информация:__\n
          1. Выполняется при загрузке страницы (первичный запрос)\n
          2. Последующие запросы приводят к обновлению всей информации в корзине (время отправлять не нужно)\n
          3. Для формирования таблицы текущих ставок (__notCalculatedBets__):\n
            а) Запросы делать в таблицы __bets__ и __bets_odds__\n
            б) Возвращать одиночные и экспресс-ставки со значением в поле __status__ таблицы __bets__ равным __0__\n
            в) В рамках одной экспресс-ставки возвращать одиночные ставки со значением в поле __status__ таблицы __bets_odds__ равным __0__ или __1__\n
          4. Для формирования таблицы несохраненных ставок (__notSavedBets__):\n
            а) Запросы делать в таблицы __bet_baskets__ и __bet_baskets_odd__\n
            б) Возвращать несохраненные ставки в соответствии с алгоритмом (см. __Пункт II__)\n

        __II. Алгоритм проверки допустимости нахождения коэффициентов в корзине ставок (для несохраненных ставок):__\n
          1. Использовать __player_id__ текущего пользователя\n
          2. Получить все записи в таблицах __bet_baskets__ и __bet_baskets_odd__, получить соответствующие __odd_id__\n
          3. Для каждого __odd_id__ найти соответствующий ему __event_id__\n
          4. Проверить (применяя фильтрацию по полю __created_at__ таблицы __bet_baskets_odd__ и начиная проверку с самой новой записи):\n
            а) В таблице __events__ значение поля __is_stopped__ для данного __event_id__ должно быть равно __false__\n
            б) В таблице __events__ значение поля __time_status__ для данного __event_id__ должно быть равно __1__ или __2__\n
            в) В таблице __odds__ значение поля __is_win__ для данного __odd_id__ должно быть равно __null__\n
            г) В таблице __odds__ значение поля __is_stopped__ для данного __odd_id__ должно быть равно __false__\n
            д) В таблице __bet_baskets_odd__ не должно уже быть записи с данным __odd_id__\n
            е) В таблице __bet_baskets_odd__ не должно уже быть записи с данным __event_id__\n
            ж)В таблице __limitations__ проверить наличие записи для данного __event_id__ со значением в поле __is_one_bet__ равным __true__. Если такая запись найдена, то в таблице __bets_odds__ проверить отсутствие других коэффициентов (с __status__ равным __0__) для данного __event_id__ и текущего __player_id__\n
          5. После проверки всех условий для каждого __odd_id__:\n
            а) Если для __odd_id__ какое-либо условие не пройдено, то необходимо удалить соответствующую ему запись в таблице __bet_baskets_odd__\n"
      operationId: get-basket
      produces:
        - application/json
      parameters: []
      responses:
        '200':
          description: "Успешно"
          schema:
            $ref: '#/definitions/playerBetBasketNotCalculatedNotSaved'
        '401':
          description: "Пользователь не авторизован"
      security:
        - userAuthentication: []
        - playerRole: []
        - playerLanguage: []
  /player-bet-basket/get-calculated-bets-list:
    get:
      tags:
        - player-bet-basket
      summary: "Получить рассчитанные ставки"
      description: "
        1. Использовать __player_id__ текущего пользователя\n
        2. Запросы делать в таблицы __bets__ и __bets_odds__\n
        3. Возвращать одиночные и экспресс-ставки со значением в поле __status__ таблицы __bets__ равным __1__, __2__ или __4__\n
        4. В рамках одной экспресс-ставки возвращать одиночные ставки со значением в поле __status__ таблицы __bets_odds__ равным __0__, __1__, __2__ или __4__\n"
      operationId: get-calculated-bets-list
      produces:
        - application/json
      parameters: []
      responses:
        '200':
          description: "Успешно"
          schema:
            $ref: '#/definitions/playerBetBasketCalculated'
        '401':
          description: "Пользователь не авторизован"
      security:
        - userAuthentication: []
        - playerRole: []
        - playerLanguage: []
  /player-bet-basket/add-odd-in-basket:
    post:
      tags:
        - player-bet-basket
      summary: "Добавить коэффициент на исход конкретного матча в корзину ставок"
      description: "
        __I. Алгоритм проверки допустимости добавления коэффициента:__\n
          1. Использовать __player_id__ текущего пользователя\n
          2. Для __odd_id__, который добавляется в корзину ставок, найти соответствующий ему __event_id__\n
          3. Для __odd_id__, который добавляется в корзину ставок, проверить выполнение условий:\n
            а) В таблице __events__ значение поля __is_stopped__ для данного __event_id__ должно быть равно __false__\n
            б) В таблице __events__ значение поля __time_status__ для данного __event_id__ должно быть равно __1__ или __2__\n
            в) В таблице __odds__ значение поля __is_win__ для данного __odd_id__ должно быть равно __null__\n
            г) В таблице __odds__ значение поля __is_stopped__ для данного __odd_id__ должно быть равно __false__\n
            д) В таблице __limitations__ проверить наличие записи для данного __event_id__ со значением в поле __is_one_bet__ равным __true__. Если такая запись найдена, то в таблице __bets_odds__ проверить отсутствие других коэффициентов (со __status__ равным __0__) для данного __event_id__ и текущего __player_id__\n
        
        __II. Алгоритм добавления коэффициента в корзину ставок:__\n
           1. Получить все записи в таблицах __bet_baskets__ и __bet_baskets_odd__, получить соответствующие __odd_id__\n
           2. Для каждого __odd_id__ найти соответствующий ему __event_id__\n
           3. Сравнить __event_id__ для __odd_id__, который добавляется в корзину ставок, и __event_id__ для __odd_id__, которые находятся в таблице __bet_baskets_odd__:\n
            а) Если ни один __event_id__ не совпадает, то добавить новую запись в таблицу __bet_baskets_odd__\n
            б) Если __event_id__ совпадают, то заменить старую запись в таблице __bet_baskets_odd__ на новую\n"
      operationId: add-odd-in-basket
      produces:
        - application/json
      parameters:
        - in: body
          name: oddsList
          description: "Список коэффициентов, которые добавляются в корзину ставок"
          required: true
          schema:
            $ref: '#/definitions/oddsList'
      responses:
        '200':
          description: "Успешно"
          schema:
            $ref: '#/definitions/timersAndAmounts'
        '400':
          description: "
            Ошибка в запросе:\n
              1. Прием ставок на данный матч временно приостановлен\n
              2. Матч завершен\n
              3. Результат данного исхода уже определен\n
              4. Прием ставок на данный исход временно приостановлен\n
              5. В данный момент невозможно добавить данный исход в корзину ставок (Прим. на самом деле у игрока уже есть ставка на этот матч, а у данного матча __is_one_bet__ = __true__)\n"
        '401':
          description: "Пользователь не авторизован"
      security:
        - userAuthentication: []
        - playerRole: []
  /player-bet-basket/remove-odd-from-basket/{oddId}:
    get:
      tags:
        - player-bet-basket
      summary: "Убрать коэффициент на исход конкретного матча из корзины ставок"
      description: "
        1. Использовать __player_id__ текущего пользователя\n
        2. Необходимо удалить соответствующую запись из таблицы __bet_baskets_odd__\n"
      operationId: remove-odd-from-basket
      produces:
        - application/json
      parameters:
        - name: oddId
          in: path
          description: "ID коэффициента на исход матча, который необходимо убрать из корзины ставок"
          required: true
          type: integer
      responses:
        '200':
          description: "Успешно"
          schema:
            $ref: '#/definitions/timersAndAmounts'
        '401':
          description: "Пользователь не авторизован"
      security:
        - userAuthentication: []
        - playerRole: []
  /player-bet-basket/clear-basket:
    get:
      tags:
        - player-bet-basket
      summary: "Очистить корзину ставок"
      description: "
        1. Использовать __player_id__ текущего пользователя\n
        2. Необходимо удалить все записи из таблицы __bet_baskets_odd__ для текущего пользователя\n"
      operationId: clear-basket
      produces:
        - application/json
      parameters: []
      responses:
        '200':
          description: "Успешно"
        '401':
          description: "Пользователь не авторизован"
      security:
        - userAuthentication: []
        - playerRole: []
  /player-bet-basket/save-bet/{amount}:
    get:
      tags:
        - player-bet-basket
      summary: "Сохранить данные по ставке"
      description: "
        __I. Основной алгоритм:__\n
          1. Использовать __player_id__ текущего пользователя\n
          2. Получить данные для сохранения ставки:\n
            а) Значения __odd_id__ из таблицы __bet_baskets_odd__ (через __bet_basket_id__ в таблице __bet_baskets__)\n
            б) Значение входного параметра эндпоита (__amount__)\n
          3. Сохранить значения __odd_id__ из таблицы __bet_baskets_odd__ в объекты массива __basket_odds__\n
            а) Структура объектов в массиве:\n
              --- 1. __odd_id__\n
              --- 2. __old_value__ (__default__ = __null__)\n
              --- 3. __new_value__ (__default__ = __null__)\n
              --- 4. __save_value__ (__default__ = __null__)\n
              --- 5. __created_at__\n
          4. Рассчитать значение таймера задержки принятия ставки:\n
            а) Получить системное значение таймера задержки принятия ставки:\n
              --- 1. Для каждого __odd_id__ из массива __basket_odds__ определить соответствующий ему __sport_id__ (через __event_id__ в таблице __odds__)\n
              --- 2. Для каждого полученного __sport_id__ получить значение __timer_value__\n
              --- 3. Выбрать наибольшее значение __timer_value__\n
            б) Получить значение таймера задержки принятия ставки по порезкам:\n
              --- 1. Для каждого __odd_id__ из массива __basket_odds__ определить соответствующие ему __market_id__ и __event_id__ (через таблицу __odds__)\n
              --- 2. По __event_id__ определить соответствующие __league_id__ и __sport_id__ (через таблицу __events__)\n
              --- 3. По __player_id__, __market_id__, __event_id__, __league_id__ и __sport_id__ найти все записи в таблице __limitations__. Учесть, что в полученных записях не обязательно должно быть значение всех вышеуказанных переменных сразу (Прим. значение поля в таблице должно либо совпадать либо быть равным __null__)\n
              --- 4. Для каждой полученной записи получить значение __bets_delay_value__ (если оно имеется)\n
              --- 5. Определить наибольшее значение __bets_delay_value__ из всех полученных\n
            в) Рассчитать итоговое значение таймера задержки принятия ставки:\n
              --- 1. Сравнить системное значение таймера задержки принятия ставки и значение таймера задержки принятия ставки по порезкам (см. предыдущие этапы __Пункта I.4__). Выбрать наибольшее значение\n
          5. Запустить таймер ставки\n
            а) Если значение таймера ставки больше __0__, то перейти к __Пункту I.6__\n
            б) Если значение таймера ставки равно __0__, то перейти к __Пункту I.9__\n
          6. Выполнить первичную проверку допустимости совершения ставки (не дожидаясь завершения таймера):\n
            а) Выполнить алгоритмы проверок (см. __Пункты II - VI__)\n
            б) Если в ходе выполнения алгоритмов проверок не возвращены ошибки, то перейти к __Пункту I.7__\n
          7. Для каждого __odd_id__ из массива __basket_odds__ рассчитать старое значение коэффициента:\n
            а) Определить соответствующие __market_id__ и __event_id__ (через таблицу __odds__)\n
            б) По __event_id__ определить соответствующие __league_id__ и __sport_id__ (через таблицу __events__)\n
            в) По __player_id__, __market_id__, __league_id__ и __sport_id__ найти все записи в таблице __limitations__. Учесть, что в полученных записях не обязательно должно быть значение всех вышеуказанных переменных сразу (Прим. значение поля в таблице должно либо совпадать либо быть равным __null__)\n
            г) Для каждой полученной записи получить значение __odds_value__\n
            д) Определить наибольшее значение __odds_value__ из всех полученных\n
            е) Разделить полученное значение на 100 и вычесть его из 1. Это будет модификатор коэффициента\n
            ж) Получить значение __value__ для __odd_id__ (через таблицу __odds__)\n
            з) Из полученного значения __value__ вычесть 1, затем умножить на модификатор коэффициента и прибавить 1\n
            и) Сохранить полученное старое значение коэффициента в массив __basket_odds__ (в поле __old_value__)\n
          8. Дождаться завершения таймера ставки\n
          9. Выполнить вторичную проверку допустимости совершения ставки:\n
            а) Выполнить алгоритмы проверок (см. __Пункты II - VI__)\n
            б) Если в ходе выполнения алгоритмов проверок не возвращены ошибки, то перейти к __Пункту I.10__\n
          10. Для каждого __odd_id__ из массива __basket_odds__ рассчитать новое значение коэффициента:\n
            а) Определить соответствующие __market_id__ и __event_id__ (через таблицу __odds__)\n
            б) По __event_id__ определить соответствующие __league_id__ и __sport_id__ (через таблицу __events__)\n
            в) По __player_id__, __market_id__, __league_id__ и __sport_id__ найти все записи в таблице __limitations__. Учесть, что в полученных записях не обязательно должно быть значение всех вышеуказанных переменных сразу (Прим. значение поля в таблице должно либо совпадать либо быть равным __null__)\n
            г) Для каждой полученной записи получить значение __odds_value__\n
            д) Определить наибольшее значение __odds_value__ из всех полученных\n
            е) Разделить полученное значение на 100 и вычесть его из 1. Это будет модификатор коэффициента\n
            ж) Получить значение __value__ для __odd_id__ (через таблицу __odds__)\n
            з) Из полученного значения __value__ вычесть 1, затем умножить на модификатор коэффициента и прибавить 1\n
            и) Сохранить полученное новое значение коэффициента в массив __basket_odds__ (в поле __new_value__)\n
          11. Проверить настройки корзины ставок:\n
            а) Для текущего __player_id__ получить запись в таблице __user_themes__, получить соответствующее значение __reception_when_odds_change__\n
            б) Получить в массиве __basket_odds__ старое (__old_value__) и новое (__new_value__) значение коэффициента (см. __Пункты I.7 и I.10__)\n
            в) Если __old_value__ = __null__, то:\n
              --- 1. Проверка настройки корзины ставок не требуется - перейти к __Пункту VII__\n
            г) Если __old_value__ != __null__, то:\n
              --- 1. Если значение __old_value__ больше значения __new_value__ и __reception_when_odds_change__ != __1__, то возвращать ошибку (__ошибка#1__)\n
              --- 2. Во всех остальных случаях перейти к __Пункту VII__\n

        __II. Алгоритм проверки наличия необходимых средств на балансе игрока:__\n
          1. Использовать __player_id__ текущего пользователя\n
          2. Получить запись в таблице __balances__, получить соответствующее значение __value__\n
          3. Значение входного параметра эндпоита (__amount__) должно быть меньше значения суммы на балансе игрока (см. __Пункт II.2__), если условие не выполняется - возвращать ошибку (__ошибка#2__)\n
        
        __III. Алгоритм проверки допустимости суммы ставки (по минимуму и максимуму):__\n
          1. Использовать __player_id__ текущего пользователя\n
          2. Получить запись в таблице __balances__, получить соответствующее значение __currency_id__\n
          3. Для данного __currency_id__ получить запись в таблице __currencies__, получить соответствующее значение __course__\n
          4. Умножить значение __course__ на значение входного параметра эндпоита (__amount__). Это будет сумма ставки игрока в рублях\n
          5. Получить записи в таблице __settings__ со значениями в поле __code__ равными __min_value_bet__ и __max_value_bet__, получить соответствующие значения __value__\n
          6. Сумма ставки игрока в рублях (см. __Пункт III.4__) должна быть больше значения минимальной суммы ставки и меньше значения максимальной суммы ставки (см. __Пункт III.5__), если условие не выполняется - возвращать ошибку (__ошибка#3__)\n
        
        __IV. Алгоритм проверки допустимости нахождения коэффициентов в корзине ставок:__\n
          1. Использовать __player_id__ текущего пользователя\n
          2. Для каждого __odd_id__ из массива __basket_odds__ найти соответствующий ему __event_id__ (через таблицу __odds__)\n
          3. Проверить (применяя фильтрацию по полю __created_at__ массива __basket_odds__ и начиная проверку с самой новой записи):\n
            а) В таблице __events__ значение поля __is_stopped__ для данного __event_id__ должно быть равно __false__ (__ошибка#4__)\n
            б) В таблице __events__ значение поля __time_status__ для данного __event_id__ должно быть равно __1__ или __2__ (__ошибка#5__)\n
            в) В таблице __odds__ значение поля __is_win__ для данного __odd_id__ должно быть равно __null__ (__ошибка#6__)\n
            г) В таблице __odds__ значение поля __is_stopped__ для данного __odd_id__ должно быть равно __false__ (__ошибка#7__)\n
            д) В таблице __bet_baskets_odd__ не должно быть больше одной записи с данным __odd_id__ (__ошибка#8__)\n
            е) В таблице __bet_baskets_odd__ не должно быть больше одной записи с данным __event_id__ (__ошибка#9__)\n
            ж) В таблице __limitations__ проверить наличие записи для данного __event_id__ со значением в поле __is_one_bet__ равным __true__. Если такая запись найдена, то в таблице __bets_odds__ проверить отсутствие других коэффициентов (с значением __status__ равным __0__) для данного __event_id__ и текущего __player_id__ (__ошибка#10__)\n
          4. После проверки всех условий для всех __odd_id__:\n
            а) Если для __odd_id__ какое-либо условие не пройдено, то необходимо удалить соответствующую ему запись в таблице __bet_baskets_odd__ и вернуть соответствующую ошибку\n
            б) Если для всех __odd_id__ все условия пройдены, то перейти к следующему алгоритму (см. __Пункт V__)\n
        
        __V. Алгоритм проверки допустимости суммы ставки (по группе риска):__\n
          1. Использовать __player_id__ текущего пользователя\n
          2. Получить запись в таблице __balances__, получить соответствующее значение __currency_id__\n
          3. Для данного __currency_id__ получить запись в таблице __currencies__, получить соответствующее значение __course__\n
          4. Умножить значение __course__ на значение входного параметра эндпоита (__amount__). Это будет сумма ставки игрока в рублях\n
          5. Рассчитать максимальное значение суммы ставки (по группе риска):\n
            а) Для каждого __odd_id__ из массива __basket_odds__ найти соответствующее ему значение __event_id__ (через таблицу __odds__)\n
            б) Для каждого полученного __event_id__ определить соответствующее ему значение __risk_group_id__ (через таблицу __events__)\n
            в) Для каждого полученного __risk_group_id__ определить соответствующие ему значения __name__ и __value__ (через таблицу __risk_groups__):\n
              --- 1. Если у всех __risk_group_id__ (для данной ставки) значение в поле __name__ = __\"Высокая\"__, то прекратить выполнение данного шага алгоритма, пропустить __Пункт VI__ алгоритма и завершить выполнение __Пунктов I.6 или I.9__ (см. __Пункт I__)\n
              --- 2. Если хотя бы у одного __risk_group_id__ (для данной ставки) значение в поле __name__ != __\"Высокая\"__, то перейти к следующему этапу __Пункта V__ алгоритма (см. дальше)\n
            г) Для каждого __odd_id__ из массива __basket_odds__ найти соответствующее ему __odd_value__ (через таблицу __odds__)\n
            д) Для каждого __odd_id__ из массива __basket_odds__ разделить цифровое значение соответствующей группы риска на разницу значения коэффициента и __1__ (__risk_groups.value__ / (__odds.value-1__)) и записать результат в локальную переменную __max_amount__\n
            е) Для каждого __odd_id__ из массива __basket_odds__ сравнить цифровое значение соответствующей группы риска и значение его локальной переменной __max_amount__\n
              --- 1. Если __max_amount__ < __risk_groups.value / 3__, то __max_amount__ := __risk_groups.value / 3__\n
              --- 2. Если __max_amount__ >= __risk_groups.value / 3__, то никаких дополнительных действий не требуется\n
            ж) Выбрать наименьшее значение локальной переменной __max_amount__ из всех полученных. Это будет максимальная сумма ставки по группе риска\n
          6. Сумма ставки игрока в рублях (см. __Пункт III.4__) должна быть меньше значения максимальной суммы ставки по группе риска (см. __Пункт V.5.Ж__), если условие не выполняется - возвращать ошибку (__ошибка#3__)\n
        
        __VI. Алгоритм проверки допустимости суммы ставки (по порезкам):__\n
          1. Рассчитать минимально допустимую сумму ставки:\n
            а) Использовать __player_id__ текущего пользователя\n
            б) Получить все значения __odd_id__ из массива __basket_odds__\n
            в) Для каждого __odd_id__ определить соответствующие __market_id__ и __event_id__ (через таблицы __odds__ и __outcomes__)\n
            г) По __event_id__ определить соответствующие __league_id__ и __sport_id__ (через таблицу __events__)\n
            д) По __player_id__, __market_id__, __league_id__ и __sport_id__ найти все записи в таблице __limitations'__. Учесть, что в полученных записях не обязательно должно быть значение всех вышеуказанных переменных сразу (Прим. значение поля в таблице должно либо совпадать либо быть равным __null__)\n
            е) Для каждой полученной записи получить значение __min_value_amount__ (если оно имеется)\n
            ж) Определить наибольшее значение __min_value_amount__ из всех полученных\n
          2. Рассчитать максимально допустимую сумму ставки:\n
            а) Использовать __player_id__ текущего пользователя\n
            б) Получить все значения __odd_id__ из массива __basket_odds__\n
            в) Для каждого __odd_id__ определить соответствующие __market_id__ и __event_id__ (через таблицы __odds__ и __outcomes__)\n
            г) По __event_id__ определить соответствующие __league_id__ и __sport_id__ (через таблицу __events__)\n
            д) По __player_id__, __market_id__, __event_id__, __league_id__ и __sport_id__ найти все записи в таблице __limitations__. Учесть, что в полученных записях не обязательно должно быть значение всех вышеуказанных переменных сразу (Прим. значение поля в таблице должно либо совпадать либо быть равным __null__)\n
            е) Для каждой полученной записи получить значения __max_value_amount__ и __max_value_percent__ (если они имеются)\n
            ж) Для тех записей, в которых значение __max_value_percent__ получено, по __event_id__ в таблице __events__ найти значение __max_risk__. Разделить значение __max_risk__ на 100 и умножить на значение __max_value_percent__\n
            з) Определить наименьшее значение из всех полученных __max_value_amount__ и всех значений полученных в предыдущем пункте\n
          3. Рассчитать сумму ставки игрока в рублях:\n
            а) Использовать __player_id__ текущего пользователя\n
            б) Получить запись в таблице __balances__, получить соответствующее значение __currency_id__\n
            в) Для данного __currency_id__ получить запись в таблице __currencies__, получить соответствующее значение __course__\n
            г) Умножить значение __course__ на значение входного параметра эндпоита (__amount__)\n
          4. Сумма ставки игрока в рублях (см. __Пункт VI.3__) должна быть больше минимально допустимой суммы ставки (см. __Пункт VI.1__) и меньше максимально допустимой суммы ставки (см. __Пункт VI.2__), если условие не выполняется - возвращать ошибку (__ошибка#3__)\n
        
        __VII. Алгоритм сохранения ставки:__\n
          1. Использовать __player_id__ текущего пользователя\n
          2. Получить в массиве __basket_odds__ все значения __odd_id__, __old_value__ и __new_value__\n
          3. Определить какие значения коэффициентов необходимо сохранять:\n
            а) Для каждого __odd_id__ сравнить значение __old_value__ и __new_value__\n
            б) Если __old_value__ = __null__, то:\n
              --- 1. Значению __save_value__ присвоить значение __new_value__\n
            в) Если __old_value__ != __null__, то:\n
              --- 1. Если значение __old_value__ меньше значения __new_value__, то значению __save_value__ присвоить значение __old_value__\n
              --- 2. Если значение __old_value__ больше значения __new_value__, то значению __save_value__ присвоить значение __new_value__\n
          4. Добавить одну запись в таблицу __bets__:\n
            а) __user_id__ = __player_id__\n
            б) __currency_id__ = __currency_id__ из таблицы __balances__\n
            в) __number__ = случайное 15-значное цифровое значение\n
            г) __express_odd_value__ = __save_value__ (см. __Пункт VII.3__) если в массиве __basket_odds__ только один объект, либо произведение всех значений __save_value__ (см. __Пункт VII.3__), если в массиве __basket_odds__ несколько объектов\n
            д) __amount__ = значение входного параметра эндпоита (__amount__)\n
            е) __is_express__ = __false__ если в массиве __basket_odds__ только один объект, __true__ если в массиве __basket_odds__ несколько объектов\n
            ж) __status__ = __0__\n
          5. Добавить записи в таблицу __bets_odds__ (по количеству объектов в массиве __basket_odds__):\n
            а) __bet_id__ = __id__ записи, которая была создана в __Пункте VII.4__\n
            б) __odd_id__ = __odd_id__ объекта из массива __basket_odds__\n
            в) __odd_value__ = __save_value__ объекта из массива __basket_odds__ (см. __Пункт VII.3__)\n
            г) __odd_score__ = __current_score__ из таблицы __events__\n
            д) __odd_time__ = текущее серверное время минус значение __start_time__ таблицы __events__\n
            е) __odd_period__ = __current_period__ из таблицы __events__\n
            ж) __is_event_live__ = __false__ если в таблице __events__ значение __time_status = 1__, __true__ если в таблице __events__ значение __time_status = 2__\n
            з) __status__ = __0__\n
          6. Удалить все записи для текущего пользователя из таблицы __bet_baskets_odd__\n
          7. Сформировать объект c данными по сделанной ставке и отправить его в ответе (см. Responses)\n"
      operationId: save-bet
      produces:
        - application/json
      parameters:
        - name: amount
          in: path
          description: "Сумма ставки, которую необходимо сохранить (вместе с остальными данными по ставке)"
          required: true
          type: integer
      responses:
        '200':
          description: "Успешно"
          schema:
            $ref: '#/definitions/newPlayerBet'
        '400':
          description: "
            Ошибка в запросе:\n
              1. Изменились условия ставки\n
              2. Недостаточно средств для совершения ставки\n
              3. Недопустимая сумма ставки\n
              4. Прием ставок на матч __<event_name>__ временно приостановлен\n
              5. Матч __<event_name>__ завершен\n
              6. Результат исхода __<outcome_name>__ уже определен\n
              7. Прием ставок на исход __<outcome_name>__ временно приостановлен\n
              8. Исход __<outcome_name>__ уже есть в корзине ставок\n
              9. В данный момент невозможно добавить исход __<outcome_name>__ в корзину ставок (Прим. на самом деле у игрока в корзине уже есть другой исход на этот матч, что недопустимо для экспресс-ставок)\n
              10. В данный момент невозможно добавить исход __<outcome_name>__ в корзину ставок (Прим. на самом деле у игрока уже есть ставка на этот матч, а у данного матча __is_one_bet__ = __true__)\n"
        '401':
          description: "Пользователь не авторизован"
      security:
        - userAuthentication: []
        - playerRole: []
        - playerLanguage: [] 
  /player-bet-basket/save-bet-one-click:
    post:
      tags:
        - player-bet-basket
      summary: "Сохранить данные по ставке \"В один клик\""
      description: "
        __I. Основной алгоритм:__\n
          1. Использовать __player_id__ текущего пользователя\n
          2. Получить данные для сохранения ставки:\n
            а) Значение входного параметра эндпоита (__odd_id__)\n
            б) Значение входного параметра эндпоита (__amount__)\n
          3. Сформировать объект __basket_odd__\n
            а) Структура объекта:\n
              --- 1. __odd_id__\n
              --- 2. __old_value__ (__default__ = __null__)\n
              --- 3. __new_value__ (__default__ = __null__)\n
              --- 4. __save_value__ (__default__ = __null__)\n
          4. Рассчитать значение таймера задержки принятия ставки:\n
            а) Получить системное значение таймера задержки принятия ставки:\n
              --- 1. Для __odd_id__ из объекта __basket_odd__ определить соответствующий ему __sport_id__ (через __event_id__ в таблице __odds__)\n
              --- 2. Для полученного __sport_id__ получить значение __timer_value__\n
            б) Получить значение таймера задержки принятия ставки по порезкам:\n
              --- 1. Для __odd_id__ из объекта __basket_odd__ определить соответствующие ему __market_id__ и __event_id__ (через таблицу __odds__)\n
              --- 2. По __event_id__ определить соответствующие __league_id__ и __sport_id__ (через таблицу __events__)\n
              --- 3. По __player_id__, __market_id__, __event_id__, __league_id__ и __sport_id__ найти все записи в таблице __limitations__. Учесть, что в полученных записях не обязательно должно быть значение всех вышеуказанных переменных сразу (Прим. значение поля в таблице должно либо совпадать либо быть равным __null__)\n
              --- 4. Для каждой полученной записи получить значение __bets_delay_value__ (если оно имеется)\n
              --- 5. Определить наибольшее значение __bets_delay_value__ из всех полученных\n
            в) Рассчитать итоговое значение таймера задержки принятия ставки:\n
              --- 1. Сравнить системное значение таймера задержки принятия ставки и значение таймера задержки принятия ставки по порезкам. Выбрать наибольшее значение\n
          5. Запустить таймер ставки\n
            а) Если значение таймера ставки больше __0__, то перейти к __Пункту I.6__\n
            б) Если значение таймера ставки равно __0__, то перейти к __Пункту I.9__\n
          6. Выполнить первичную проверку допустимости совершения ставки (не дожидаясь завершения таймера):\n
            а) Выполнить алгоритмы проверок (см. __Пункты II - VI__)\n
            б) Если в ходе выполнения алгоритмов проверок не возвращены ошибки, то перейти к __Пункту I.7__\n
          7. Для __odd_id__ из объекта __basket_odd__ рассчитать старое значение коэффициента:\n
            а) Определить соответствующие __market_id__ и __event_id__ (через таблицу __odds__)\n
            б) По __event_id__ определить соответствующие __league_id__ и __sport_id__ (через таблицу __events__)\n
            в) По __player_id__, __market_id__, __league_id__ и __sport_id__ найти все записи в таблице __limitations__. Учесть, что в полученных записях не обязательно должно быть значение всех вышеуказанных переменных сразу (Прим. значение поля в таблице должно либо совпадать либо быть равным __null__)\n
            г) Для каждой полученной записи получить значение __odds_value__\n
            д) Определить наибольшее значение __odds_value__ из всех полученных\n
            е) Разделить полученное значение на 100 и вычесть его из 1. Это будет модификатор коэффициента\n
            ж) Получить значение __value__ для __odd_id__ (через таблицу __odds__)\n
            з) Из полученного значения __value__ вычесть 1, затем умножить на модификатор коэффициента и прибавить 1\n
            и) Сохранить полученное старое значение коэффициента в объект __basket_odd__ (в поле __old_value__)\n
          8. Дождаться завершения таймера ставки\n
          9. Выполнить вторичную проверку допустимости совершения ставки:\n
            а) Выполнить алгоритмы проверок (см. __Пункты II - VI__)\n
            б) Если в ходе выполнения алгоритмов проверок не возвращены ошибки, то перейти к __Пункту I.10__\n
          10. Для __odd_id__ из объекта __basket_odd__ рассчитать новое значение коэффициента:\n
            а) Определить соответствующие __market_id__ и __event_id__ (через таблицу __odds__)\n
            б) По __event_id__ определить соответствующие __league_id__ и __sport_id__ (через таблицу __events__)\n
            в) По __player_id__, __market_id__, __league_id__ и __sport_id__ найти все записи в таблице __limitations__. Учесть, что в полученных записях не обязательно должно быть значение всех вышеуказанных переменных сразу (Прим. значение поля в таблице должно либо совпадать либо быть равным __null__)\n
            г) Для каждой полученной записи получить значение __odds_value__\n
            д) Определить наибольшее значение __odds_value__ из всех полученных\n
            е) Разделить полученное значение на 100 и вычесть его из 1. Это будет модификатор коэффициента\n
            ж) Получить значение value для __odd_id__ (через таблицу __odds__)\n
            з) Из полученного значения __value__ вычесть 1, затем умножить на модификатор коэффициента и прибавить 1\n
            и) Сохранить полученное новое значение коэффициента в объект __basket_odd__ (в поле __new_value__)\n
          11. Проверить настройки корзины ставок:\n
            а) Для текущего __player_id__ получить запись в таблице __user_themes__, получить соответствующее значение __reception_when_odds_change__\n
            б) Получить в объекте __basket_odd__ старое (__old_value__) и новое (__new_value__) значение коэффициента (см. __Пункты I.7 и I.10__)\n
            в) Если __old_value__ = __null__, то:\n
              --- 1. Проверка настройки корзины ставок не требуется - перейти к __Пункту VII__\n
            г) Если __old_value__ != __null__, то:\n
              --- 1. Если значение __old_value__ больше значения __new_value__ и __reception_when_odds_change__ != __1__, то возвращать ошибку (__ошибка#1__)\n
              --- 2. Во всех остальных случаях перейти к __Пункту VII__\n
        
        __II. Алгоритм проверки наличия необходимых средств на балансе игрока:__\n
          1. Использовать __player_id__ текущего пользователя\n
          2. Получить запись в таблице __balances__, получить соответствующее значение __value__\n
          3. Значение входного параметра эндпоита (__amount__) должно быть меньше значения суммы на балансе игрока (см. __Пункт II.2__), если условие не выполняется - возвращать ошибку (__ошибка#2__)\n
        
        __III. Алгоритм проверки допустимости суммы ставки (по минимуму и максимуму):__\n
          1. Использовать __player_id__ текущего пользователя\n
          2. Получить запись в таблице __balances__, получить соответствующее значение __currency_id__\n
          3. Для данного __currency_id__ получить запись в таблице __currencies__, получить соответствующее значение __course__\n
          4. Умножить значение __course__ на значение входного параметра эндпоита (__amount__). Это будет сумма ставки игрока в рублях\n
          5. Получить записи в таблице __settings__ со значениями в поле __code__ равными __min_value_bet__ и __max_value_bet__, получить соответствующие значения __value__\n
          6. Сумма ставки игрока в рублях (см. __Пункт III.4__) должна быть больше значения минимальной суммы ставки и меньше значения максимальной суммы ставки (см. __Пункт III.5__), если условие не выполняется - возвращать ошибку (__ошибка#3__)\n
        
        __IV. Алгоритм проверки допустимости ставки на данный коэффициент:__\n
          1. Использовать __player_id__ текущего пользователя\n
          2. Для __odd_id__ из объекта __basket_odd__ найти соответствующий ему __event_id__ (через таблицу __odds__)\n
          3. Проверить:\n
            а) В таблице __events__ значение поля __is_stopped__ для данного __event_id__ должно быть равно __false__ (__ошибка#4__)\n
            б) В таблице __events__ значение поля __time_status__ для данного __event_id__ должно быть равно __1__ или __2__ (__ошибка#5__)\n
            в) В таблице __odds__ значение поля __is_win__ для данного __odd_id__ должно быть равно __null__ (__ошибка#6__)\n
            г) В таблице __odds__ значение поля __is_stopped__ для данного __odd_id__ должно быть равно __false__ (__ошибка#7__)\n
            д) В таблице __limitations__ проверить наличие записи для данного __event_id__ со значением в поле __is_one_bet__ равным __true__. Если такая запись найдена, то в таблице __bets_odds__ проверить отсутствие других коэффициентов (с значением __status__ равным __0__) для данного __event_id__ и текущего __player_id__ (__ошибка#8__)\n
          4. После проверки всех условий для __odd_id__:\n
            а) Если для __odd_id__ какое-либо условие не пройдено, то вернуть соответствующую ошибку\n
            б) Если для __odd_id__ все условия пройдены, то перейти к следующему алгоритму (см. __Пункт V__)\n
        
        __V. Алгоритм проверки допустимости суммы ставки (по группе риска):__\n
          1. Использовать __player_id__ текущего пользователя\n
          2. Получить запись в таблице __balances__, получить соответствующее значение __currency_id__\n
          3. Для данного __currency_id__ получить запись в таблице __currencies__, получить соответствующее значение __course__\n
          4. Умножить значение __course__ на значение входного параметра эндпоита (__amount__). Это будет сумма ставки игрока в рублях\n
          5. Рассчитать максимальное значение суммы ставки (по группе риска):\n
            а) Для __odd_id__ из объекта __basket_odd__ найти соответствующее ему значение __event_id__ (через таблицу __odds__)\n
            б) Для полученного __event_id__ определить соответствующее ему значение __risk_group_id__ (через таблицу __events__)\n
            в) Для полученного __risk_group_id__ определить соответствующие ему значения __name__ и __value__ (через таблицу __risk_groups__):\n
              --- 1. Если значение в поле __name__ = __\"Высокая\"__, то прекратить выполнение данного шага алгоритма, пропустить __Пункт VI__ алгоритма и завершить выполнение __Пунктов I.6 или I.9__ (см. __Пункт I__)\n
              --- 2. Если значение в поле __name__ != __\"Высокая\"__, то перейти к следующему этапу __Пункта V__ алгоритма (см. дальше)\n
            г) Для __odd_id__ из объекта __basket_odd__ найти соответствующее ему __odd_value__ (через таблицу __odds__)\n
            д) Для __odd_id__ из объекта __basket_odd__ разделить цифровое значение соответствующей группы риска на разницу значения коэффициента и 1 (__risk_groups.value__ / (__odds.value-1__)) и записать результат в локальную переменную __max_amount__\n
            е) Для __odd_id__ из объекта __basket_odd__ сравнить цифровое значение соответствующей группы риска и значение его локальной переменной __max_amount__\n
              --- 1. Если __max_amount__ < __risk_groups.value / 3__, то __max_amount__ := __risk_groups.value / 3__\n
              --- 2. Если __max_amount__ >= __risk_groups.value / 3__, то никаких дополнительных действий не требуется\n
            ж) Значение локальной переменной __max_amount__ является максимальной суммой ставки по группе риска\n
          6. Сумма ставки игрока в рублях (см. __Пункт III.4__) должна быть меньше значения максимальной суммы ставки по группе риска (см. __Пункт V.5.Ж__), если условие не выполняется - возвращать ошибку (__ошибка#3__)\n
        
        __VI. Алгоритм проверки допустимости суммы ставки (по порезкам):__\n
          1. Рассчитать минимально допустимую сумму ставки:\n
            а) Использовать __player_id__ текущего пользователя\n
            б) Получить значение __odd_id__ из объекта __basket_odd__\n
            в) Для __odd_id__ определить соответствующие __market_id__ и __event_id__ (через таблицы __odds__ и __outcomes__)\n
            г) По __event_id__ определить соответствующие __league_id__ и __sport_id__ (через таблицу __events__)\n
            д) По __player_id__, __market_id__, __league_id__ и __sport_id__ найти все записи в таблице __limitations__. Учесть, что в полученных записях не обязательно должно быть значение всех вышеуказанных переменных сразу (Прим. значение поля в таблице должно либо совпадать либо быть равным __null__)\n
            е) Для каждой полученной записи получить значение __min_value_amount__ (если оно имеется)\n
            ж) Определить наибольшее значение __min_value_amount__ из всех полученных\n
          2. Рассчитать максимально допустимую сумму ставки:\n
            а) Использовать __player_id__ текущего пользователя\n
            б) Получить значение __odd_id__ из объекта __basket_odd__\n
            в) Для __odd_id__ определить соответствующие __market_id__ и __event_id__ (через таблицы __odds__ и __outcomes__)\n
            г) По __event_id__ определить соответствующие __league_id__ и __sport_id__ (через таблицу __events__)\n
            д) По __player_id__, __market_id__, __event_id__, __league_id__ и __sport_id__ найти все записи в таблице __limitations__. Учесть, что в полученных записях не обязательно должно быть значение всех вышеуказанных переменных сразу (Прим. значение поля в таблице должно либо совпадать либо быть равным __null__)\n
            е) Для каждой полученной записи получить значения __max_value_amount__ и __max_value_percent__ (если они имеются)\n
            ж) Для тех записей, в которых значение __max_value_percent__ получено, по __event_id__ в таблице __events__ найти значение __max_risk__. Разделить значение __max_risk__ на 100 и умножить на значение __max_value_percent__\n
            з) Определить наименьшее значение из всех полученных __max_value_amount__ и всех значений полученных в предыдущем пункте\n
          3. Рассчитать сумму ставки игрока в рублях:\n
            а) Использовать __player_id__ текущего пользователя\n
            б) Получить запись в таблице __balances__, получить соответствующее значение __currency_id__\n
            в) Для данного __currency_id__ получить запись в таблице __currencies__, получить соответствующее значение __course__\n
            г) Умножить значение __course__ на значение входного параметра эндпоита (__amount__)\n
          4. Сумма ставки игрока в рублях (см. __Пункт VI.3__) должна быть больше минимально допустимой суммы ставки (см. __Пункт VI.1__) и меньше максимально допустимой суммы ставки (см. __Пункт VI.2__), если условие не выполняется - возвращать ошибку (__ошибка#3__)\n
        
        __VII. Алгоритм сохранения ставки:__\n
          1. Использовать __player_id__ текущего пользователя\n
          2. Получить в объекте __basket_odd__ значения __odd_id__, __old_value__ и __new_value__\n
          3. Определить какое значение коэффициента необходимо сохранять:\n
            а) Для __odd_id__ сравнить значение __old_value__ и __new_value__\n
            б) Если __old_value__ = __null__, то:\n
              --- 1. Значению __save_value__ присвоить значение __new_value__\n
            в) Если __old_value__ != __null__, то:\n
              --- 1. Если значение __old_value__ меньше значения __new_value__, то значению __save_value__ присвоить значение __old_value__\n
              --- 2. Если значение __old_value__ больше значения __new_value__, то значению __save_value__ присвоить значение __new_value__\n
          4. Добавить одну запись в таблицу __bets__:\n
            а) __user_id__ = __player_id__\n
            б) __currency_id__ = __currency_id__ из таблицы __balances__\n
            в) __number__ = случайное 15-значное цифровое значение\n
            г) __express_odd_value__ = __save_value__ (см. __Пункт VII.3__)\n
            д) __amount__ = значение входного параметра эндпоита (__amount__)\n
            е) __is_express__ = __false__\n
            ж) __status__ = __0__\n
          5. Добавить одну запись в таблицу __bets_odds__:\n
            а) __bet_id__ = __id__ записи, которая была создана в __Пункте VII.4__\n
            б) __odd_id__ = __odd_id__ из объекта __basket_odd__\n
            в) __odd_value__ = __save_value__ из объекта __basket_odd__ (см. __Пункт VII.3__)\n
            г) __odd_score__ = __current_score__ из таблицы __events__\n
            д) __odd_time__ = текущее серверное время минус значение __start_time__ таблицы __events__\n
            е) __odd_period__ = __current_period__ из таблицы __events__\n
            ж) __is_event_live__ = __false__ если в таблице __events__ значение __time_status__ = __1__, true если в таблице __events__ значение __time_status = 2__\n
            з) __status__ = __0__\n
          6. Сформировать объект c данными по сделанной ставке и отправить его в ответе (см. Responses)\n"
      operationId: save-bet-one-click
      produces:
        - application/json
      parameters:
        - in: body
          name: betOneClick
          description: "Входные параметры ставки \"В один клик\""
          required: true
          schema:
            $ref: '#/definitions/betOneClick'
      responses:
        '200':
          description: "Успешно"
          schema:
            $ref: '#/definitions/newPlayerBet'
        '400':
          description: "
            Ошибка в запросе:\n
              1. Изменились условия ставки\n
              2. Недостаточно средств для совершения ставки\n
              3. Недопустимая сумма ставки\n
              4. Прием ставок на матч __<event_name>__ временно приостановлен\n
              5. Матч __<event_name>__ завершен\n
              6. Результат исхода __<outcome_name>__ уже определен\n
              7. Прием ставок на исход __<outcome_name>__ временно приостановлен\n
              8. В данный момент невозможно добавить исход __<outcome_name>__ в корзину ставок (Прим. на самом деле у игрока уже есть ставка на этот матч, а у данного матча __is_one_bet__ = __true__)\n"
        '401':
          description: "Пользователь не авторизован"
      security:
        - userAuthentication: []
        - playerRole: []
        - playerLanguage: []
  /player-bet-basket/get-favorite-bets:
    get:
      tags:
        - player-bet-basket
      summary: "Получить любимые пари"
      description: "Выполняется при загрузке страницы (Данные из таблицы __user_quick_bets__)"
      operationId: get-favorite-bets
      produces:
        - application/json
      parameters: []
      responses:
        '200':
          description: "Успешно"
          schema:
            $ref: '#/definitions/playerFavoriteBets'
        '401':
          description: "Пользователь не авторизован"
      security:
        - userAuthentication: []
        - playerRole: []
  /player-bet-basket/add-favorite-bet/{favoriteBetType}/{favoriteBetValue}:
    get:
      tags:
        - player-bet-basket
      summary: "Добавить любимое пари"
      description: "Добавить запись в таблицу __user_quick_bets__"
      operationId: add-favorite-bet
      produces:
        - application/json
      parameters:
        - name: favoriteBetType
          in: path
          description: "Тип любимого пари. Варианты: 0 - __Абсолютная величина__, 1 - __В процентах__"
          enum:
            - 0
            - 1
          required: true
          type: integer
        - name: favoriteBetValue
          in: path
          description: "Значение любимого пари"
          required: true
          type: number
      responses:
        '200':
          description: "Успешно"
          schema:
            $ref: '#/definitions/playerFavoriteBet'
        '400':
          description: "Ошибка в запросе (некорректное значение __favoriteBetValue__)"
        '401':
          description: "Пользователь не авторизован"
      security:
        - userAuthentication: []
        - playerRole: []
  /player-bet-basket/remove-favorite-bet/{favoriteBetId}:
    get:
      tags:
        - player-bet-basket
      summary: "Удалить любимое пари"
      description: "Удалить запись из таблицы __user_quick_bets__"
      operationId: remove-favorite-bet
      produces:
        - application/json
      parameters:
        - name: favoriteBetId
          in: path
          description: "ID любимого пари, которое должно быть удалено"
          required: true
          type: integer
      responses:
        '200':
          description: "Успешно"
        '400':
          description: "Ошибка в запросе (любимое пари не найдено)"
        '401':
          description: "Пользователь не авторизован"
      security:
        - userAuthentication: []
        - playerRole: []
  /player-bet-basket/get-player-bet-settings:
    get:
      tags:
        - player-bet-basket
      summary: "Получить настройки корзины ставок"
      description: "Выполняется при загрузке страницы"
      operationId: get-player-bet-settings
      produces:
        - application/json
      parameters: []
      responses:
        '200':
          description: "Успешно"
          schema:
            $ref: '#/definitions/playerBetSettings'
        '401':
          description: "Пользователь не авторизован"
      security:
        - userAuthentication: []
        - playerRole: []
  /player-bet-basket/change-reception-when-odds-change/{value}:
    get:
      tags:
        - player-bet-basket
      summary: "Сохранить настройки приема пари \"При изменении коэффициентов\""
      description: "Редактировать значение __reception_when_odds_change__ таблицы __user_theme__"
      operationId: change-reception-when-odds-change
      produces:
        - application/json
      parameters:
        - name: value
          in: path
          description: "0 - __Согласиться с повышением __, 1 - __Согласиться с любым__, 2 - __Требовать подтверждения__"
          enum:
            - 0
            - 1
            - 2
          required: true
          type: integer
      responses:
        '200':
          description: "Успешно"
        '401':
          description: "Пользователь не авторизован"
      security:
        - userAuthentication: []
        - playerRole: []
  /player-bet-basket/change-reception-when-totals-change/{value}:
    get:
      tags:
        - player-bet-basket
      summary: "Сохранить настройки приема пари \"При изменении тоталов\""
      description: "Редактировать значение __reception_when_totals_change__ таблицы __user_theme__"
      operationId: change-reception-when-totals-change
      produces:
        - application/json
      parameters:
        - name: value
          in: path
          description: "0 - __Согласиться с любым__, 1 - __Требовать подтверждения__"
          enum:
            - 0
            - 1
          required: true
          type: integer
      responses:
        '200':
          description: "Успешно"
        '401':
          description: "Пользователь не авторизован"
      security:
        - userAuthentication: []
        - playerRole: []
  /player-bet-basket/change-sale-when-odds-change/{value}:
    get:
      tags:
        - player-bet-basket
      summary: "Сохранить настройки продажи пари \"При изменении коэффициентов\""
      description: "Редактировать значение __sale_when_odds_change__ таблицы __user_theme__"
      operationId: change-sale-when-odds-change
      produces:
        - application/json
      parameters:
        - name: value
          in: path
          description: "0 - __Согласиться с повышением __, 1 - __Согласиться с любым__, 2 - __Требовать подтверждения__"
          enum:
            - 0
            - 1
            - 2
          required: true
          type: integer
      responses:
        '200':
          description: "Успешно"
        '401':
          description: "Пользователь не авторизован"
      security:
        - userAuthentication: []
        - playerRole: []
  /player-bet-basket/save-substitute-amount-previous-bet/{value}:
    get:
      tags:
        - player-bet-basket
      summary: "Сохранить настройки \"Подставлять сумму предыдущего пари в новое\""
      description: "Редактировать значение __is_fast_amount__ таблицы __user_theme__ (__true__/__false__)"
      operationId: save-substitute-amount-previous-bet
      produces:
        - application/json
      parameters:
        - name: value
          in: path
          description: "Значение __is_fast_amount__, которое необходимо записать в БД"
          required: true
          type: boolean
      responses:
        '200':
          description: "Успешно"
        '401':
          description: "Пользователь не авторизован"
      security:
        - userAuthentication: []
        - playerRole: []
  /player-bet-basket/return-default-bet-settings:
    get:
      tags:
        - player-bet-basket
      summary: "Вернуть настройки корзины ставок к значениям по умолчанию"
      description: "
        1. В таблице __user_theme__\n
          а) Значению __reception_when_odds_change__ присвоить __0__ (__Согласиться с повышением__)\n
          б) Значению __reception_when_totals_change__ присвоить __0__ (__Согласиться с любым__)\n
          в) Значению __sale_when_odds_change__ присвоить __0__ (__Согласиться с повышением__)\n
          г) Значению __is_fast_amount__ присвоить __false__\n
        2. В таблице __user_quick_bets__ удалить все записи для текущего игрока\n"
      operationId: return-default-bet-settings
      produces:
        - application/json
      parameters: []
      responses:
        '200':
          description: "Успешно"
          schema:
            $ref: '#/definitions/playerBetSettings'
        '401':
          description: "Пользователь не авторизован"
      security:
        - userAuthentication: []
        - playerRole: []
  /player-event-card/get-event-info:
    post:
      tags:
        - player-event-card
      summary: "Получить общую информацию по событию"
      description: "Для событий со значением в поле __active__ таблицы __events__ равным __1__"
      operationId: get-event-info
      produces:
        - application/json
      parameters:
        - in: body
          name: playerEventsTableParams
          description: "Данные для запроса информации по событию"
          required: true
          schema:
            $ref: '#/definitions/requestDataForEventInfo'
      responses:
        '200':
          description: "Успешно"
          schema:
            $ref: '#/definitions/eventInfo'
        '400':
          description: "Ошибка в запросе (некорректное значение __active__)"
      security:
        - playerLanguage: []
  /player-event-card/get-event-odds-tables:
    post:
      tags:
        - player-event-card
      summary: "Получить таблицы с коэффициентами события"
      description: "
        1. Для событий со значением в поле __active__ таблицы __events__ равным __1__\n
        2. Формирование списка вкладок (табов) для карточки матча:\n
          а) Использовать __event_id__ из входного параметра\n
          б) По __event_id__ определить значение __current_period__ в таблице __events__\n
          в) Для данного __event_id__ получить все записи в таблице __odds__ со значением в поле __is_stopped__ равным __false__, получить соответствующие значения в поле __odd_id__\n
          г) Для полученных __odd_id__ получить все записи в таблице __outcomes__, получить соответствующие значения в поле __outcome_id__\n
          д) Для полученных __outcome_id__ получить все записи в таблице __markets__, получить соответствующие значения в полях __type__, __type_number__ и __is_over_time__\n
          е) Сформировать выборку необходимых групп маркетов  (отфильтровать массив маркетов) по следующим условиям:\n
            --- 1. Оставить записи со значением в поле __type__ равным __0__\n
            --- 2. Оставить записи со значением в поле __type__ равным __1__ и со значением в поле __type_number__ большим либо равным значению __current_period__ (см. __Пункт 2Б__)\n
            --- 3. *Для всех видов спорта, кроме указанных в __Пункте 2Е4__: оставить записи со значением в поле __type__ равным __2__ и со значением в поле __type_number__ большим либо равным значению __current_period/2__\n
            --- 4. *Для гандбола, гэльского спорта, кабадди, регби, футбола, футзала: оставить записи со значением в поле __type__ равным __2__ и со значением в поле __type_number__ большим либо равным значению __current_period__\n
          ж) Создать необходимое количество объектов в массиве __marketGroups__ (по связке __type__ + __type_number__ + __is_over_time__)\n
        3. Формирование списка коэффициентов для карточки матча:\n
          а) Для каждой группы маркетов (см. __Пункт 2Ж__) поместить соответствующие маркеты (см. __Пункт 2Д__) в массив __markets__ из выходного параметра\n
          б) Примечание: маркет со значением в поле __name__ равным __GAME__ необходимо поместить в группу маркетов у которой значение __type__ равно __1__ и значение в поле __type_number__ равно значению в поле __current_period__ (таблица __events__)\n
          в) Поместить исходы с коэффициентами в массив __outcomes__ в соответствующие объекты массива __markets__\n"
      operationId: get-event-odds-tables
      produces:
        - application/json
      parameters:
        - in: body
          name: playerEventsTableParams
          description: "Данные для запроса таблиц с коэффициентами"
          required: true
          schema:
            $ref: '#/definitions/requestDataForEventOddsTables'
      responses:
        '200':
          description: "Успешно"
          schema:
            $ref: '#/definitions/eventOddsTables'
        '400':
          description: "Ошибка в запросе (некорректное значение __active__)"
      security:
        - playerLanguage: []
  /player-event-card/get-favorite-markets/{eventId}:
    get:
      tags:
        - player-event-card
      summary: "Получить список избранных маркетов с коэффициентами события"
      description: "
        1. По входному параметру __event_id__ определить __sport_id__ (через таблицу __events__)\n
        2. Для текущего пользователя по __sport_id__ найти все записи в таблице __user_favorite_markets__\n
        3. Сформировать массив из __market_id__ всех полученных записей\n"
      operationId: get-favorite-markets
      produces:
        - application/json
      parameters:
        - name: eventId
          in: path
          description: "ID события, список избранных маркетов которого необходимо получить"
          required: true
          type: integer
      responses:
        '200':
          description: "Успешно"
          schema:
            $ref: '#/definitions/favoriteMarkets'
        '401':
          description: "Пользователь не авторизован"
      security:
        - userAuthentication: []
        - playerRole: []
  /player-event-card/add-market-to-favorites/{marketId}/{sportId}:
    get:
      tags:
        - player-event-card
      summary: "Добавить маркет в \"Избранное\""
      description: "Добавить запись в таблицу __user_favorite_markets__"
      operationId: add-market-to-favorites
      produces:
        - application/json
      parameters:
        - name: marketId
          in: path
          description: "ID маркета, который необходимо добавить в __Избранное__"
          required: true
          type: integer
        - name: sportId
          in: path
          description: "ID вида спорта, для которого добавляется маркет в __Избранное__"
          required: true
          type: integer
      responses:
        '200':
          description: "Успешно"
        '401':
          description: "Пользователь не авторизован"
      security:
        - userAuthentication: []
        - playerRole: []
  /player-event-card/remove-market-from-favorites/{marketId}:
    get:
      tags:
        - player-event-card
      summary: "Убрать маркет из \"Избранное\""
      description: "Удалить запись из таблицы __user_favorite_markets__"
      operationId: remove-market-from-favorites
      produces:
        - application/json
      parameters:
        - name: marketId
          in: path
          description: "ID маркета, который необходимо удалить из __Избранное__"
          required: true
          type: integer
      responses:
        '200':
          description: "Успешно"
        '401':
          description: "Пользователь не авторизован"
      security:
        - userAuthentication: []
        - playerRole: []
  /player-event-card/get-collapsed-markets/{eventId}:
    get:
      tags:
        - player-event-card
      summary: "Получить список свернутых маркетов с коэффициентами события"
      description: "
        1. По входному параметру __event_id__ определить __sport_id__ (через таблицу __events__)\n
        2. Для текущего пользователя по __sport_id__ найти все записи в таблице __user_collapsed_markets__\n
        3. Сформировать массив из __market_id__ всех полученных записей\n"
      operationId: get-collapsed-markets
      produces:
        - application/json
      parameters:
        - name: eventId
          in: path
          description: "ID события, список свернутых маркетов которого необходимо получить"
          required: true
          type: integer
      responses:
        '200':
          description: "Успешно"
          schema:
            $ref: '#/definitions/collapsedMarkets'
        '401':
          description: "Пользователь не авторизован"
      security:
        - userAuthentication: []
        - playerRole: []
  /player-event-card/add-market-to-collapsed/{marketId}/{sportId}:
    get:
      tags:
        - player-event-card
      summary: "Свернуть маркет"
      description: "Добавить запись в таблицу __user_collapsed_markets__"
      operationId: add-market-to-collapsed
      produces:
        - application/json
      parameters:
        - name: marketId
          in: path
          description: "ID маркета, который необходимо свернуть"
          required: true
          type: integer
        - name: sportId
          in: path
          description: "ID вида спорта, для которого сворачивается маркет"
          required: true
          type: integer
      responses:
        '200':
          description: "Успешно"
        '401':
          description: "Пользователь не авторизован"
      security:
        - userAuthentication: []
        - playerRole: []
  /player-event-card/remove-market-from-collapsed/{marketId}:
    get:
      tags:
        - player-event-card
      summary: "Развернуть маркет"
      description: "Удалить запись из таблицы __user_collapsed_markets__"
      operationId: remove-market-from-collapsed
      produces:
        - application/json
      parameters:
        - name: marketId
          in: path
          description: "ID маркета, который необходимо развернуть"
          required: true
          type: integer
      responses:
        '200':
          description: "Успешно"
        '401':
          description: "Пользователь не авторизован"
      security:
        - userAuthentication: []
        - playerRole: []
  /player-search/get-search-result:
    post:
      tags:
        - player-search
      summary: "Получить результат поиска"
      description: "
        1. Получение объектов из массива __sportsFilter__ (значение __sportId__ входного параметра должно быть равно __Null__):\n
          а) Получить записи из таблицы __sports__ у которых в поле __name__ есть значение входного параметра __value__\n
          б) Наложить фильтр по __leagueId__\n
          в) Наложить фильтр по __teamId__\n
        2. Получение объектов из массива __leaguesFilter__ (значение __leagueId__ входного параметра должно быть равно __Null__):\n
          а) Получить записи из таблицы __leagues__ у которых в поле __name__ есть значение входного параметра __value__\n
          б) Наложить фильтр по __sportId__\n
          в) Наложить фильтр по __teamId__\n
        3. Получение объектов из массива __teamsFilter__ (значение __teamId__ входного параметра должно быть равно __Null__):\n
          а) Получить записи из таблицы __teams__ у которых в поле __name__ есть значение входного параметра __value__\n
          б) Наложить фильтр по __sportId__\n
          в) Наложить фильтр по __leagueId__\n
        4. Получение объектов из массива __eventsTable__:\n
          а) Получить записи из таблицы __events__ (значение в поле __active__ должно быть равно __1__)\n
          б) Джойн таблиц __sports__, __leagues__, __teams__ и __events_teams__\n
          в) Получить записи у которых в любом из полей __sport_name__, __league_name__, __event_name__ и __team_name__ есть значение входного параметра __value__\n
          г) Наложить фильтр по __sportId__\n
          д) Наложить фильтр по __leagueId__\n
          e) Наложить фильтр по __teamId__\n"
      operationId: get-result
      produces:
        - application/json
      parameters:
        - in: body
          name: playerSearchParams
          description: "Входные параметры поиска"
          required: true
          schema:
            $ref: '#/definitions/playerSearchParams'
      responses:
        '200':
          description: "Успешно"
          schema:
            $ref: '#/definitions/playerSearch'
      security:
        - playerLanguage: []
  /player-profile/get-player-data:
    get:
      tags:
        - player-profile
      summary: "Получить данные игрока"
      operationId: get-player-data
      produces:
        - application/json
      parameters: []
      responses:
        '200':
          description: "Успешно"
          schema:
            $ref: '#/definitions/playerData'
        '401':
          description: "Пользователь не авторизован"
      security:
        - userAuthentication: []
        - playerRole: []
  /player-profile/phone-number-change-request:
    post:
      tags:
        - player-profile
      summary: "Запрос смены номера телефона"
      description: "
        1. Использовать __player_id__ текущего пользователя\n
        2. Проверить корректность значения входного параметра эндпоинта. Если оно некорректно, то вернуть ошибку (__ошибка#1__)\n
        3. В таблице __users__ сравнить значение поля __phone__ со значением входного параметра __phone__. Если они совпадают, то вернуть ошибку (__ошибка#2__)\n
        4. Для текущего пользователя получить все записи в таблице __user_codes_verification__ со значениями в полях __status__ равным __1__ (__Отправлено__) и __type__ равным __1__ (__SMS__). Заменить у полученных записей значение в поле __status__ на __3__ (__Деактивировано__)\n
        5. Создать запись в таблице __user_codes_verification__:\n
          а) Значению __type__ присвоить __1__ (__SMS__)\n
          б) Значению __value__ присвоить значение входного параметра (__phone__)\n
          в) Значение __code__ присвоить случайное значение (восемь символов)\n
          г) Значению __status__ присвоить __0__ (__Ожидает отправки__)\n
        6. Сформировать объект по добавленному запросу на смену номера телефона и отправить его в ответе (см. Responses)\n"
      operationId: phone-number-change-request
      produces:
        - application/json
      parameters:
        - in: body
          name: phoneNumberChangeAdress
          description: "Новый номер телефона, который хочет установить игрок"
          required: true
          schema:
            $ref: '#/definitions/phoneNumberChangeAdress'
      responses:
        '200':
          description: "Успешно"
          schema:
            $ref: '#/definitions/phoneNumberChangeRequest'
        '400':
          description: "
            Ошибка в запросе:\n
              1. Некорректное значение в поле __Новый номер телефона__\n
              2. Старый и новый номер телефона совпадают\n"
        '401':
          description: "Пользователь не авторизован"
      security:
        - userAuthentication: []
        - playerRole: []
  /player-profile/confirm-phone-number-change:
    post:
      tags:
        - player-profile
      summary: "Подтверждение нового номера телефона"
      description: "
        1. Используя значение входного параметра эндпоинта (__phoneNumberChangeRequestId__) получить запись в таблице __user_codes_verification__\n
        2. Проверить корректность значения входного параметра эндпоинта (__code__) сравнив его со значением в таблице __user_codes_verification__. Если оно некорректно, то вернуть ошибку\n
        3. В таблице __users__ поменять значение поля __phone__ на значение __value__ из таблицы __user_codes_verification__\n
        4. Заменить у соответствующей записи таблицы __user_codes_verification__ значение в поле __status__ на __2__ (__Использовано__)\n"
      operationId: confirm-phone-number-change
      produces:
        - application/json
      parameters:
        - in: body
          name: phoneNumberChangeCode
          description: "Код подтверждения смены номера телефона"
          required: true
          schema:
            $ref: '#/definitions/phoneNumberChangeCode'
      responses:
        '200':
          description: "Успешно"
        '400':
          description: "Ошибка в запросе (некорректное значение в поле __Код потверждения__)"
        '401':
          description: "Пользователь не авторизован"
      security:
        - userAuthentication: []
        - playerRole: []
  /player-profile/email-change-request:
    post:
      tags:
        - player-profile
      summary: "Запрос смены email"
      description: "
        1. Использовать __player_id__ текущего пользователя\n
        2. Проверить корректность значения входного параметра эндпоинта. Если оно некорректно, то вернуть ошибку (__ошибка#1__)\n
        3. В таблице __users__ сравнить значение поля __email__ со значением входного параметра __email__. Если они совпадают, то вернуть ошибку (__ошибка#2__)\n
        4. Для текущего пользователя получить все записи в таблице __user_codes_verification__ со значениями в полях __status__ равным __1__ (__Отправлено__) и __type__ равным __0__ (__E-mail__). Заменить у полученных записей значение в поле __status__ на __3__ (__Деактивировано__)\n
        5. Создать запись в таблице __user_codes_verification__:\n
          а) Значению __type__ присвоить __0__ (__E-mail__)\n
          б) Значению __value__ присвоить значение входного параметра (__email__)\n
          в) Значение __code__ присвоить случайное значение (восемь символов)\n
          г) Значению __status__ присвоить __0__ (__Ожидает отправки__)\n
        6. Сформировать объект по добавленному запросу на смену email и отправить его в ответе (см. Responses)\n"
      operationId: email-change-request
      produces:
        - application/json
      parameters:
        - in: body
          name: emailChangeAdress
          description: "Новый адрес электроной почты, который хочет установить игрок"
          required: true
          schema:
            $ref: '#/definitions/emailChangeAdress'
      responses:
        '200':
          description: "Успешно"
          schema:
            $ref: '#/definitions/emailChangeRequest'
        '400':
          description: "
            Ошибка в запросе:\n
              1. Некорректное значение в поле __Электронная почта__\n
              2. Старый и новый адрес электронной почты совпадают\n"
        '401':
          description: "Пользователь не авторизован"
      security:
        - userAuthentication: []
        - playerRole: []
  /player-profile/confirm-email-change:
    post:
      tags:
        - player-profile
      summary: "Подтверждение новой email"
      description: "
        1. Используя значение входного параметра эндпоинта (__emailChangeRequestId__) получить запись в таблице __user_codes_verification__\n
        2. Проверить корректность значения входного параметра эндпоинта (__code__) сравнив его со значением в таблице __user_codes_verification__. Если оно некорректно, то вернуть ошибку\n
        3. В таблице __users__ поменять значение поля __email__ на значение __value__ из таблицы __user_codes_verification__\n
        4. Заменить у соответствующей записи таблицы __user_codes_verification__ значение в поле __status__ на __2__ (__Использовано__)\n"
      operationId: confirm-email-change
      produces:
        - application/json
      parameters:
        - in: body
          name: emailChangeCode
          description: "Код подтверждения смены адреса электронной почты"
          required: true
          schema:
            $ref: '#/definitions/emailChangeCode'
      responses:
        '200':
          description: "Успешно"
        '400':
          description: "Ошибка в запросе (некорректное значение в поле __Код потверждения__)"
        '401':
          description: "Пользователь не авторизован"
      security:
        - userAuthentication: []
        - playerRole: []
  /player-profile/switch-on-advertising-mails:
    get:
      tags:
        - player-profile
      summary: "Включить рекламные рассылки"
      description: "В таблице __user_theme__ значению поля __advertising_mails__ присвоить __true__"
      operationId: switch-on-advertising-mails
      produces:
        - application/json
      parameters: []
      responses:
        '200':
          description: "Успешно"
        '401':
          description: "Пользователь не авторизован"
      security:
        - userAuthentication: []
        - playerRole: []
  /player-profile/switch-off-advertising-mails:
    get:
      tags:
        - player-profile
      summary: "Выключить рекламные рассылки"
      description: "В таблице __user_theme__ значению поля __advertising_mails__ присвоить __false__"
      operationId: switch-of-advertising-mails
      produces:
        - application/json
      parameters: []
      responses:
        '200':
          description: "Успешно"
        '401':
          description: "Пользователь не авторизован"
      security:
        - userAuthentication: []
        - playerRole: []
  /player-profile/change-password:
    post:
      tags:
        - player-profile
      summary: "Смена пароля игрока"
      description: "
        1. Использовать __player_id__ текущего пользователя\n
        2. В таблице __users__ сравнить значение поля __password__ со значением __oldPassword__\n
          а) Если значения совпадают, то значению __password__ из таблицы __users__ присвоить значение __newPassword__ (проверить его корректность перед этим)\n
          б) Если значения не совпадают, то вернуть ошибку\n"
      operationId: change-password
      produces:
        - application/json
      parameters:
        - in: body
          name: changePassword
          description: "Старое и новое значение пароля игрока"
          required: true
          schema:
            $ref: '#/definitions/changePassword'
      responses:
        '200':
          description: "Успешно"
        '400':
          description: "
            Ошибка в запросе:\n
              1. Неверно указан старый пароль\n
              2. Некорректное значение в поле __Новый пароль__\n"
        '401':
          description: "Пользователь не авторизован"
      security:
        - userAuthentication: []
        - playerRole: []
  /player-profile/get-currencies-list:
    get:
      tags:
        - player-profile
      summary: "Получить список валют"
      description: "Необходимо возвращать валюты со значением в поле __is_primary__ таблицы __currencies__ равным __true__"
      operationId: get-currencies-list
      produces:
        - application/json
      parameters: []
      responses:
        '200':
          description: "Успешно"
          schema:
            $ref: '#/definitions/currenciesList'
        '401':
          description: "Пользователь не авторизован"
      security:
        - userAuthentication: []
        - playerRole: []
  /player-profile/set-currency/{currencyId}:
    get:
      tags:
        - player-profile
      summary: "Установить валюту игрока"
      description: "
        1. Проверить корректность входного параметра эндпоинта:\n
          а) Существование валюты с данным __id__ в таблице __currencies__\n
          б) Значение в поле __is_primary__ в таблице __currencies__ должно быть равно __true__\n
          в) Если какое-либо условие не выполнено, то возвращать ошибку (__ошибка#1__)\n
        2. В таблице __balances__ проверить значение поля __currency_id__:\n
          а) Если значение уже имеется, то вернуть ошибку (__ошибка#2__)\n
          б) Если значение равно __Null__, то перейти к шагу 3\n
        3. В таблице __balances__ поменять значение поля __currency_id__ на значение из входного параметра\n"
      operationId: set-currency
      produces:
        - application/json
      parameters:
        - name: currencyId
          in: path
          description: "ID валюты, которую нужно установить"
          required: true
          type: integer
      responses:
        '200':
          description: "Успешно"
        '400':
          description: "
            Ошибка в запросе:\n
              1. Выбрана некорректная валюта\n
              2. Валюта игрока уже выбрана\n"
        '401':
          description: "Пользователь не авторизован"
      security:
        - userAuthentication: []
        - playerRole: []
  /player-profile/get-bets-notifications-status:
    get:
      tags:
        - player-profile
      summary: "Получить статус отправки уведомлений о ставках"
      description: "Получить значение поля __bets_notifications_status__ в таблице __user_theme__"
      operationId: get-bets-notifications-sending-status
      produces:
        - application/json
      parameters: []
      responses:
        '200':
          description: "Успешно"
          schema:
            $ref: '#/definitions/playerBetsNotificationsStatus'
        '401':
          description: "Пользователь не авторизован"
      security:
        - userAuthentication: []
        - playerRole: []
  /player-profile/switch-bets-notifications-status/{status}:
    get:
      tags:
        - player-profile
      summary: "Переключить статус отправки уведомлений о ставках"
      description: "Изменить значение поля __bets_notifications_status__ в таблице __user_theme__"
      operationId: switch-bets-notifications-sending-status
      produces:
        - application/json
      parameters:
        - name: status
          in: path
          description: "Статус отправки сообщений о ставках, который необходимо включить. Константы: 0 - __Не получать уведомления о ставках__, 1 - __Получать уведомления о ставках__"
          enum:
            - 0
            - 1
          required: true
          type: integer
      responses:
        '200':
          description: "Успешно"
        '401':
          description: "Пользователь не авторизован"
      security:
        - userAuthentication: []
        - playerRole: []
  /player-history/get-bets-history:
    post:
      tags:
        - player-history
      summary: "Получить историю ставок игрока"
      operationId: get-bets-history
      produces:
        - application/json
      parameters:
        - in: body
          name: betsHistoryTableParams
          description: "Входные параметры таблицы"
          required: true
          schema:
            $ref: '#/definitions/betsHistoryTableParams'
      responses:
        '200':
          description: "Успешно"
          schema:
            $ref: '#/definitions/betsHistoryTable'
        '401':
          description: "Пользователь не авторизован"
      security:
        - userAuthentication: []
        - playerRole: []
        - playerLanguage: []
  /player-history/get-payment-history:
    post:
      tags:
        - player-history
      summary: "Получить историю платежей игрока"
      description: "
        1. Возвращать записи из таблицы __user_deposits__ со значением в поле __status__ равным__'2__ (__Оплачен__)\n
        2. Возвращать записи из таблицы __user_withdraws__ со значением в поле __status__ равным __4__ (__Деньги получены игроком__)\n"
      operationId: get-payment-history
      produces:
        - application/json
      parameters:
        - in: body
          name: paymentsHistoryTableParams
          description: "Входные параметры таблицы"
          required: true
          schema:
            $ref: '#/definitions/paymentsHistoryTableParams'
      responses:
        '200':
          description: "Успешно"
          schema:
            $ref: '#/definitions/paymentsHistoryTable'
        '401':
          description: "Пользователь не авторизован"
      security:
        - userAuthentication: []
        - playerRole: []
  /player-identification/get-identification-countries:
    get:
      tags:
        - player-identification
      summary: "Получить список стран в идентификации игрока"
      operationId: get-identification-countries
      produces:
        - application/json
      parameters: []
      responses:
        '200':
          description: "Успешно"
          schema:
            $ref: '#/definitions/playerIdentificationCountries'
        '401':
          description: "Пользователь не авторизован"
      security:
        - userAuthentication: []
        - playerRole: []
        - playerLanguage: []
  /player-identification/get-identification-cities/{countryId}:
    get:
      tags:
        - player-identification
      summary: "Получить список городов в идентификации игрока"
      operationId: get-identification-cities
      produces:
        - application/json
      parameters:
        - name: countryId
          in: path
          description: "ID страны, которую выбрал игрок"
          required: true
          type: integer
      responses:
        '200':
          description: "Успешно"
          schema:
            $ref: '#/definitions/playerIdentificationCities'
        '401':
          description: "Пользователь не авторизован"
      security:
        - userAuthentication: []
        - playerRole: []
        - playerLanguage: []
  /player-identification/get-identification-data:
    get:
      tags:
        - player-identification
      summary: "Получить идентификационные данные"
      operationId: get-identification-data
      produces:
        - application/json
      parameters: []
      responses:
        '200':
          description: "Успешно"
          schema:
            $ref: '#/definitions/playerIdentificationData'
        '401':
          description: "Пользователь не авторизован"
      security:
        - userAuthentication: []
        - playerRole: []
        - playerLanguage: []
  /player-identification/save-identification-data:
    post:
      tags:
        - player-identification
      summary: "Сохранить идентификационные данные"
      description: "
        1. Использовать __player_id__ текущего пользователя\n
        2. Выполнять только для тех игроков, у которых в таблице __users__ значение поля __identification_status__ равно __5__ (__Анкета не заполнена__)\n
        3. При успешном выполнении запроса в таблице __users__ значению поля __identification_status__ присвоить __1__ (__Не идентифицирован__)\n"
      operationId: save-identification-data
      produces:
        - application/json
      parameters:
        - in: body
          name: playerIdentificationDataForSave
          description: "Идентификационные данные игрока, которые необходимо сохранить"
          required: true
          schema:
            $ref: '#/definitions/playerIdentificationDataForSave'
      responses:
        '200':
          description: "Успешно"
        '400':
          description: "
            Ошибка в запросе:\n
              1. Некорректное значение идентификационного статуса игрока\n
              2. Некорректные значение в полях формы\n"
        '401':
          description: "Пользователь не авторизован"
      security:
        - userAuthentication: []
        - playerRole: []
  /player-identification/get-identification-request/{identificationRequestId}:
    get:
      tags:
        - player-identification
      summary: "Получить данные запроса на идентификацию"
      operationId: get-identification-request
      produces:
        - application/json
      parameters:
        - name: identificationRequestId
          in: path
          description: "ID запроса на идентификацию игрока, который необходимо получить"
          required: true
          type: integer
      responses:
        '200':
          description: "Успешно"
          schema:
            $ref: '#/definitions/playerIdentificationRequest'
        '400':
          description: "Запрос на идентификацию не найден"
        '401':
          description: "Пользователь не авторизован"
      security:
        - userAuthentication: []
        - playerRole: []
  /player-identification/send-identification-document:
    post:
      tags:
        - player-identification
      summary: "Отправить идентификационный документ"
      description: "
        1. Обновить запись в таблице __user_documents__:\n
          а) Проверить значение в поле __status__. Оно должны быть равно __0__ (__Ожидает загрузки__) или __1__ (__Загружен__). Если условие не соблюдается, то вернуть ошибку\n
          б) Значению __image__ в таблице присвоить значение ссылки на __image__ из входного параметра\n
          в) Значению __status__ в таблице присвоить значение __1__ (__Загружен__)\n
          г) Значению __uploaded_at__ в таблице присвоить значение текущего времени\n
        2. По входному параметру __identificationRequestId__ в таблице __user_documents__ получить все записи\n
        3. Для всех полученных записей получить значения __status__ и __type__\n
        4. Дополнительные операции с использованием полученных записей (см. __Пункт 2 и __3__):\n
          а) По входному параметру __identificationDocumentType__ в таблице __user_documents__ найти запись с таким же значением поля __type__ и со значением поля __status__ равным __3__ (__Отклонен__). Если такая запись найдена, то изменить значение поля __status__ для этой записи на __4__ (__Архив__)\n
          б) В таблице __user_documents__ найти записи со значением поля __status__ равным __0__ (__Ожидает загрузки__). Если ни одна запись не найдена, то в таблице __users__ параметру __identification_status__ для конкретного игрока (__user_id__) присвоить значение __3__ (__Проверить документы__)\n"
      operationId: send-identification-document
      consumes:
        - multipart/form-data
      produces:
        - application/json
      parameters:
        - name: identificationRequestId
          in: formData
          description: "ID запроса на идентификацию"
          required: true
          type: integer
        - name: identificationDocumentId
          in: formData
          description: "ID идентификационного документа"
          required: true
          type: integer
        - name: identificationDocumentType
          in: formData
          description: "Тип идентификационного документа. Варианты: 1 - __Паспорт__, 2 - __ID_карта__, 3 - __Водительское удостоверение__, 4 - __Селфи с паспортом и листом с датой и названием БК__, 5 - __Селфи с ID_картой__, 6 - __Банковская выписка или квиток ЖКХ__"
          enum:
            - 1
            - 2
            - 3
            - 4
            - 5
            - 6
          required: true
          type: integer
        - name: image
          in: formData
          description: "Изображение идентификационного документа"
          required: true
          type: file
      responses:
        '200':
          description: "Успешно"
        '400':
          description: "
            Ошибка в запросе:\n
              1. Невозможно заменить документ (некорректный статус загружаемого документа)\n
              2. Некорректное значение __Изображение документа__\n"
        '401':
          description: "Пользователь не авторизован"
      security:
        - userAuthentication: []
        - playerRole: []
  /player-payments/get-deposit-methods-list:
    get:
      tags:
        - player-payments
      summary: "Получить список способов пополнения"
      description: "Необходимо возвращать записи из таблицы __payment_aggregator__ со статусом __status=1__ (__Активен__) и значением в поле __is_deposit__ равным __true__"
      operationId: get-deposit-methods-list
      produces:
        - application/json
      parameters: []
      responses:
        '200':
          description: "Успешно"
          schema:
            $ref: '#/definitions/depositMethodsList'
        '401':
          description: "Пользователь не авторизован"
      security:
        - userAuthentication: []
        - playerRole: []
  /player-payments/get-withdraw-methods-list:
    get:
      tags:
        - player-payments
      summary: "Получить список способов выплат"
      description: "Необходимо возвращать записи из таблицы __payment_aggregator__ со статусом __status=1__ (__Активен__) и значением в поле __is_withdraw__ равным __true__"
      operationId: get-withdraw-methods-list
      produces:
        - application/json
      parameters: []
      responses:
        '200':
          description: "Успешно"
          schema:
            $ref: '#/definitions/withdrawMethodsList'
        '401':
          description: "Пользователь не авторизован"
        '403':
          description: "Пользователь не идентифицирован (Прим. значение в поле __identification_status != 4__)"
      security:
        - userAuthentication: []
        - playerRole: []
        - playerIdentificationStatus: []
  /player-payments/request-deposit:
    post:
      tags:
        - player-payments
      summary: "Оформить заявку на пополнение"
      description: "
        __I. Проверить правильность оформления заявки на пополение:__\n
          1. Проверить корректность значения входного параметра __payment_aggregator_id__ (__ошибка#1__)\n
            а) Получить все записи в таблице __payment_aggregator__\n
            б) Проверить существование записи с данным __id__, со статусом __status=1__ (__Активен__) и значением в поле __is_deposit__ равным __true__\n
          2. Проверить корректность значения входного параметра __amount__ при его наличии (__ошибка#2__)\n
            а) Если хотя бы одна из проверок не пройдена, то возвращать ошибку\n
        
        __II. Создать заявку на пополение (запись в таблице user_deposits):__\n
          1. __player_id__ = __player_id__ (MiddleWare)\n
          2. __payment_aggregator_id__ = значение входного параметра __payment_aggregator_id__\n
          3. __amount_currency_id__ = значение __currency_id__ для текущего пользователя\n
            а) Использовать __player_id__ текущего пользователя\n
            б) Получить соответствующую запись в таблице __balances__\n
            в) Получить значение __currency_id__\n
          4. __amount__ = значение входного параметра __amount__, либо __Null__ если данный входной параметр отсутствует\n
          5. __deposit_info__ = данные для конкретного плажета\n
            а) Получить запись в таблице __payment_aggregator__ со значением входного параметра __payment_aggregator_id__\n
            б) Получить соответствующее значение в поле __settings__\n
            в) Используя параметры платежного аггрегатора (__settings__) и данные заявки на пополнение сформировать объект и отправить его на сайт платежного аггрегатора\n
            г) Ответ от платежного аггрегатора записать в поле __deposit_info__\n
          6. __status__ = __0__ (__Новая__)\n
        
        __III. Отправить в ответе значение в поле deposit_info (см. Responses)__\n"
      operationId: request-deposit
      produces:
        - application/json
      parameters:
        - in: body
          name: requestDepositParams
          description: "Входные параметры заявки на пополнение"
          required: true
          schema:
            $ref: '#/definitions/requestDepositParams'
      responses:
        '200':
          description: "Успешно"
          schema:
            $ref: '#/definitions/depositInfo'
        '400':
          description: "
            Ошибка в запросе:\n
              1. Некорректный способ пополнения\n
              2. Некорректное значение в поле __Сумма пополнения__\n"
        '401':
          description: Пользователь не авторизован
      security:
        - userAuthentication: []
        - playerRole: []
  /player-payments/request-withdraw:
    post:
      tags:
        - player-payments
      summary: "Оформить заявку на выплату"
      description: "
        __I. Проверить идентификационный статус игрока:__\n
          1. Использовать __player_id__ текущего пользователя\n
          2. Получить запись в таблице __users__\n
          3. Значение в поле __identification_status__ должно быть равно __4__ (__Идентифицирован__)\n
          4. Если проверка не пройдена, то возвращать ошибку (__403__)\n
        
        __II. Проверить правильность оформления заявки на выплату:__\n
          1. Проверить отсутствие у игрока активных заявок на выплату (__ошибка#1__)\n
            а) Использовать __player_id__ текущего пользователя\n
            б) Получить соответствующие записи в таблице __user_withdraws__\n
            в) Проверить существование записи со статусом __status=0__ (__Новая__). Если запись найдена, то вернуть ошибку\n
          2. Проверить корректность значения входного параметра __payment_aggregator_id__ (__ошибка#2__)\n
            а) Получить все записи в таблице __payment_aggregator__\n
            б) Проверить существование записи с данным __id__, со статусом __status=1__ (__Активен__) и значением в поле __is_withdraw__ равным __true__\n
          3. Проверить корректность значения входного параметра __currency_id__ (__ошибка#3__)\n
            а) Получить все записи в таблице __currencies__\n
            б) Проверить существование записи с данным __id__\n
          4. Проверить корректность значения входного параметра __source__ (__ошибка#4__)\n
          5. Проверить корректность значения входного параметра __amount__ (__ошибка#5__)\n
            а) Использовать __player_id__ текущего пользователя\n
            б) Получить запись в таблице __balances__, получить соответствующее значение __value__ (сумма на балансе игрока)\n
            в) Значение входного параметра эндпоита (__amount__) должно быть меньше значения суммы на балансе игрока, если условие не выполняется - возвращать ошибку (__ошибка#6__)\n
            г) По значениею входного параметра эндпоинта (__currency_id__) получить запись в таблице __currencies__. Определить значение __min_withdraw__ у полученной записи (минимальная сумма выплаты)\n
            д) Значение входного параметра эндпоита (__amount__) должно быть больше значения минимальной суммы выплаты, если условие не выполняется - возвращать ошибку (__ошибка#7__)\n
          6. Если хотя бы одна из проверок не пройдена, то возвращать соответствующую ошибку\n
        
        __III. Создать транзакцию на списание денежных средств (запись в таблице user_transactions):__\n
          1. __balance_id__ = значение __balance_id__ для текущего пользователя\n
            а) Использовать __player_id__ текущего пользователя\n
            б) Получить соответствующую запись в таблице __balances__\n
            в) Получить значение __balance_id__\n
          2. __type__ = __1__ (__Вывод__)\n
          3. __value__ = значение входного параметра __amount__\n
        
        __IV. Создать заявку на выплату (запись в таблице user_withdraws):__\n
          1. __player_id__ = __player_id__ (MiddleWare)\n
          2. __payment_aggregator_id__ = значение входного параметра __payment_aggregator_id__\n
          3. __transaction_id__ = значение __id__ транзакции на списание денежных средств (см. __Пункт 3__)\n
          4. __amount_currency_id__ = значение __currency_id__ для текущего пользователя\n
            а) Использовать __player_id__ текущего пользователя\n
            б) Получить соответствующую запись в таблице __balances__\n
            в) Получить значение __currency_id__\n
          5. __outcome_amount_currency_id__ = значение валюты, в которой деньги будут отправлены с БК (зависит от типа оплаты)\n
          6. __source__ = значение входного параметра __source__\n
          7. __amount__ = значение входного параметра __amount__\n
          8. __outcome_amount__ = значение суммы, которая будет отправлена с БК (зависит от типа оплаты)\n
            а) Используя значение __amount_currency_id__ получить запись в таблице __currencies__, получить значение course (см. предыдущий пункт)\n
            б) Умножить значение __amount__ на значение полученное значение __course__ (это будет сумма, которая спишется с баланса игрока в рублях)\n
            в) Используя значение __outcome_amount_currency_id__ получить запись в таблице __currencies__, получить значение __course__\n
            г) Разделить значение суммы, которая спишется с баланса игрока в рублях, на полученное значение __course__ (см. предыдущий пункт)\n
          9. __status__ = __0__ (__Новая__)\n
        
        __V. Сформировать данные для выплаты:__\n
          1. Получить запись в таблице __payment_aggregator__ с значением входного параметра __payment_aggregator_id__\n
          2. Получить соответствующее значение в поле __settings__\n
          3. Используя параметры платежного аггрегатора (см. __Пункт 3Б__) и данные заявки на выплату (см. __Пункт 2__) сформировать объект отправить его на сайт платежного аггрегатора\n"
      operationId: request-withdraw
      produces:
        - application/json
      parameters:
        - in: body
          name: requestWithdrawParams
          description: "Входные параметры заявки на выплату"
          required: true
          schema:
            $ref: '#/definitions/requestWithdrawParams'
      responses:
        '200':
          description: "Успешно"
        '400':
          description: "
            Ошибка в запросе:\n
              1. В настоящий момент существует активная заявка на выплату\n
              2. Некорректный способ выплаты\n
              3. Некорректная валюта выплаты\n
              4. Некорректное значение в поле __Адрес кошелька__\n
              5. Некорректное значение в поле __Сумма выплаты__\n
              6. Недостаточно средств для выплаты\n
              7. Значение в поле __Сумма выплаты__ меньше минимально допустимого\n"
        '401':
          description: "Пользователь не авторизован"
        '403':
          description: "Пользователь не идентифицирован (Прим. значение в поле __identification_status != 4__)"
      security:
        - userAuthentication: []
        - playerRole: []
        - playerIdentificationStatus: []
  /player-referral/get-referral-list:
    get:
      tags:
        - player-referral
      summary: "Получить список рефералов игрока"
      description: "
        1. Использовать __player_id__ текущего пользователя\n
        2. Для формирования ответа сделать запрос в таблицу __users__ по полю __referrer_id__ и получить все соответствующие записи\n"
      operationId: get-referral-list
      produces:
        - application/json
      parameters: []
      responses:
        '200':
          description: "Успешно"
          schema:
            $ref: '#/definitions/referralList'
        '401':
          description: "Пользователь не авторизован"
      security:
        - userAuthentication: []
        - playerRole: []
  /player-referral/get-referral-report:
    get:
      tags:
        - player-referral
      summary: "Получить отчет по реферальной программе"
      description: "
        1. Использовать __player_id__ текущего пользователя\n
        2. Для формирования ответа сделать запрос в таблицу __referrals_money__ и получить все соответствующие записи\n"
      operationId: get-referral-report
      produces:
        - application/json
      parameters: []
      responses:
        '200':
          description: "Успешно"
          schema:
            $ref: '#/definitions/referralReport'
        '401':
          description: "Пользователь не авторизован"
      security:
        - userAuthentication: []
        - playerRole: []
securityDefinitions:
  userAuthentication:
    type: apiKey
    name: userHash
    in: query
    description: "Определение статуса авторизации пользователя"
  adminRole:
    type: apiKey
    name: userRole
    in: query
    description: "Определение роли пользователя (администратор)"
  playerRole:
    type: apiKey
    name: userRole
    in: query
    description: "Определение роли пользователя (игрок)"
  playerIdentificationStatus:
    type: apiKey
    name: userIdentificationStatus
    in: query
    description: "Определение статуса идентификации игрока"
  playerLanguage:
    type: apiKey
    name: languageId
    in: query
    description: "Определение текущего языка игрока"
definitions:
  user:
    type: object
    properties:
      username:
        type: string
      password:
        type: string
  userHash:
    type: object
    properties:
      userHash:
        type: string
  playerForAdd:
    type: object
    properties:
      email:
        type: string
      password:
        type: string
      refererHash:
        type: string
        description: "Hash с вшитым id игрока-реферера. Хранится в cookie после перехода по реферальной ссылке"
  passwordRecoveryAdress:
    type: object
    properties:
      email:
        type: string
      phone:
        type: string
  passwordRecoveryRequest:
    type: object
    properties:
      passwordRecoveryRequestId:
        type: integer
      passwordRecoveryRequestStatus:
        type: string
  passwordRecoveryCode:
    type: object
    properties:
      passwordRecoveryRequestId:
        type: integer
      code:
        type: string
  newPlayerPassword:
    type: object
    properties:
      passwordRecoveryRequestId:
        type: integer
      code:
        type: string
      value:
        type: string
  adminHeader:
    type: object
    properties:
      userName:
        type: string
  playerHeader:
    type: object
    properties:
      number:
        type: string
      name:
        type: string
      surname:
        type: string
      patronymic:
        type: string
      identificationStatus:
        type: integer
        description: "1 - \"Не идентифицирован\", 2 - \"Документы запрошены\", 3 - \"Проверить документы\", 4 - \"Идентифицирован\", 5 - \"Анкета не заполнена\""
        enum:
          - 1
          - 2
          - 3
          - 4
          - 5
      identificationRequestId:
        type: integer
      email:
        type: string
      isEmailConfirmed:
        type: boolean
      balanceId:
        type: integer
      balanceValue:
        type: number
      currencyId:
        type: integer
      currencyName:
        type: string
      currencyIcon:
        type: string
      isFormCompleted:
        type: boolean
        description: "
          1. Получить значение identification_status в таблице 'users'\n
          2. Если значение identification_status != 5, то значению isFormCompleted присвоить true\n
          3. Если значение identification_status = 5, то:\n
            а) Если значение текущего времени запроса превышает значение в поле created_at менее чем на 24 часа - значению isFormCompleted присвоить true\n
            б) Если значение текущего времени запроса превышает значение в поле created_at более чем на 24 часа - значению isFormCompleted присвоить false\n"
  supportRequestByEmail:
    type: object
    properties:
      email:
        type: string
      requestSubject:
        type: integer
        description: "1 - \"Регистрация, авторизация\", 2 - \"Денежные операции\", 3 - \"Личные данные\", 4 - \"Безопасность\", 5 - \"Ставки\", 6 - \"Личный кабинет\", 7 - \"Технические вопросы\""
        enum:
          - 1
          - 2
          - 3
          - 4
          - 5
          - 6
          - 7
      requestMessage:
        type: string
  headItemsSettingsList:
    type: object
    properties:
      tableName:
        type: string
      headItemsSettings:
        type: array
        items:
          $ref: '#/definitions/headItem'
  headItemsList:
    type: object
    properties:
      headItems:
        type: array
        items:
          $ref: '#/definitions/headItem'
  headItem:
    type: object
    properties:
      index:
        type: integer
      name:
        type: string
      columnName:
        type: string
      disabled:
        type: boolean
      width:
        type: integer
  headItemsWidthsList:
    type: object
    properties:
      tableName:
        type: string
      headItemsWidths:
        type: array
        items:
          $ref: '#/definitions/headItemWidth'
  headItemWidth:
    type: object
    properties:
      columnName:
        type: string
      width:
        type: integer
  adminSidebar:
    type: object
    properties:
      adminSidebarStatus:
        type: integer
        description: "0 - \"Развернуто\", 1 - \"Свернуто\""
        enum:
          - 0
          - 1
  adminEventsFilterParams:
    type: object
    properties:
      sports:
        type: array
        items:
          $ref: '#/definitions/filterSportIn'
      leagueName:
        type: string
      teamName:
        type: string
      riskGroups:
        type: array
        items:
          $ref: '#/definitions/filterRiskGroupIn'
      timeStatus:
        type: integer
        description: "1 - \"Line\", 2 - \"Live\""
        enum:
          - 1
          - 2
      active:
        type: integer
        description: "0 - \"Не на сайте\", 1 - \"На сайте\", 2 - \"Удалено\""
        enum:
          - 0
          - 1
          - 2
  filterSportIn:
    type: object
    properties:
      id:
        type: integer
  filterRiskGroupIn:
    type: object
    properties:
      id:
        type: integer
  adminEventsFilter:
    type: object
    properties:
      sports:
        type: array
        items:
          $ref: '#/definitions/filterSportOut'
      leagues:
        type: array
        items:
          $ref: '#/definitions/filterLeagueOut'
      events:
        type: array
        items:
          $ref: '#/definitions/filterEventOut'
      riskGroups:
        type: array
        items:
          $ref: '#/definitions/filterRiskGroupOut'
  filterSportOut:
    type: object
    properties:
      id:
        type: integer
      name:
        type: string
  filterLeagueOut:
    type: object
    properties:
      id:
        type: integer
      name:
        type: string
  filterEventOut:
    type: object
    properties:
      id:
        type: integer
      teams:
        type: array
        items:
          $ref: '#/definitions/team'
  team:
    type: object
    properties:
      id:
        type: integer
      name:
        type: string
      index:
        type: integer
  filterRiskGroupOut:
    type: object
    properties:
      id:
        type: integer
      name:
        type: string
  adminEventsTableParams:
    type: object
    properties:
      filterParams:
        $ref: '#/definitions/adminEventsFilterParams'
      pagerIn:
        $ref: '#/definitions/pagerIn'
  pagerIn:
    type: object
    properties:
      orders:
        type: array
        items:
          $ref: '#/definitions/order'
      count:
        type: integer
      number:
        type: integer
  order:
    type: object
    properties:
      name:
        type: string
      direction:
        type: string
        description: "Направление сортировки"
        enum:
          - asc
          - desc
  adminEventsTable:
    type: object
    properties:
      head:
        $ref: '#/definitions/headItemsList'
      notViewedEvents:
        type: object
        properties:
          eventOnSiteCount:
            type: integer
            description: "
              1. По user_id (MiddleWare), типу страницы page (Live или Line) найти запись в таблице 'user_pages_visits' со значением в поле tab=1 (\"На сайте\"). Примечание: смотри входные параметры эндпоинта!\n
              2. Получить значение visited_at\n
              3. По значению time_status (Live или Line), active=1 (\"На сайте\") найти записи в таблице 'events'\n
              4. Для каждой полученной записи получить значение send_on_site_at\n
              5. Посчитать количество записей, значение в поле send_on_site_at которых больше (позже) чем значение visited_at (см. пунт 2)\n
              6. Обновить значение в поле visited_at (см. пунт 2)\n"
          eventNotOnSiteCount:
            type: integer
            description: "
              1. По user_id (MiddleWare), типу страницы page (Live или Line) найти запись в таблице 'user_pages_visits' со значением в поле tab=0 (\"Не на сайте\"). Примечание: смотри входные параметры эндпоинта!\n
              2. Получить значение visited_at\n
              3. По значению time_status (Live или Line), active=0 (\"Не на сайте\") найти записи в таблице 'events'\n
              4. Для каждой полученной записи получить значение send_not_on_site_at\n
              5. Посчитать количество записей, значение в поле send_not_on_site_at которых больше (позже) чем значение visited_at (см. пунт 2)\n
              6. Обновить значение в поле visited_at (см. пунт 2)\n"
          eventDeleteCount:
            type: integer
            description: "
              1. По user_id (MiddleWare), типу страницы page (Live или Line) найти запись в таблице 'user_pages_visits' со значением в поле tab=2 (\"Удаленное\"). Примечание: смотри входные параметры эндпоинта!\n
              2. Получить значение visited_at\n
              3. По значению time_status (Live или Line), active=2 (\"Удаленное\") найти записи в таблице 'events'\n
              4. Для каждой полученной записи получить значение send_on_deleted_at\n
              5. Посчитать количество записей, значение в поле send_on_deleted_at которых больше (позже) чем значение visited_at (см. пунт 2)\n
              6. Обновить значение в поле visited_at (см. пунт 2)\n"
      events:
        type: array
        items:
          $ref: '#/definitions/adminEvent'
      pagerOut:
        $ref: '#/definitions/pagerOut'
  adminEvent:
    type: object
    properties:
      sportId:
        type: integer
      sportName:
        type: string
      sportIcon:
        type: string
      leagueId:
        type: integer
      leagueName:
        type: string
      leagueIcon:
        type: string
      eventId:
        type: integer
      teams:
        type: array
        items:
          $ref: '#/definitions/team'
      riskGroupId:
        type: integer
      riskGroupName:
        type: string
      riskGroupColor:
        type: string
      currentRisk:
        type: integer
      maxRisk:
        type: integer
      parserId:
        type: integer
      parserName:
        type: string
      eventLevel:
        type: integer
      margin:
        type: number
      startTime:
        type: integer
      currentScore:
        type: string
      isBlocked:
        type: boolean
      isStopped:
        type: boolean
  pagerOut:
    type: object
    properties:
      currentNumber:
        type: integer
      allNumber:
        type: integer
  sendEvents:
    type: object
    properties:
      events:
        type: array
        items:
          $ref: '#/definitions/sendEvent'
  sendEvent:
    type: object
    properties:
      id:
        type: integer
  riskGroupList:
    type: array
    items:
      $ref: '#/definitions/riskGroup'
  riskGroup:
    type: object
    properties:
      id:
        type: integer
      name:
        type: string
      color:
        type: string
  bettingStreamFilterParams:
    type: object
    properties:
      dateFrom:
        type: integer
      dateTo:
        type: integer
      sports:
        type: array
        items:
          $ref: '#/definitions/filterSportIn'
      leagueName:
        type: string
      teamName:
        type: string
      playerTypeId:
        type: integer
      timeStatus:
        type: integer
        description: "0 - \"Все\", 1 - \"Line\", 2 - \"Live\""
        enum:
          - 0
          - 1
          - 2
      type:
        type: integer
        description: "0 - \"Все\", 1 - \"Одиночная\", 2 - \"Экспресс\""
        enum:
          - 0
          - 1
          - 2
      countryName:
        type: string
      cityName:
        type: string
      adminAmount:
        type: number
  bettingStreamFilter:
    type: object
    properties:
      sports:
        type: array
        items:
          $ref: '#/definitions/filterSportOut'
      leagues:
        type: array
        items:
          $ref: '#/definitions/filterLeagueOut'
      events:
        type: array
        items:
          $ref: '#/definitions/filterEventOut'
      playerTypes:
        type: array
        items:
          $ref: '#/definitions/filterPlayerTypeOut'
  filterPlayerTypeOut:
    type: object
    properties:
      id:
        type: integer
      name:
        type: string
      color:
        type: string
  bettingStreamTableParams:
    type: object
    properties:
      filterParams:
        $ref: '#/definitions/bettingStreamFilterParams'
      pagerIn:
        $ref: '#/definitions/pagerIn'
  bettingStreamTable:
    type: object
    properties:
      head:
        $ref: '#/definitions/headItemsList'
      bets:
        type: array
        items:
          $ref: '#/definitions/betGeneral'
      pagerOut:
        $ref: '#/definitions/pagerOut'
  betGeneral:
    type: object
    properties:
      betId:
        type: integer
      date:
        type: integer
      adminAmount:
        type: number
        description: "
          1. По bet_id найти запись в таблице 'bets'\n
          2. Получить значение amount\n
          3. Получить значение currency_id\n
          4. По currency_id найти запись в таблице 'currencies' и получить значение course\n
          5. Умножить значение amount на значение course\n"
      betNumber:
        type: string
      expressOddValue:
        type: number
      status:
        type: integer
        description: "0 - \"Не рассчитана\", 1 - \"Выигрыш\", 2 - \"Проигрыш\""
        enum:
          - 0
          - 1
          - 2
      playerTypeId:
        type: integer
      playerTypeColor:
        type: string
      playerId:
        type: integer
      playerNumber:
        type: string
      name:
        type: string
      surname:
        type: string
      patronymic:
        type: string
      countryId:
        type: integer
      countryName:
        type: string
      cityId:
        type: integer
      cityName:
        type: string
      isExpress:
        type: boolean
      parts:
        type: array
        items:
          $ref: '#/definitions/betPart'
  betPart:
    type: object
    properties:
      sportId:
        type: integer
      sportName:
        type: string
      leagueId:
        type: integer
      leagueName:
        type: string
      eventId:
        type: integer
      teams:
        type: array
        items:
          $ref: '#/definitions/team'
      marketId:
        type: integer
      marketName:
        type: string
      outcomeId:
        type: integer
      outcomeTeam:
        type: string
      outcomeDst:
        type: string
      outcomeSubName:
        type: string
      startTime:
        type: integer
      oddId:
        type: integer
      oddValue:
        type: number
      status:
        type: integer
        description: "0 - \"Не рассчитана\", 1 - \"Выигрыш\", 2 - \"Проигрыш\""
        enum:
          - 0
          - 1
          - 2
      oddTime:
        type: integer
      oddScore:
        type: string
      isEventLive:
        type: boolean
  playerTypeList:
    type: array
    items:
      $ref: '#/definitions/playerType'
  playerType:
    type: object
    properties:
      id:
        type: integer
      name:
        type: string
      color:
        type: string
  paymentRequestsFilterParams:
    type: object
    properties:
      dateFrom:
        type: integer
      dateTo:
        type: integer
      withdrawStatus:
        type: integer
        description: "0 - \"Новые\", 1 - \"Одобренные\", 2 - \"Отклоненные\""
        enum:
          - 0
          - 1
          - 2
  paymentRequestsTableParams:
    type: object
    properties:
      filterParams:
        $ref: '#/definitions/paymentRequestsFilterParams'
      pagerIn:
        $ref: '#/definitions/pagerIn'
  paymentRequestsTable:
    type: object
    properties:
      head:
        $ref: '#/definitions/headItemsList'
      paymentRequests:
        type: array
        items:
          $ref: '#/definitions/paymentRequest'
      pagerOut:
        $ref: '#/definitions/pagerOut'
  paymentRequest:
    type: object
    properties:
      createdAt:
        type: integer
      updatedAt:
        type: integer
      withdrawId:
        type: integer
      playerId:
        type: integer
      number:
        type: string
      name:
        type: string
      surname:
        type: string
      patronymic:
        type: string
      countryId:
        type: integer
      countryName:
        type: string
      cityId:
        type: integer
      cityName:
        type: string
      ouctomeAmount:
        type: number
      ouctomeAmountСurrencyId:
        type: integer
      ouctomeAmountCurrencyName:
        type: string
      adminOuctomeAmount:
        type: number
        description: "
          1. По withdraw_id найти запись в таблице 'user_withdraws':\n
            а) Получить значение outcome_amount\n
            б) Получить значение outcome_amount_currency_id\n
          2. По outcome_amount_currency_id найти запись в таблице 'currencies':\n
            а) Получить значение course\n
          3. Умножить значение outcome_amount на значение course\n"
      balanceId:
        type: integer
      balanceValue:
        type: number
      balanceСurrencyId:
        type: integer
      balanceCurrencyName:
        type: string
      adminBalanceValue:
        type: number
        description: "
          1. По user_id найти запись в таблице 'balances':\n
            а) Получить значение value\n
            б) Получить значение currency_id\n
          2. По currency_id найти запись в таблице 'currencies':\n
            а) Получить значение course\n
          3. Умножить значение value на значение course\n"
      paymentAggregatorId:
        type: integer
      paymentAggregatorName:
        type: string
      playerProfit:
        type: number
        description: "
          1. По user_id найти записи в таблице 'bets' со статусами status=1 (\"Выигрыш\") и status=2 (\"Проигрыш\")\n
          2. Для каждой полученной записи:\n
            а) Получить значение amount\n
            б) Получить значение currency_id\n
            в) По currency_id найти запись в таблице 'currencies' и получить значение course\n
            г) Умножить значение amount на значение course\n
          3. Для каждой \"Выигрышной\" записи:\n
            а) Из значения express_odd_value вычесть 1\n
            б) Полученную разницу умножить новое значение amount (см. пунт 2Г)\n
          4. Сложить получившиеся результаты всех \"Выигрышных\" записей\n
          5. Сложить новые значения amount (см. пунт 2Г) всех \"Проигрышных\" записей\n
          6. Вычесть из суммы \"Выигрышных\" записей сумму \"Проигрышных\" записей\n"
      identificationStatus:
        type: integer
        description: "0 - \"Анкета не заполнена\", 1 - \"Не идентифицирован\", 2 - \"Документы запрошены\", 3 - \"Проверить документы\", 4 - \"Идентифицирован\""
        enum:
          - 0
          - 1
          - 2
          - 3
          - 4
      administratorId:
        type: integer
      administratorUsername:
        type: string
      rejectionReason:
        type: string
  rejectPaymentRequestParams:
    type: object
    properties:
      withdrawId:
        type: integer
      rejectionReason:
        type: string
  requestPlayerWithdrawDocumentsParams:
    type: object
    properties:
      withdrawId:
        type: integer
      userId:
        type: integer
      playerWithdrawDocuments:
        type: array
        items:
          $ref: '#/definitions/playerWithdrawDocument'
  playerWithdrawDocument:
    type: object
    properties:
      type:
        type: integer
        description: "1 - \"Паспорт\", 2 - \"ID_карта\", 3 - \"Водительское удостоверение\", 4 - \"Селфи с паспортом и листом с датой и названием БК\", 5 - \"Селфи с ID_картой\", 6 - \"Банковская выписка или квиток ЖКХ\""
        enum:
          - 1
          - 2
          - 3
          - 4
          - 5
          - 6
  completedEventsFilterParams:
    type: object
    properties:
      dateFrom:
        type: integer
      dateTo:
        type: integer
      sports:
        type: array
        items:
          $ref: '#/definitions/filterSportIn'
      leagueName:
        type: string
      teamName:
        type: string
  completedEventsFilter:
    type: object
    properties:
      sports:
        type: array
        items:
          $ref: '#/definitions/filterSportOut'
      leagues:
        type: array
        items:
          $ref: '#/definitions/filterLeagueOut'
      events:
        type: array
        items:
          $ref: '#/definitions/filterEventOut'
  completedEventsTableParams:
    type: object
    properties:
      filterParams:
        $ref: '#/definitions/completedEventsFilterParams'
      pagerIn:
        $ref: '#/definitions/pagerIn'
  completedEventsTable:
    type: object
    properties:
      head:
        $ref: '#/definitions/headItemsList'
      completedEvents:
        type: array
        items:
          $ref: '#/definitions/completedEvent'
      pagerOut:
        $ref: '#/definitions/pagerOut'
  completedEvent:
    type: object
    properties:
      startTime:
        type: integer
      reception:
        type: number
        description: "
          1. По event_id найти записи в таблице 'bets' со статусами status=1 (\"Выигрыш\") и status=2 (\"Проигрыш\")\n
          2. Для каждой полученной записи:\n
            а) Получить значение amount\n
            б) Получить соответствующие записи в связанной таблице 'bets_odds'\n
            в) Разделить значение amount на количество записей в 'bets_odds'\n
            г) Получить значение currency_id\n
            д) По currency_id найти запись в таблице 'currencies' и получить значение course\n
            е) Умножить новое значение amount (см. пунт 2В) на значение course\n
          3. Сложить полученные результаты\n"
      profit:
        type: number
        description: "
          1. По event_id найти записи в таблице 'bets' со статусами status=1 (\"Выигрыш\") и status=2 (\"Проигрыш\")\n
          2. Для каждой полученной записи:\n
            а) Получить значение amount\n
            б) Получить соответствующие записи в связанной таблице 'bets_odds'\n
            в) Разделить значение amount на количество записей в 'bets_odds'\n
            г) Получить значение currency_id\n
            д) По currency_id найти запись в таблице 'currencies' и получить значение course\n
            е) Умножить новое значение amount (см. пунт 2В) на значение course\n
          3. Для каждой \"Выигрышной\" записи:\n
            а) Из значения express_odd_value вычесть 1\n
            б) Полученную разницу умножить новое значение amount (см. пунт 2E)\n
          4. Сложить получившиеся результаты всех \"Выигрышных\" записей\n
          5. Сложить новые значения amount (см. пунт 2E) всех \"Проигрышных\" записей\n
          6. Вычесть из суммы \"Проигрышных\" записей сумму \"Выигрышных\" записей\n"
      selectionPercent:
        type: number
        description: "
          1. По event_id рассчитать profit (см. параметр 'profit')\n
          2. По event_id рассчитать reception (см. параметр 'reception')\n
          3. Разделить profit на reception\n
          4. Полученное значение умножить на 100%\n"
      sportId:
        type: integer
      sportName:
        type: string
      leagueId:
        type: integer
      leagueName:
        type: string
      eventId:
        type: integer
      teams:
        type: array
        items:
          $ref: '#/definitions/team'
      currentScore:
        type: string
  betAnalysisFilterParams:
    type: object
    properties:
      dateFrom:
        type: integer
      dateTo:
        type: integer
      sportId:
        type: integer
      sportCheck:
        type: boolean
      leagueId:
        type: integer
      leagueCheck:
        type: boolean
      countryId:
        type: integer
      countryCheck:
        type: boolean
      marketId:
        type: integer
      marketCheck:
        type: boolean
      outcomeId:
        type: integer
      outcomeCheck:
        type: boolean
      oddFrom:
        type: number
      oddTo:
        type: number
      oddCheck:
        type: boolean
      oddStep:
        type: integer
        description: "0 - \"0,1\", 1 - \"0,5\", 2 - \"1\""
        enum:
          - 0
          - 1
          - 2
      oddStepCheck:
        type: boolean
  betAnalysisFilter:
    type: object
    properties:
      sports:
        type: array
        items:
          $ref: '#/definitions/filterSportOut'
      leagues:
        type: array
        items:
          $ref: '#/definitions/filterLeagueOut'
      countries:
        type: array
        items:
          $ref: '#/definitions/filterCountryOut'
      markets:
        type: array
        items:
          $ref: '#/definitions/filterMarketOut'
      outcomes:
        type: array
        items:
          $ref: '#/definitions/filterOutcomeOut'
      oddFrom:
        type: number
      oddTo:
        type: number
  filterCountryOut:
    type: object
    properties:
      id:
        type: integer
      name:
        type: string
  filterMarketOut:
    type: object
    properties:
      id:
        type: integer
      name:
        type: string
  filterOutcomeOut:
    type: object
    properties:
      id:
        type: integer
      team:
        type: string
      dst:
        type: string
      subName:
        type: string
  betAnalysisTableParams:
    type: object
    properties:
      filterParams:
        $ref: '#/definitions/betAnalysisFilterParams'
      pagerIn:
        $ref: '#/definitions/pagerIn'
  betAnalysisTable:
    type: object
    properties:
      head:
        $ref: '#/definitions/headItemsList'
      betGroups:
        type: array
        items:
          $ref: '#/definitions/betGroup'
      pagerOut:
        $ref: '#/definitions/pagerOut'
  betGroup:
    type: object
    properties:
      sportId:
        type: integer
      sportName:
        type: string
      leagueId:
        type: integer
      leagueName:
        type: string
      marketId:
        type: integer
      marketName:
        type: string
      outcomeId:
        type: integer
      outcomeTeam:
        type: string
      outcomeDst:
        type: string
      outcomeSubName:
        type: string
      countryId:
        type: integer
      countryName:
        type: string
      oddFrom:
        type: number
      oddTo:
        type: number
      reception:
        type: number
        description: "
          1. По данным из 'betAnalysisFilterParams' cформировать группы ставок\n
          2. Для каждой группы ставок найти соответствующие записи в таблице 'bets' со статусами status=1 (\"Выигрыш\") и status=2 (\"Проигрыш\")\n
          3. Для каждой полученной записи:\n
            а) Получить значение amount\n
            б) Получить соответствующие записи в связанной таблице 'bets_odds'\n
            в) Разделить значение amount на количество записей в 'bets_odds'\n
            г) Получить значение currency_id\n
            д) По currency_id найти запись в таблице 'currencies' и получить значение course\n
            е) Умножить новое значение amount (см. пунт 3В) на значение course\n
          4. Сложить полученные результаты (для каждой группы ставок)\n"
      profit:
        type: number
        description: "
          1. По данным из 'betAnalysisFilterParams' cформировать группы ставок\n
          2. Для каждой группы ставок найти соответствующие записи в таблице 'bets' со статусами status=1 (\"Выигрыш\") и status=2 (\"Проигрыш\")\n
          3. Для каждой полученной записи:\n
            а) Получить значение amount\n
            б) Получить соответствующие записи в связанной таблице 'bets_odds'\n
            в) Разделить значение amount на количество записей в 'bets_odds'\n
            г) Получить значение currency_id\n
            д) По currency_id найти запись в таблице 'currencies' и получить значение course\n
            е.) Умножить новое значение amount (см. пунт 3В) на значение course\n
          4. Для каждой \"Выигрышной\" записи:\n
            а) Из значения express_odd_value вычесть 1\n
            б.) Полученную разницу умножить новое значение amount (см. пунт 3E)\n
          5. Сложить получившиеся результаты всех \"Выигрышных\" записей\n
          6. Сложить новые значения amount (см. пунт 3E) всех \"Проигрышных\" записей\n
          7. Вычесть из суммы \"Проигрышных\" записей сумму \"Выигрышных\" записей (для каждой группы ставок)\n"
      selectionPercent:
        type: number
        description: "
          1. По данным из 'betAnalysisFilterParams' cформировать группы ставок\n
          2. Для каждой группы ставок рассчитать profit (см. параметр 'profit')\n
          3. Для каждой группы ставок рассчитать reception (см. параметр 'reception')\n
          4. Разделить profit на reception (для каждой группы ставок)\n
          5. Полученное значение умножить на 100% (для каждой группы ставок)\n"
      averageBet:
        type: number
        description: "
          1. По данным из 'betAnalysisFilterParams' cформировать группы ставок\n
          2. Для каждой группы ставок найти соответствующие записи в таблице 'bets' со статусами status=0 (\"Не рассчитана\"), status=1 (\"Выигрыш\") и status=2 (\"Проигрыш\")\n
          3. Для каждой полученной записи:\n
            а) Получить значение amount\n
            б) Получить соответствующие записи в связанной таблице 'bets_odds'\n
            в) Разделить значение amount на количество записей в 'bets_odds'\n
            г) Получить значение currency_id\n
            д) По currency_id найти запись в таблице 'currencies' и получить значение course\n
            е) Умножить новое значение amount (см. пунт 3В) на значение course\n
          4. Сложить полученные результаты (для каждой группы ставок)\n
          5. Разделить сумму ставок в группе ставок (см. пунт 4) на количество соответствующих записей в таблице 'bets'\n"
      numberOfBets:
        type: integer
        description: "
          1. По данным из 'betAnalysisFilterParams' cформировать группы ставок\n
          2. Для каждой группы ставок посчитать количество соответствующих записей в таблице 'bets' со статусами status=0 (\"Не рассчитана\"), status=1 (\"Выигрыш\") и status=2 (\"Проигрыш\")\n"
  financialFlowAnalysisFilterParams:
    type: object
    properties:
      dateFrom:
        type: integer
      dateTo:
        type: integer
      countries:
        type: array
        items:
          $ref: '#/definitions/filterCountryIn'
      paymentAggregators:
        type: array
        items:
          $ref: '#/definitions/filterPaymentAggregatorIn'
      playerTypes:
        type: array
        items:
          $ref: '#/definitions/filterPlayerTypeIn'
  filterCountryIn:
    type: object
    properties:
      id:
        type: integer
  filterPaymentAggregatorIn:
    type: object
    properties:
      id:
        type: integer
  filterPlayerTypeIn:
    type: object
    properties:
      id:
        type: integer
  financialFlowAnalysisFilter:
    type: object
    properties:
      countries:
        type: array
        items:
          $ref: '#/definitions/filterCountryOut'
      paymentAggregators:
        type: array
        items:
          $ref: '#/definitions/filterPaymentAggregatorOut'
      playerTypes:
        type: array
        items:
          $ref: '#/definitions/filterPlayerTypeOut'
  filterPaymentAggregatorOut:
    type: object
    properties:
      id:
        type: integer
      name:
        type: string
  financialFlowAnalysisTableParams:
    type: object
    properties:
      filterParams:
        $ref: '#/definitions/financialFlowAnalysisFilterParams'
      pagerIn:
        $ref: '#/definitions/pagerIn'
  financialFlowAnalysisTable:
    type: object
    properties:
      head:
        $ref: '#/definitions/headItemsList'
      financialFlowsFromCountries:
        type: array
        items:
          $ref: '#/definitions/financialFlowFromCountry'
      pagerOut:
        $ref: '#/definitions/pagerOut'
  financialFlowFromCountry:
    type: object
    properties:
      countryId:
        type: integer
      countryName:
        type: string
      deposit:
        type: number
        description: "
          1. По country_id найти записи в таблице 'user_deposits' со статусом status=2 (\"Оплачено\")\n
          2. Для каждой полученной записи:\n
            а) Получить значение outcome_amount\n
            б) Получить значение outcome_amount_currency_id\n
            в) По outcome_amount_currency_id найти запись в таблице 'currencies' и получить значение course\n
            г) Умножить значение outcome_amount на значение course\n
          3. Сложить полученные результаты\n"
      withdraw:
        type: number
        description: "
          1. По country_id найти записи в таблице 'user_withdraws' со статусом status=4 (\"Деньги получены игроком\")\n
          2. Для каждой полученной записи:\n
            а) Получить значение outcome_amount\n
            б) Получить значение outcome_amount_currency_id\n
            в) По outcome_amount_currency_id найти запись в таблице 'currencies' и получить значение course\n
            г) Умножить значение outcome_amount на значение course\n
          3. Сложить полученные результаты\n"
      averageDeposit:
        type: number
        description: "
          1. По country_id найти записи в таблице 'user_deposits' со статусом status=2 (\"Оплачено\")\n
          2. Для каждой полученной записи:\n
            а) Получить значение outcome_amount\n
            б) Получить значение outcome_amount_currency_id\n
            в) По outcome_amount_currency_id найти запись в таблице 'currencies' и получить значение course\n
            г) Умножить значение outcome_amount на значение course\n
          3. Сложить полученные результаты\n
          4. Разделить сумму пополнений (см. пунт 3) на количество соответствующих записей в таблице 'user_deposits'\n"
      averageWithdraw:
        type: number
        description: "
          1. По country_id найти записи в таблице 'user_withdraws' со статусом status=4 (\"Деньги получены игроком\")\n
          2. Для каждой полученной записи:\n
            а) Получить значение outcome_amount\n
            б) Получить значение outcome_amount_currency_id\n
            в) По outcome_amount_currency_id найти запись в таблице 'currencies' и получить значение course\n
            г) Умножить значение outcome_amount на значение course\n
          3. Сложить полученные результаты\n
          4. Разделить сумму выплат (см. пунт 3) на количество соответствующих записей в таблице 'user_withdraws'\n"
      numberOfDeposits:
        type: integer
        description: "
          1. По country_id найти записи в таблице 'user_deposits' со статусом status=2 (\"Оплачено\")\n
          2. Посчитать количество полученных записей\n"
      numberOfWithdraws:
        type: integer
        description: "
          1. По country_id найти записи в таблице 'user_withdraws' со статусом status=4 (\"Деньги получены игроком\")\n
          2. Посчитать количество полученных записей\n"
      financialFlowsFromPaymentAggregators:
        type: array
        items:
          $ref: '#/definitions/financialFlowFromPaymentAggregator'
  financialFlowFromPaymentAggregator:
    type: object
    properties:
      paymentAggregatorId:
        type: integer
      paymentAggregatorName:
        type: string
      deposit:
        type: number
        description: "
          1. По payment_aggregator_id, country_id найти записи в таблице 'user_deposits' со статусом status=2 (\"Оплачено\")\n
          2. Для каждой полученной записи:\n
            а) Получить значение outcome_amount\n
            б) Получить значение outcome_amount_currency_id\n
            в) По outcome_amount_currency_id найти запись в таблице 'currencies' и получить значение course\n
            г) Умножить значение outcome_amount на значение course\n
          3. Сложить полученные результаты\n"
      withdraw:
        type: number
        description: "
          1. По payment_aggregator_id, country_id найти записи в таблице 'user_withdraws' со статусом status=4 (\"Деньги получены игроком\")\n
          2. Для каждой полученной записи:\n
            а) Получить значение outcome_amount\n
            б) Получить значение outcome_amount_currency_id\n
            в) По outcome_amount_currency_id найти запись в таблице 'currencies' и получить значение course\n
            г) Умножить значение outcome_amount на значение course\n
          3. Сложить полученные результаты\n"
      averageDeposit:
        type: number
        description: "
          1. По payment_aggregator_id, country_id найти записи в таблице 'user_deposits' со статусом status=2 (\"Оплачено\")\n
          2. Для каждой полученной записи:\n
            а) Получить значение outcome_amount\n
            б) Получить значение outcome_amount_currency_id\n
            в) По outcome_amount_currency_id найти запись в таблице 'currencies' и получить значение course\n
            г) Умножить значение outcome_amount на значение course\n
          3. Сложить полученные результаты\n
          4. Разделить сумму пополнений (см. пунт 3) на количество соответствующих записей в таблице 'user_deposits'\n"
      averageWithdraw:
        type: number
        description: "
          1. По payment_aggregator_id, country_id найти записи в таблице 'user_withdraws' со статусом status=4 (\"Деньги получены игроком\")\n
          2. Для каждой полученной записи:\n
            а) Получить значение outcome_amount\n
            б) Получить значение outcome_amount_currency_id\n
            в) По outcome_amount_currency_id найти запись в таблице 'currencies' и получить значение course\n
            г) Умножить значение outcome_amount на значение course\n
          3. Сложить полученные результаты\n
          4. Разделить сумму выплат (см. пунт 3) на количество соответствующих записей в таблице 'user_withdraws'\n"
      numberOfDeposits:
        type: integer
        description: "
          1. По payment_aggregator_id, country_id найти записи в таблице 'user_deposits' со статусом status=2 (\"Оплачено\")\n
          2. Посчитать количество полученных записей\n"
      numberOfWithdraws:
        type: integer
        description: "
          1. По payment_aggregator_id, country_id найти записи в таблице 'user_withdraws' со статусом status=4 (\"Деньги получены игроком\")\n
          2. Посчитать количество полученных записей\n"
      financialFlowsFromPlayerTypes:
        type: array
        items:
          $ref: '#/definitions/financialFlowFromPlayerType'
  financialFlowFromPlayerType:
    type: object
    properties:
      playerTypeId:
        type: integer
      playerTypeName:
        type: string
      playerTypeColor:
        type: string
      deposit:
        type: number
        description: "
          1. По player_type_id, payment_aggregator_id, country_id найти записи в таблице 'user_deposits' со статусом status=2 (\"Оплачено\")\n
          2. Для каждой полученной записи:\n
            а) Получить значение outcome_amount\n
            б) Получить значение outcome_amount_currency_id\n
            в) По outcome_amount_currency_id найти запись в таблице 'currencies' и получить значение course\n
            г) Умножить значение outcome_amount на значение course\n
          3. Сложить полученные результаты\n"
      withdraw:
        type: number
        description: "
          1. По player_type_id, payment_aggregator_id, country_id найти записи в таблице 'user_withdraws' со статусом status=4 (\"Деньги получены игроком\")\n
          2. Для каждой полученной записи:\n
            а) Получить значение outcome_amount\n
            б) Получить значение outcome_amount_currency_id\n
            в) По outcome_amount_currency_id найти запись в таблице 'currencies' и получить значение course\n
            г) Умножить значение outcome_amount на значение course\n
          3. Сложить полученные результаты\n"
      averageDeposit:
        type: number
        description: "
          1. По player_type_id, payment_aggregator_id, country_id найти записи в таблице 'user_deposits' со статусом status=2 (\"Оплачено\")\n
          2. Для каждой полученной записи:\n
            а) Получить значение outcome_amount\n
            б) Получить значение outcome_amount_currency_id\n
            в) По outcome_amount_currency_id найти запись в таблице 'currencies' и получить значение course\n
            г) Умножить значение outcome_amount на значение course\n
          3. Сложить полученные результаты\n
          4. Разделить сумму пополнений (см. пунт 3) на количество соответствующих записей в таблице 'user_deposits'\n"
      averageWithdraw:
        type: number
        description: "
          1. По player_type_id, payment_aggregator_id, country_id найти записи в таблице 'user_withdraws' со статусом status=4 (\"Деньги получены игроком\")\n
          2. Для каждой полученной записи:\n
            а) Получить значение outcome_amount\n
            б) Получить значение outcome_amount_currency_id\n
            в) По outcome_amount_currency_id найти запись в таблице 'currencies' и получить значение course\n
            г) Умножить значение outcome_amount на значение course\n
          3. Сложить полученные результаты\n
          4. Разделить сумму выплат (см. пунт 3) на количество соответствующих записей в таблице 'user_withdraws'\n"
      numberOfDeposits:
        type: integer
        description: "
          1. По player_type_id, payment_aggregator_id, country_id найти записи в таблице 'user_deposits' со статусом status=2 (\"Оплачено\")\n
          2. Посчитать количество полученных записей\n"
      numberOfWithdraws:
        type: integer
        description: "
          1. По player_type_id, payment_aggregator_id, country_id найти записи в таблице 'user_withdraws' со статусом status=4 (\"Деньги получены игроком\")\n
          2. Посчитать количество полученных записей\n"
  eventCalculationFilterParams:
    type: object
    properties:
      sports:
        type: array
        items:
          $ref: '#/definitions/filterSportIn'
      leagueName:
        type: string
      teamName:
        type: string
      betTimeStatus:
        type: integer
        description: "1 - \"Line\", 2 - \"Live\""
        enum:
          - 1
          - 2
  eventCalculationFilter:
    type: object
    properties:
      sports:
        type: array
        items:
          $ref: '#/definitions/filterSportOut'
      leagues:
        type: array
        items:
          $ref: '#/definitions/filterLeagueOut'
      events:
        type: array
        items:
          $ref: '#/definitions/filterEventOut'
  eventCalculationTableParams:
    type: object
    properties:
      filterParams:
        $ref: '#/definitions/eventCalculationFilterParams'
      pagerIn:
        $ref: '#/definitions/pagerIn'
  eventCalculationTable:
    type: object
    properties:
      head:
        $ref: '#/definitions/headItemsList'
      calculatedEvents:
        type: array
        items:
          $ref: '#/definitions/calculatedEvent'
      pagerOut:
        $ref: '#/definitions/pagerOut'
  calculatedEvent:
    type: object
    properties:
      sportId:
        type: integer
      sportName:
        type: string
      leagueId:
        type: integer
      leagueName:
        type: string
      eventId:
        type: integer
      teams:
        type: array
        items:
          $ref: '#/definitions/team'
      startTime:
        type: integer
      currentScore:
        type: string      
      cornersScore:
        type: string
      isCalculationComplete:
        type: boolean
  eventCalculationResult:
    type: object
    properties:
      eventId:
        type: integer
      isCalculationComplete:
        type: boolean
  eventResults:
    type: object
    properties:
      teams:
        type: array
        items:
          $ref: '#/definitions/teamExtra'
      currentScore:
        type: string
  teamExtra:
    type: object
    properties:
      id:
        type: integer
      name:
        type: string
      index:
        type: integer
      icon:
        type: string
  logsFilterParams:
    type: object
    properties:
      dateFrom:
        type: integer
      dateTo:
        type: integer
      admins:
        type: array
        items:
          $ref: '#/definitions/filterAdminIn'
      adminsActionLogs:
        type: array
        items:
          $ref: '#/definitions/filterAdminActionLog'
      adminsRoles:
        type: array
        items:
          $ref: '#/definitions/filterAdminRole'
  filterAdminIn:
    type: object
    properties:
      id:
        type: integer
  filterAdminActionLog:
    type: object
    properties:
      type:
        type: string
  filterAdminRole:
    type: object
    properties:
      value:
        type: string
  logsFilter:
    type: object
    properties:
      admins:
        type: array
        items:
          $ref: '#/definitions/filterAdminOut'
      adminActionTypes:
        type: array
        items:
          $ref: '#/definitions/filterAdminActionLog'
      adminRoles:
        type: array
        items:
          $ref: '#/definitions/filterAdminRole'
  filterAdminOut:
    type: object
    properties:
      id:
        type: integer
      username:
        type: string
      name:
        type: string
      surname:
        type: string
      patronymic:
        type: string
  logsTableParams:
    type: object
    properties:
      filterParams:
        $ref: '#/definitions/logsFilterParams'
      pagerIn:
        $ref: '#/definitions/pagerIn'
  logsTable:
    type: object
    properties:
      head:
        $ref: '#/definitions/headItemsList'
      logs:
        type: array
        items:
          $ref: '#/definitions/log'
      pagerOut:
        $ref: '#/definitions/pagerOut'
  log:
    type: object
    properties:
      date:
        type: integer
      adminId:
        type: integer
      adminUsername:
        type: string
      adminName:
        type: string
      adminSurname:
        type: string
      adminPatronymic:
        type: string
      sourceId:
        type: string
        description: "Массив source_id в текстовом формате"
      sourceType:
        type: integer
      actionType:
        type: string
      adminRoleValue:
        type: string
  slidersForGet:
    type: object
    properties:
      topSliders:
        type: array
        items:
          $ref: '#/definitions/topSliderForGet'
      sideSlider:
        type: object
        properties:
          id:
            type: integer
          type:
            type: integer
            description: "0 - \"Боковые баннеры\""
            enum:
              - 0
          positions:
            type: array
            items:
              $ref: '#/definitions/sideSliderPositionGet'
  topSliderForGet:
    type: object
    properties:
      id:
        type: integer
      type:
        type: integer
        description: "1 - \"1 Баннер\", 2 - \"2 баннера\", 3 - \"4 баннера\""
        enum:
          - 1
          - 2
          - 3
      sort:
        type: integer
      positions:
        type: array
        items:
          $ref: '#/definitions/topSliderPositionGet'
  topSliderPositionGet:
    type: object
    properties:
      sourceId:
        type: integer
      type:
        type: string
        enum:
          - banners
          - stocks
      title:
        type: string
      text:
        type: string
      url:
        type: string
      sportId:
        type: integer
      sportName:
        type: string
      sportIcon:
        type: string
      leagueId:
        type: integer
      leagueName:
        type: string
      leagueIcon:
        type: string
      eventId:
        type: integer
      startTime:
        type: integer
      teams:
        type: array
        items:
          $ref: '#/definitions/teamExtra'
      outcome1Id:
        type: integer
      odd1Value:
        type: number
      outcome2Id:
        type: integer
      odd2Value:
        type: number
      outcome3Id:
        type: integer
      odd3Value:
        type: number
      oddQuantity:
        type: integer
        description: "
          1. По event_id получить записи в таблице 'odds' со значением в поле is_stopped равным false и is_win равным null\n
          2. Рассчитать количество полученных записей\n"
      startAt:
        type: integer
      endAt:
        type: integer
      bannerTemplateId:
        type: integer
      bannerTemplateImage:
        type: string
      bannerImage:
        type: string
      positionNumber:
        type: integer
        description: "0 - \"1ый Баннер\", 1 - \"2ой баннер\", 2 - \"3ий баннер\", 3 - \"4ый баннер\""
        enum:
          - 0
          - 1
          - 2
          - 3
  sideSliderPositionGet:
    type: object
    properties:
      sourceId:
        type: integer
      type:
        type: string
        enum:
          - banners
          - stocks
      title:
        type: string
      text:
        type: string
      url:
        type: string
      sportId:
        type: integer
      sportName:
        type: string
      leagueId:
        type: integer
      leagueName:
        type: string
      eventId:
        type: integer
      startTime:
        type: integer
      teams:
        type: array
        items:
          $ref: '#/definitions/teamExtra'
      outcome1Id:
        type: integer
      odd1Value:
        type: number
      outcome2Id:
        type: integer
      odd2Value:
        type: number
      outcome3Id:
        type: integer
      odd3Value:
        type: number
      oddQuantity:
        type: integer
        description: "
          1. По event_id получить записи в таблице 'odds' со значением в поле is_stopped равным false и is_win равным null\n
          2. Рассчитать количество полученных записей\n"
      startAt:
        type: integer
      endAt:
        type: integer
      bannerTemplateId:
        type: integer
      bannerTemplateImage:
        type: string
      bannerImage:
        type: string
      positionNumber:
        type: integer
        description: "0 - \"1ый Баннер\", 1 - \"2ой баннер\", 2 - \"3ий баннер\""
        enum:
          - 0
          - 1
          - 2
  slidersForEdit:
    type: object
    properties:
      topSliders:
        type: array
        items:
          $ref: '#/definitions/topSliderForEdit'
      sideSlider:
        type: object
        properties:
          id:
            type: integer
          type:
            type: integer
            description: "0 - \"Боковые баннеры\""
            enum:
              - 0
          positions:
            type: array
            items:
              $ref: '#/definitions/sideSliderPositionEdit'
  topSliderForEdit:
    type: object
    properties:
      id:
        type: integer
      type:
        type: integer
        description: "1 - \"1 Баннер\", 2 - \"2 баннера\", 3 - \"4 баннера\""
        enum:
          - 1
          - 2
          - 3
      sort:
        type: integer
      positions:
        type: array
        items:
          $ref: '#/definitions/topSliderPositionEdit'
  topSliderPositionEdit:
    type: object
    properties:
      sourceId:
        type: integer
        description: "
          1. В зависимости от значения параметра type (таблица 'banners_stocks_sliders') возвращается ID из таблицы 'banners' или таблицы 'stocks'\n
          2. При использовании баннера или акции, необходимо в таблицах 'banners' или 'stocks' присвоить полю status значение 0 (\"Активен\")\n
          3. При замене старого баннера или акции, необходимо проверить используется ли этот баннер или акция в других слайдерах - если нет то присвоить полю status значение 1 (\"Деактивирован\")\n"
      type:
        type: string
        enum:
          - banners
          - stocks
      positionNumber:
        type: integer
        description: "0 - \"1ый Баннер\", 1 - \"2ой баннер\", 2 - \"3ий баннер\", 3 - \"4ый баннер\""
        enum:
          - 0
          - 1
          - 2
          - 3
  sideSliderPositionEdit:
    type: object
    properties:
      sourceId:
        type: integer
        description: "
          1. В зависимости от значения параметра type (таблица 'banners_stocks_sliders') возвращается ID из таблицы 'banners' или таблицы 'stocks'\n
          2. При использовании баннера или акции, необходимо в таблицах 'banners' или 'stocks' присвоить полю status значение 0 (\"Активен\")\n
          3. При замене старого баннера или акции, необходимо проверить используется ли этот баннер или акция в других слайдерах - если нет то присвоить полю status значение 1 (\"Деактивирован\")\n"
      type:
        type: string
        enum:
          - banners
          - stocks
      positionNumber:
        type: integer
        description: "0 - \"1ый Баннер\", 1 - \"2ой баннер\", 2 - \"3ий баннер\""
        enum:
          - 0
          - 1
          - 2
  bannerStockList:
    type: object
    properties:
      banners:
        type: array
        items:
          $ref: '#/definitions/bannerForBannerStockList'
      stocks:
        type: array
        items:
          $ref: '#/definitions/stockForBannerStockList'
  bannerForBannerStockList:
    type: object
    properties:
      id:
        type: integer
      type:
        type: integer
        description: "1 - \"1 Баннер\", 2 - \"2 баннера\", 3 - \"4 баннера\""
        enum:
          - 1
          - 2
          - 3
      title:
        type: string
      sportId:
        type: integer
      sportName:
        type: string
      sportIcon:
        type: string
      leagueId:
        type: integer
      leagueName:
        type: string
      leagueIcon:
        type: string
      eventId:
        type: integer
      startTime:
        type: integer
      teams:
        type: array
        items:
          $ref: '#/definitions/teamExtra'
      outcome1Id:
        type: integer
      odd1Value:
        type: number
      outcome2Id:
        type: integer
      odd2Value:
        type: number
      outcome3Id:
        type: integer
      odd3Value:
        type: number
      oddQuantity:
        type: integer
        description: "
          1. По event_id получить записи в таблице 'odds' со значением в поле is_stopped равным false и is_win равным null\n
          2. Рассчитать количество полученных записей\n"
      startAt:
        type: integer
      endAt:
        type: integer
      bannerTemplateId:
        type: integer
      bannerTemplateImage:
        type: string
  stockForBannerStockList:
    type: object
    properties:
      id:
        type: integer
      type:
        type: integer
        description: "1 - \"1 Баннер\", 2 - \"2 баннера\", 3 - \"4 баннера\""
        enum:
          - 1
          - 2
          - 3
      title:
        type: string
      title_en:
        type: string
      text:
        type: string
      text_en:
        type: string
      url:
        type: string
      startAt:
        type: integer
      endAt:
        type: integer
      bannerImage:
        type: string
  addBanner:
    type: object
    properties:
      type:
        type: integer
        description: "1 - \"1 Баннер\", 2 - \"2 баннера\", 3 - \"4 баннера\""
        enum:
          - 1
          - 2
          - 3
      title:
        type: string
      bannerTemplateId:
        type: integer
      eventId:
        type: integer
      startAt:
        type: integer
      endAt:
        type: integer
  bannerId:
    type: object
    properties:
      id:
        type: integer
  bannerFilterParams:
    type: object
    properties:
      sports:
        type: array
        items:
          $ref: '#/definitions/filterSportIn'
      leagueName:
        type: string
  bannerFilter:
    type: object
    properties:
      sports:
        type: array
        items:
          $ref: '#/definitions/filterSportOut'
      leagues:
        type: array
        items:
          $ref: '#/definitions/filterLeagueOut'
      events:
        type: array
        items:
          $ref: '#/definitions/filterEventOut'
  eventInfoToBanner:
    type: object
    properties:
      sportId:
        type: integer
      sportName:
        type: string
      sportIcon:
        type: string
      leagueId:
        type: integer
      leagueName:
        type: string
      leagueIcon:
        type: string
      startTime:
        type: integer
      teams:
        type: array
        items:
          $ref: '#/definitions/teamExtra'
      outcome1Id:
        type: integer
      odd1Value:
        type: number
      outcome2Id:
        type: integer
      odd2Value:
        type: number
      outcome3Id:
        type: integer
      odd3Value:
        type: number
      oddQuantity:
        type: integer
        description: "
          1. По event_id получить записи в таблице 'odds' со значением в поле is_stopped равным false и is_win равным null\n
          2. Рассчитать количество полученных записей\n"
  bannerTemplateList:
    type: array
    items:
      $ref: '#/definitions/bannerTemplate'
  bannerTemplate:
    type: object
    properties:
      id:
        type: integer
      name:
        type: string
      image:
        type: string
  editBanner:
    type: object
    properties:
      id:
        type: integer
      type:
        type: integer
        description: "1 - \"1 Баннер\", 2 - \"2 баннера\", 3 - \"4 баннера\""
        enum:
          - 1
          - 2
          - 3
      title:
        type: string
      bannerTemplateId:
        type: integer
      eventId:
        type: integer
      startAt:
        type: integer
      endAt:
        type: integer
  editStock:
    type: object
    properties:
      id:
        type: integer
      type:
        type: integer
        description: "1 - \"1 Баннер\", 2 - \"2 баннера\", 3 - \"4 баннера\""
        enum:
          - 1
          - 2
          - 3
      title:
        type: string
      title_en:
        type: string
      text:
        type: string
      text_en:
        type: string
      url:
        type: string
      startAt:
        type: integer
      endAt:
        type: integer
      isLanding:
        type: boolean
      landingImage:
        type: string
      bannerImage:
        type: string
  playerListFilterParams:
    type: object
    properties:
      registrationDate:
        type: integer
      playerId:
        type: integer
      name:
        type: string
      surname:
        type: string
      patronymic:
        type: string
      playerTypeId:
        type: integer
      status:
        type: integer
        description: "0 - \"Все\", 1 - \"Разблокирован\", 2 - \"Заблокирован\""
        enum:
          - 0
          - 1
          - 2
      email:
        type: string
      phone:
        type: string
      countryName:
        type: string
      cityName:
        type: string
      balanceFrom:
        type: number
      balanceTo:
        type: number
      efficiencyFrom:
        type: number
      efficiencyTo:
        type: number
      profitFrom:
        type: number
      profitTo:
        type: number
  playerListFilter:
    type: object
    properties:
      players:
        type: array
        items:
          $ref: '#/definitions/filterPlayerOut'
      playerTypes:
        type: array
        items:
          $ref: '#/definitions/filterPlayerTypeOut'
      countries:
        type: array
        items:
          $ref: '#/definitions/filterCountryOut'
      cities:
        type: array
        items:
          $ref: '#/definitions/filterCityOut'
  filterPlayerOut:
    type: object
    properties:
      id:
        type: integer
      name:
        type: string
      surname:
        type: string
      patronymic:
        type: string
      email:
        type: string
      phone:
        type: string
  filterCityOut:
    type: object
    properties:
      id:
        type: integer
      name:
        type: string
  playerListTableParams:
    type: object
    properties:
      filterParams:
        $ref: '#/definitions/playerListFilterParams'
      pagerIn:
        $ref: '#/definitions/pagerIn'
  playerListTable:
    type: object
    properties:
      head:
        $ref: '#/definitions/headItemsList'
      players:
        type: array
        items:
          $ref: '#/definitions/playerForPlayerListTable'
      pagerOut:
        $ref: '#/definitions/pagerOut'
  playerForPlayerListTable:
    type: object
    properties:
      id:
        type: integer
      number:
        type: string
      name:
        type: string
      surname:
        type: string
      patronymic:
        type: string
      registrationDate:
        type: integer
      lastLoginDate:
        type: integer
      birthday:
        type: integer
      balanceId:
        type: integer
      balanceValue:
        type: number
      currencyId:
        type: integer
      currencyName:
        type: string
      adminBalanceValue:
        type: number
        description: "
          1. По user_id найти запись в таблице 'balances':\n
            а) Получить значение value\n
            б) Получить значение currency_id\n
          2. По currency_id найти запись в таблице 'currencies':\n
            а) Получить значение course\n
          3. Умножить значение value на значение course\n"
      profit:
        type: number
        description: "
          1. По user_id найти записи в таблице 'bets' со статусами status=1 (\"Выигрыш\") и status=2 (\"Проигрыш\")\n
          2. Для каждой полученной записи:\n
            а) Получить значение amount\n
            б) Получить значение currency_id\n
            в) По currency_id найти запись в таблице 'currencies' и получить значение course\n
            г) Умножить значение amount на значение course\n
          3. Для каждой \"Выигрышной\" записи:\n
            а) Из значения express_odd_value вычесть 1\n
            б) Полученную разницу умножить на новое значение amount (см. Пункт 2Г)\n
          4. Сложить получившиеся результаты всех \"Выигрышных\" записей (см. Пункт 3Б)\n
          5. Сложить новые значения amount всех \"Проигрышных\" записей (см. Пункт 2Г)\n
          6. Вычесть из суммы \"Выигрышных\" записей сумму \"Проигрышных\" записей\n"
      efficiency:
        type: number
        description: "
          1. По user_id рассчитать reception:\n
            a) По user_id найти записи в таблице 'bets' со статусами status=0 (\"Не рассчитано\"), status=1 (\"Выигрыш\") и status=2 (\"Проигрыш\")\n
            б) Для каждой полученной записи получить значение amount\n
            в) Для каждой полученной записи получить значение currency_id\n
            г) По currency_id найти запись в таблице 'currencies' и получить значение course\n
            д) Умножить значение amount на значение course\n
            е) Сложить новые значения amount всех полученных записей (см. Пункт 1Д)\n
          2. По user_id рассчитать profit (см. параметр 'profit')\n
          3. Разделить profit на reception\n
          4. Полученное значение умножить на 100%\n"
      playerTypeId:
        type: integer
      playerTypeColor:
        type: string
      email:
        type: string
      phone:
        type: string
      countryId:
        type: integer
      countryName:
        type: string
      cityId:
        type: integer
      cityName:
        type: string
      status:
        type: integer
        description: "1 - \"Разблокирован\", 2 - \"Заблокирован\""
        enum:
          - 1
          - 2
  adminListFilterParams:
    type: object
    properties:
      admins:
        type: array
        items:
          $ref: '#/definitions/filterAdminIn'
      adminsRoles:
        type: array
        items:
          $ref: '#/definitions/filterAdminRole'
  adminListFilter:
    type: object
    properties:
      admins:
        type: array
        items:
          $ref: '#/definitions/filterAdminOut'
      adminRoles:
        type: array
        items:
          $ref: '#/definitions/filterAdminRole'
  adminListTableParams:
    type: object
    properties:
      filterParams:
        $ref: '#/definitions/adminListFilterParams'
      pagerIn:
        $ref: '#/definitions/pagerIn'
  adminListTable:
    type: object
    properties:
      head:
        $ref: '#/definitions/headItemsList'
      admins:
        type: array
        items:
          $ref: '#/definitions/adminForAdminListTable'
      pagerOut:
        $ref: '#/definitions/pagerOut'
  adminForAdminListTable:
    type: object
    properties:
      id:
        type: integer
      name:
        type: string
      surname:
        type: string
      patronymic:
        type: string
      registrationDate:
        type: integer
      adminRoleValue:
        type: string
      status:
        type: integer
        description: "1 - \"Разблокирован\", 2 - \"Заблокирован\""
        enum:
          - 1
          - 2
  adminRoleList:
    type: object
    properties:
      roles:
        type: array
        items:
          $ref: '#/definitions/filterAdminRole'
  adminForAdd:
    type: object
    properties:
      name:
        type: string
      surname:
        type: string
      patronymic:
        type: string
      adminRoleValue:
        type: string
      username:
        type: string
      password:
        type: string
  adminSportList:
    type: array
    items:
      $ref: '#/definitions/adminSport'
  adminSport:
    type: object
    properties:
      sportId:
        type: integer
      sportName:
        type: string
      sportIcon:
        type: string
      adminLeagues:
        type: array
        items:
          $ref: '#/definitions/adminLeague'
  adminLeague:
    type: object
    properties:
      leagueId:
        type: integer
      leagueName:
        type: string
      leagueIcon:
        type: string
      riskGroup:
        $ref: '#/definitions/riskGroup'
  
  

  playerIdentificationFilterParams:
    type: object
    properties:
      value:
        type: string
  playerIdentificationFilter:
    type: object
    properties:
      noIdentificationPlayers:
        type: array
        items:
          $ref: '#/definitions/filterNoIdentificationPlayer'
  filterNoIdentificationPlayer:
    type: object
    properties:
      id:
        type: integer
      name:
        type: string
      surname:
        type: string
      patronymic:
        type: string
  playerIdentificationTableParams:
    type: object
    properties:
      filterParams:
        $ref: '#/definitions/playerIdentificationFilterParams'
      pagerIn:
        $ref: '#/definitions/pagerIn'
  playerIdentificationTable:
    type: object
    properties:
      head:
        $ref: '#/definitions/headItemsList'
      identificationRequests:
        type: array
        items:
          $ref: '#/definitions/identificationRequest'
      pagerOut:
        $ref: '#/definitions/pagerOut'
  identificationRequest:
    type: object
    properties:
      identificationRequestId:
        type: integer
      identificationRequestCreatedAt:
        type: integer
      userDocumentUploadedAt:
        type: integer
        description: "
          1. По identification_request_id найти записи в таблице 'user_documents' со статусом status=1 (\"Загружен\")\n
          2. Найти запись с наибольшим uploaded_at\n
          3. Если по identification_request_id в таблице 'user_documents' не найдено записей со статусом status=1 (\"Загружен\"), то вернуть Null\n"
      playerId:
        type: integer
      number:
        type: string
      name:
        type: string
      surname:
        type: string
      patronymic:
        type: string
      registrationDate:
        type: integer
      birthday:
        type: integer
      countryId:
        type: integer
      countryName:
        type: string
      cityId:
        type: integer
      cityName:
        type: string
      identificationStatus:
        type: integer
        description: "3 - \"Проверить документы\""
        enum:
          - 3
  identificationDocuments:
    type: object
    properties:
      identificationDocuments:
        type: array
        items:
          $ref: '#/definitions/identificationDocument'
  identificationDocument:
    type: object
    properties:
      id:
        type: integer
      type:
        type: integer
        description: "1 - \"Паспорт\", 2 - \"ID_карта\", 3 - \"Водительское удостоверение\", 4 - \"Селфи с паспортом и листом с датой и названием БК\", 5 - \"Селфи с ID_картой\", 6 - \"Банковская выписка или квиток ЖКХ\""
        enum:
          - 1
          - 2
          - 3
          - 4
          - 5
          - 6
      status:
        type: integer
        description: "1 - \"Загружен\", 2 - \"Одобрен\""
        enum:
          - 1
          - 2
      createdAt:
        type: integer
      uploadedAt:
        type: integer
      approvedAt:
        type: integer  
  rejectIdentificationRequestParams:
    type: object
    properties:
      identificationRequestId:
        type: integer
      rejectionReason:
        type: string  
  
  
  
  
  requestPlayerIdentificationDocumentParams:
    type: object
    properties:
      userId:
        type: integer
      documentType:
        type: integer
        description: "1 - \"Паспорт\", 2 - \"ID_карта\", 3 - \"Водительское удостоверение\", 4 - \"Селфи с паспортом и листом с датой и названием БК\", 5 - \"Селфи с ID_картой\", 6 - \"Банковская выписка или квиток ЖКХ\""
        enum:
          - 1
          - 2
          - 3
          - 4
          - 5
          - 6

  eventFinancialData:
    type: object
    properties:
      sportName:
        type: string
      leagueName:
        type: string
      teams:
        type: array
        items:
          $ref: '#/definitions/team'
      reception:
        type: number
        description: "
          1. По event_id найти записи в таблице 'bets' со статусами status=1 (\"Выигрыш\") и status=2 (\"Проигрыш\")\n
          2. Для каждой полученной записи:\n
            а) Получить значение amount\n
            б) Получить соответствующие записи в связанной таблице 'bets_odds'\n
            в) Разделить значение amount на количество записей в 'bets_odds'\n
            г) Получить значение currency_id\n
            д) По currency_id найти запись в таблице 'currencies' и получить значение course\n
            е) Умножить новое значение amount (см. пунт 2В) на значение course\n
          3. Сложить полученные результаты\n"
      notCalculatedSingle:
        type: number
        description: "
          1. По event_id найти записи в таблице 'bets' со статусами status=0 (\"Не рассчитана\")\n
          2. Для каждой полученной записи:\n
            а) Получить значение amount\n
            б) Получить соответствующие записи в связанной таблице 'bets_odds'\n
            в) Разделить значение amount на количество записей в 'bets_odds'\n
            г) Получить значение currency_id\n
            д) По currency_id найти запись в таблице 'currencies' и получить значение course\n
            е) Умножить новое значение amount (см. пунт 2В) на значение course\n
          3. Сложить полученные результаты\n"
      profitSingle:
        type: number
        description: "
          1. По event_id найти записи в таблице 'bets' со статусами status=1 (\"Выигрыш\") и status=2 (\"Проигрыш\")\n
          2. Для каждой полученной записи:\n
            а) Получить значение amount\n
            б) Получить соответствующие записи в связанной таблице 'bets_odds'\n
            в) Разделить значение amount на количество записей в 'bets_odds'\n
            г) Получить значение currency_id\n
            д) По currency_id найти запись в таблице 'currencies' и получить значение course\n
            е) Умножить новое значение amount (см. пунт 2В) на значение course\n
          3. Для каждой \"Выигрышной\" записи:\n
            а) Из значения express_odd_value вычесть 1\n
            б) Полученную разницу умножить новое значение amount (см. пунт 2E)\n
          4. Сложить получившиеся результаты всех \"Выигрышных\" записей\n
          5. Сложить новые значения amount (см. пунт 2E) всех \"Проигрышных\" записей\n
          6. Вычесть из суммы \"Проигрышных\" записей сумму \"Выигрышных\" записей\n"
      notCalculatedExpress:
        type: number
      profitExpress:
        type: number
      isBlocked:
        type: boolean
      isStopped:
        type: boolean
  eventBettingStreamFilterParams:
    type: object
    properties:
      eventId:
        type: integer
      marketId:
        type: integer
      outcomeId:
        type: integer
      adminAmount:
        type: number
  eventBettingStreamFilter:
    type: object
    properties:
      markets:
        type: array
        items:
          $ref: '#/definitions/filterMarketOut'
      outcomes:
        type: array
        items:
          $ref: '#/definitions/filterOutcomeOut'
  eventBettingStreamTableParams:
    type: object
    properties:
      filterParams:
        $ref: '#/definitions/eventBettingStreamFilterParams'
      pagerIn:
        $ref: '#/definitions/pagerIn'
  eventBettingStreamTable:
    type: object
    properties:
      head:
        $ref: '#/definitions/headItemsList'
      eventBets:
        type: array
        items:
          $ref: '#/definitions/eventBet'
      pagerOut:
        $ref: '#/definitions/pagerOut'
  eventBet:
    type: object
    properties:
      betId:
        type: integer
      date:
        type: integer
      adminAmount:
        type: number
        description: "
          1. По bet_id найти запись в таблице 'bets'\n
          2. Получить значение amount\n
          3. Получить соответствующие записи в связанной таблице 'bets_odds'\n
          4. Разделить значение amount на количество записей в 'bets_odds'\n
          5. Получить значение currency_id\n
          6. По currency_id найти запись в таблице 'currencies' и получить значение course\n
          7. Умножить новое значение amount (см. пунт 4) на значение course\n"
      betNumber:
        type: string
      expressOddValue:
        type: number
      playerId:
        type: integer
      playerNumber:
        type: string
      name:
        type: string
      surname:
        type: string
      patronymic:
        type: string
      countryId:
        type: integer
      countryName:
        type: string
      cityId:
        type: integer
      cityName:
        type: string
      marketId:
        type: integer
      marketName:
        type: string
      outcomeId:
        type: integer
      outcomeTeam:
        type: string
      outcomeDst:
        type: string
      outcomeSubName:
        type: string
      oddId:
        type: integer
      oddValue:
        type: number
      oddIsWin:
        type: boolean
      status:
        type: integer
        description: "0 - \"Не рассчитана\", 1 - \"Выигрыш\", 2 - \"Проигрыш\""
        enum:
          - 0
          - 1
          - 2
      oddTime:
        type: integer
      oddScore:
        type: string
      isEventLive:
        type: boolean
  eventNotCalculatedBetsFilterParams:
    type: object
    properties:
      eventId:
        type: integer
  eventNotCalculatedBetsTableParams:
    type: object
    properties:
      filterParams:
        $ref: '#/definitions/eventNotCalculatedBetsFilterParams'
      pagerIn:
        $ref: '#/definitions/pagerIn'
  eventNotCalculatedBetsTable:
    type: object
    properties:
      head:
        $ref: '#/definitions/headItemsList'
      notCalculatedBets:
        type: array
        items:
          $ref: '#/definitions/eventNotCalculatedBet'
      pagerOut:
        $ref: '#/definitions/pagerOut'
  eventNotCalculatedBet:
    type: object
    properties:
      betId:
        type: integer
      date:
        type: integer
      adminAmount:
        type: number
        description: "
          1. По bet_id найти запись в таблице 'bets'\n
          2. Получить значение amount\n
          3. Получить соответствующие записи в связанной таблице 'bets_odds'\n
          4. Разделить значение amount на количество записей в 'bets_odds'\n
          5. Получить значение currency_id\n
          6. По currency_id найти запись в таблице 'currencies' и получить значение course\n
          7. Умножить новое значение amount (см. пунт 4) на значение course\n"
      betNumber:
        type: string
      expressOddValue:
        type: number
      playerId:
        type: integer
      playerNumber:
        type: string
      name:
        type: string
      surname:
        type: string
      patronymic:
        type: string
      countryId:
        type: integer
      countryName:
        type: string
      cityId:
        type: integer
      cityName:
        type: string
      marketId:
        type: integer
      marketName:
        type: string
      outcomeId:
        type: integer
      outcomeTeam:
        type: string
      outcomeDst:
        type: string
      outcomeSubName:
        type: string
      oddId:
        type: integer
      oddValue:
        type: number
      oddTime:
        type: integer
      oddScore:
        type: string
      isEventLive:
        type: boolean
  eventFinancialRisks:
    type: object
    properties:
      financialRisksForMarkets:
        type: array
        items:
          $ref: '#/definitions/financialRisksForMarket'
  financialRisksForMarket:
    type: object
    properties:
      marketId:
        type: integer
      marketName:
        type: string
      marketTableType:
        type: integer
      marketSort:
        type: integer
      financialRisksForOutcomes:
        type: array
        items:
          $ref: '#/definitions/financialRisksForOutcome'
  financialRisksForOutcome:
    type: object
    properties:
      marketId:
        type: integer
      outcomeId:
        type: integer
      outcomeTeam:
        type: string
      outcomeDst:
        type: string
      outcomeSubName:
        type: string
      riskValue:
        type: number
  eventCuts:
    type: object
    properties:
      maxValueAmount:
        type: number
      betsDelayValue:
        type: integer
      isOneBet:
        type: boolean
  updateEventCuts:
    type: object
    properties:
      eventId:
        type: integer
      maxValueAmount:
        type: number
      betsDelayValue:
        type: integer
      isOneBet:
        type: boolean
  playerInfo:
    type: object
    properties:
      id:
        type: integer
      number:
        type: string
      name:
        type: string
      surname:
        type: string
      patronymic:
        type: string
      status:
        type: integer
        description: "0 - \"Активен\", 1 - \"Заблокирован\""
        enum:
          - 0
          - 1
      countryId:
        type: integer
      countryName:
        type: string
      currencyId:
        type: integer
      currencyName:
        type: string
      registrationDate:
        type: integer
      deposit:
        type: number
        description: "
          1. По user_id найти записи в таблице 'user_deposits' со статусом status=2 (\"Оплачено\")\n
          2. Для каждой полученной записи:\n
            а) Получить значение outcome_amount\n
            б) Получить значение outcome_amount_currency_id\n
            в) По outcome_amount_currency_id найти запись в таблице 'currencies' и получить значение course\n
            г) Умножить значение outcome_amount на значение course\n
          3. Сложить полученные результаты\n"
      withdraw:
        type: number
        description: "
          1. По user_id найти записи в таблице 'user_withdraws' со статусом status=4 (\"Деньги получены игроком\")\n
          2. Для каждой полученной записи:\n
            а) Получить значение outcome_amount\n
            б) Получить значение outcome_amount_currency_id\n
            в) По outcome_amount_currency_id найти запись в таблице 'currencies' и получить значение course\n
            г) Умножить значение outcome_amount на значение course\n
          3. Сложить полученные результаты\n"
      profit:
        type: number
        description: "
          1. По user_id найти записи в таблице 'bets' со статусами status=1 (\"Выигрыш\") и status=2 (\"Проигрыш\")\n
          2. Для каждой полученной записи:\n 
            а) Получить значение amount\n
            б) Получить значение currency_id\n
            в) По currency_id найти запись в таблице 'currencies' и получить значение course\n
            г) Умножить значение amount на значение course\n
          3. Для каждой \"Выигрышной\" записи:\n
            а) Из значения express_odd_value вычесть 1\n
            б) Полученную разницу умножить на новое значение amount (см. Пункт 2Г)\n
          4. Сложить получившиеся результаты всех \"Выигрышных\" записей (см. Пункт 3Б)\n
          5. Сложить новые значения amount всех \"Проигрышных\" записей (см. Пункт 2Г)\n
          6. Вычесть из суммы \"Выигрышных\" записей сумму \"Проигрышных\" записей\n"
      inGame:
        type: number
        description: "
          1. По user_id найти записи в таблице 'bets' со статусами status=0 (\"Не рассчитана\")\n
          2. Для каждой полученной записи:\n
            а) Получить значение amount\n
            б) Получить значение currency_id\n
            в) По currency_id найти запись в таблице 'currencies' и получить значение course\n
            г) Умножить значение amount на значение course\n
          3. Сложить полученные результаты\n"
      balanceId:
        type: integer
      balanceValue:
        type: number
        description: "
          1. По user_id найти запись в таблице 'balances'\n
          2. Получить значение value\n
          3. Получить значение currency_id\n
          4. По currency_id найти запись в таблице 'currencies' и получить значение course\n
          5. Умножить значение value на значение course\n"
      playerSportsEfficiency:
        type: array
        items:
          $ref: '#/definitions/playerSportEfficiency'
  playerSportEfficiency:
    type: object
    properties:
      sportId:
        type: integer
      sportName:
        type: string
      playerSportReception:
        type: number
        description: "
          1. По user_id и sport_id найти записи в таблице 'bets' со статусами status=0 (\"Не рассчитана\"), status=1 (\"Выигрыш\") и status=2 (\"Проигрыш\")\n
          2. Для каждой полученной записи:\n
            а) Получить значение amount\n
            б) Получить значение currency_id\n
            в) По currency_id найти запись в таблице 'currencies' и получить значение course\n
            г) Умножить значение amount на значение course\n
          3. Сложить полученные результаты\n"
      playerSportInGame:
        type: number
        description: "
          1. По user_id и sport_id найти записи в таблице 'bets' со статусом status=0 (\"Не рассчитана\")\n
          2. Для каждой полученной записи:\n
            а) Получить значение amount\n
            б) Получить значение currency_id\n
            в) По currency_id найти запись в таблице 'currencies' и получить значение course\n
            г) Умножить значение amount на значение course\n
          3. Сложить полученные результаты\n"
      playerSportProfit:
        type: number
        description: "
          1. По user_id и sport_id найти записи в таблице 'bets' со статусами status=1 (\"Выигрыш\") и status=2 (\"Проигрыш\")\n
          2. Для каждой полученной записи:\n
            а) Получить значение amount\n
            б) Получить значение currency_id\n
            в) По currency_id найти запись в таблице 'currencies' и получить значение course\n
            г) Умножить значение amount на значение course\n
          3. Для каждой \"Выигрышной\" записи:\n
            а) Из значения express_odd_value вычесть 1\n
            б) Полученную разницу умножить на значение новое значение amount\n
          4. Сложить получившиеся результаты всех \"Выигрышных\" записей\n
          5. Сложить новые значения amount всех \"Проигрышных\" записей\n
          6. Вычесть из суммы \"Выигрышных\" записей сумму \"Проигрышных\" записей\n"
      playerSportSelectionPercent:
        type: number
        description: "
          1. По user_id и sport_id рассчитать playerSportProfit (см. параметр 'playerSportProfit')\n
          2. По user_id и sport_id рассчитать playerSportReception (см. параметр 'playerSportReception')\n
          3. Разделить playerSportProfit на playerSportReception\n
          4. Полученное значение умножить на 100%\n"
  playerForm:
    type: object
    properties:
      name:
        type: string
      surname:
        type: string
      patronymic:
        type: string
      birthday:
        type: integer
      email:
        type: string
      phone:
        type: string
      countryId:
        type: integer
      countryName:
        type: string
      cityId:
        type: integer
      cityName:
        type: string
      address:
        type: string
  playerProfitInTimeParams:
    type: object
    properties:
      playerId:
        type: integer
      dateFrom:
        type: integer
      dateTo:
        type: integer
  playerProfitInTime:
    type: object
    properties:
      playerProfitInDays:
        type: array
        items:
          $ref: '#/definitions/playerProfitInDay'
  playerProfitInDay:
    type: object
    properties:
      date:
        type: integer
      profit:
        type: number
        description: "
          1. По user_id и calculated_at (date) найти записи в таблице 'bets' со статусами status=1 (\"Выигрыш\") и status=2 (\"Проигрыш\")\n
          2. Для каждой полученной записи:\n
            а) Получить значение amount\n
            б) Получить значение currency_id\n
            в) По currency_id найти запись в таблице 'currencies' и получить значение course\n
            г) Умножить значение amount на значение course\n
          3. Для каждой \"Выигрышной\" записи:\n
            а) Из значения express_odd_value вычесть 1\n
            б) Полученную разницу умножить на новое значение amount (см. Пункт 2Г)\n
          4. Сложить получившиеся результаты всех \"Выигрышных\" записей (см. Пункт 3Б)\n
          5. Сложить новые значения amount всех \"Проигрышных\" записей (см. Пункт 2Г)\n
          6. Вычесть из суммы \"Выигрышных\" записей сумму \"Проигрышных\" записей\n"
  playerComments:
    type: object
    properties:
      playerComments:
        type: array
        items:
          $ref: '#/definitions/playerComment'
  playerComment:
    type: object
    properties:
      commentId:
        type: integer
      date:
        type: integer
      value:
        type: string
      adminId:
        type: integer
      adminUsername:
        type: string
      adminName:
        type: string
      adminSurname:
        type: string
      adminPatronymic:
        type: string
  savePlayerComment:
    type: object
    properties:
      playerId:
        type: integer
      value:
        type: string
  playerDepositsPayments:
    type: object
    properties:
      playerDeposits:
        type: array
        items:
          $ref: '#/definitions/playerDeposit'
      playerWithdraws:
        type: array
        items:
          $ref: '#/definitions/playerWithdraw'
  playerDeposit:
    type: object
    properties:
      paidDate:
        type: integer
      deposit:
        type: number
        description: "
          1. Запись в таблице 'user_deposits' должна быть со статусом status=2 (\"Оплачено\")\n
          2. Получить значение outcome_amount\n
          3. Получить значение outcome_amount_currency_id\n
          4. По outcome_amount_currency_id найти запись в таблице 'currencies' и получить значение course\n
          5. Умножить значение outcome_amount на значение course\n"
      paymentAggregatorId:
        type: integer
      paymentAggregatorName:
        type: string
      source:
        type: string
      status:
        type: integer
        description: "1 - \"Пополнение\""
        enum:
          - 1
  playerWithdraw:
    type: object
    properties:
      paidDate:
        type: integer
      withdraw:
        type: number
        description: "
          1. Запись в таблице 'user_withdraws' должна быть со статусом status=4 (\"Деньги получены игроком\")\n
          2. Получить значение outcome_amount\n
          3. Получить значение outcome_amount_currency_id\n
          4. По outcome_amount_currency_id найти запись в таблице 'currencies' и получить значение course\n
          5. Умножить значение outcome_amount на значение course\n"
      paymentAggregatorId:
        type: integer
      paymentAggregatorName:
        type: string
      source:
        type: string
      status:
        type: integer
        description: "2 - \"Вывод\""
        enum:
          - 2
  playerBetHistoryTableParams:
    type: object
    properties:
      playerId:
        type: integer
      pagerIn:
        $ref: '#/definitions/pagerIn'
  playerBetHistoryTable:
    type: object
    properties:
      head:
        $ref: '#/definitions/headItemsList'
      playerBets:
        type: array
        items:
          $ref: '#/definitions/playerBetGeneral'
      pagerOut:
        $ref: '#/definitions/pagerOut'
  playerBetGeneral:
    type: object
    properties:
      betId:
        type: integer
      date:
        type: integer
      adminAmount:
        type: number
        description: "
          1. По bet_id найти запись в таблице 'bets'\n
          2. Получить значение amount\n
          3. Получить значение currency_id\n
          4. По currency_id найти запись в таблице 'currencies' и получить значение course\n
          5. Умножить значение amount на значение course\n"
      number:
        type: string
      expressOddValue:
        type: number
      status:
        type: integer
        description: "0 - \"Не рассчитана\", 1 - \"Выигрыш\", 2 - \"Проигрыш\""
        enum:
          - 0
          - 1
          - 2
      countryId:
        type: integer
      countryName:
        type: string
      cityId:
        type: integer
      cityName:
        type: string
      isExpress:
        type: boolean
      parts:
        type: array
        items:
          $ref: '#/definitions/playerBetPart'
  playerBetPart:
    type: object
    properties:
      sportId:
        type: integer
      sportName:
        type: string
      leagueId:
        type: integer
      leagueName:
        type: string
      eventId:
        type: integer
      teams:
        type: array
        items:
          $ref: '#/definitions/team'
      marketId:
        type: integer
      marketName:
        type: string
      outcomeId:
        type: integer
      outcomeTeam:
        type: string
      outcomeDst:
        type: string
      outcomeSubName:
        type: string
      startTime:
        type: integer
      oddId:
        type: integer
      oddValue:
        type: number
      status:
        type: integer
        description: "0 - \"Не рассчитана\", 1 - \"Выигрыш\", 2 - \"Проигрыш\""
        enum:
          - 0
          - 1
          - 2
      oddTime:
        type: integer
      oddScore:
        type: string
      isEventLive:
        type: boolean
  playerBetForEdit:
    type: object
    properties:
      betId:
        type: integer
      amount:
        type: number
      currencyId:
        type: integer
      currencyName:
        type: string
      currencyCourse:
        type: number
      adminAmount:
        type: number
        description: "
          1. По bet_id найти запись в таблице 'bets'\n
          2. Получить значение amount\n
          3. Получить значение currency_id\n
          4. По currency_id найти запись в таблице 'currencies' и получить значение course\n
          5. Умножить значение amount на значение course\n"
      number:
        type: string
      expressOddValue:
        type: number
      status:
        type: integer
        description: "0 - \"Не рассчитана\", 1 - \"Выигрыш\", 2 - \"Проигрыш\""
        enum:
          - 0
          - 1
          - 2
      isExpress:
        type: boolean
      parts:
        type: array
        items:
          $ref: '#/definitions/playerBetForEditPart'
  playerBetForEditPart:
    type: object
    properties:
      sportId:
        type: integer
      sportName:
        type: string
      leagueId:
        type: integer
      leagueName:
        type: string
      eventId:
        type: integer
      teams:
        type: array
        items:
          $ref: '#/definitions/team'
      marketId:
        type: integer
      marketName:
        type: string
      outcomeId:
        type: integer
      outcomeTeam:
        type: string
      outcomeDst:
        type: string
      outcomeSubName:
        type: string
      oddId:
        type: integer
      oddValue:
        type: number
      status:
        type: integer
        description: "0 - \"Не рассчитана\", 1 - \"Выигрыш\", 2 - \"Проигрыш\""
        enum:
          - 0
          - 1
          - 2
      isEventLive:
        type: boolean
  playerBetForSave:
    type: object
    properties:
      betId:
        type: integer
      amount:
        type: number
      parts:
        type: array
        items:
          $ref: '#/definitions/playerBetForSavePart'
  playerBetForSavePart:
    type: object
    properties:
      oddId:
        type: integer
      oddValue:
        type: number
      status:
        type: integer
        description: "0 - \"Не рассчитана\", 1 - \"Выигрыш\", 2 - \"Проигрыш\""
        enum:
          - 0
          - 1
          - 2
  playerCuts:
    type: object
    properties:
      cuts:
        type: array
        items:
          $ref: '#/definitions/playerCut'
  playerCut:
    type: object
    properties:
      id:
        type: integer
      minValueAmount:
        type: number
      maxValueAmount:
        type: number
      maxValuePercent:
        type: number
      oddsValue:
        type: number
      betsDelayValue:
        type: integer
      delayBetweenBetsValue:
        type: integer
      sportId:
        type: integer
      sportName:
        type: string
      leagueId:
        type: integer
      leagueName:
        type: string
      marketId:
        type: integer
      marketName:
        type: string
  playerCutsFilterParams:
    type: object
    properties:
      sportId:
        type: integer
      leagueId:
        type: integer
      marketId:
        type: integer
  playerCutsFilter:
    type: object
    properties:
      sports:
        type: array
        items:
          $ref: '#/definitions/filterSportOut'
      leagues:
        type: array
        items:
          $ref: '#/definitions/filterLeagueOut'
      markets:
        type: array
        items:
          $ref: '#/definitions/filterMarketOut'
  editPlayerCut:
    type: object
    properties:
      id:
        type: integer
      minValueAmount:
        type: number
      maxValueAmount:
        type: number
      maxValuePercent:
        type: number
      oddsValue:
        type: number
      betsDelayValue:
        type: integer
      delayBetweenBetsValue:
        type: integer
      sportId:
        type: integer
      leagueId:
        type: integer
      marketId:
        type: integer
  addPlayerCut:
    type: object
    properties:
      playerId:
        type: integer
      minValueAmount:
        type: number
      maxValueAmount:
        type: number
      maxValuePercent:
        type: number
      oddsValue:
        type: number
      betsDelayValue:
        type: integer
      delayBetweenBetsValue:
        type: integer
      sportId:
        type: integer
      leagueId:
        type: integer
      marketId:
        type: integer
  infoByPlayer:
    type: object
    properties:
      id:
        type: integer
      number:
        type: string
      countryId:
        type: integer
      countryName:
        type: string
      cityId:
        type: integer
      cityName:
        type: string
      registrationDate:
        type: integer
      profit:
        type: number
        description: "
          1. По user_id найти записи в таблице 'bets' со статусами status=1 (\"Выигрыш\") и status=2 (\"Проигрыш\")\n
          2. Для каждой полученной записи:\n
            а) Получить значение amount\n
            б) Получить значение currency_id\n
            в) По currency_id найти запись в таблице 'currencies' и получить значение course\n
            г) Умножить значение amount на значение course\n
          3. Для каждой \"Выигрышной\" записи:\n
            а) Из значения express_odd_value вычесть 1\n
            б) Полученную разницу умножить на новое значение amount (см. Пункт 2Г)\n
          4. Сложить получившиеся результаты всех \"Выигрышных\" записей (см. Пункт 3Б)\n
          5. Сложить новые значения amount всех \"Проигрышных\" записей (см. Пункт 2Г)\n
          6. Вычесть из суммы \"Выигрышных\" записей сумму \"Проигрышных\" записей\n"
  infoByBet:
    type: object
    properties:
      betId:
        type: integer
      date:
        type: integer
      adminAmount:
        type: number
        description: "
          1. По bet_id найти запись в таблице 'bets'\n
          2. Получить значение amount\n
          3. Получить значение currency_id\n
          4. По currency_id найти запись в таблице 'currencies' и получить значение course\n
          5. Умножить значение amount на значение course\n"
      betNumber:
        type: string
      expressOddValue:
        type: number
      playerId:
        type: integer
      playerNumber:
        type: string
      name:
        type: string
      surname:
        type: string
      patronymic:
        type: string
      countryId:
        type: integer
      countryName:
        type: string
      cityId:
        type: integer
      cityName:
        type: string
      isExpress:
        type: boolean
      parts:
        type: array
        items:
          $ref: '#/definitions/infoByBetPart'
  infoByBetPart:
    type: object
    properties:
      sportId:
        type: integer
      sportName:
        type: string
      leagueId:
        type: integer
      leagueName:
        type: string
      eventId:
        type: integer
      teams:
        type: array
        items:
          $ref: '#/definitions/team'
      marketId:
        type: integer
      marketName:
        type: string
      outcomeId:
        type: integer
      outcomeTeam:
        type: string
      outcomeDst:
        type: string
      outcomeSubName:
        type: string
      oddValue:
        type: number
      oddTime:
        type: integer
      oddScore:
        type: string
      isEventLive:
        type: boolean
  infoByEvent:
    type: object
    properties:
      sportId:
        type: integer
      sportName:
        type: string
      leagueId:
        type: integer
      leagueName:
        type: string
      eventId:
        type: integer
      teams:
        type: array
        items:
          $ref: '#/definitions/team'
      timeStatus:
        type: integer
        description: "1 - \"Line\", 2 - \"Live\""
        enum:
          - 1
          - 2
      active:
        type: integer
        description: "0 - \"Не на сайте\", 1 - \"На сайте\", 2 - \"Удалено\""
        enum:
          - 0
          - 1
          - 2
      riskGroupId:
        type: integer
      riskGroupName:
        type: string
      riskGroupColor:
        type: string
      currentRisk:
        type: integer
      maxRisk:
        type: integer
      parserId:
        type: integer
      parserName:
        type: string
      eventLevel:
        type: integer
      margin:
        type: number
      startTime:
        type: integer
      currentScore:
        type: string
      isBlocked:
        type: boolean
      isStopped:
        type: boolean
  languagesList:
    type: array
    items:
      $ref: '#/definitions/language'
  language:
    type: object
    properties:
      id:
        type: integer
      code:
        type: string
      name:
        type: string
      icon:
        type: string
  sportsNamesList:
    type: array
    items:
      $ref: '#/definitions/sportNamesList'
  sportNamesList:
    type: object
    properties:
      sportId:
        type: integer
      oddscpKey:
        type: string
      names:
        type: array
        items:
          $ref: '#/definitions/sportName'
  sportName:
    type: object
    properties:
      languageId:
        type: integer
      name:
        type: string
  leaguesNamesList:
    type: array
    items:
      $ref: '#/definitions/leaguesNamesListForSport'
  leaguesNamesListForSport:
    type: object
    properties:
      sportId:
        type: integer
      sportName:
        type: string
      leagues:
        type: array
        items:
          $ref: '#/definitions/leagueNamesList'
  leagueNamesList:
    type: object
    properties:
      leagueId:
        type: integer
      oddscpKey:
        type: string
      names:
        type: array
        items:
          $ref: '#/definitions/leagueName'
  leagueName:
    type: object
    properties:
      languageId:
        type: integer
      name:
        type: string
  teamsNamesList:
    type: array
    items:
      $ref: '#/definitions/teamsNamesListForSport'
  teamsNamesListForSport:
    type: object
    properties:
      sportId:
        type: integer
      sportName:
        type: string
      teams:
        type: array
        items:
          $ref: '#/definitions/teamNamesList'
  teamNamesList:
    type: object
    properties:
      teamId:
        type: integer
      oddscpKey:
        type: string
      names:
        type: array
        items:
          $ref: '#/definitions/teamName'
  teamName:
    type: object
    properties:
      languageId:
        type: integer
      name:
        type: string
  sportTranslation:
    type: object
    properties:
      sportId:
        type: integer
      languageId:
        type: integer
      name:
        type: string
  leagueTranslation:
    type: object
    properties:
      leagueId:
        type: integer
      languageId:
        type: integer
      name:
        type: string
  teamTranslation:
    type: object
    properties:
      teamId:
        type: integer
      languageId:
        type: integer
      name:
        type: string
  playerTheme:
    type: object
    properties:
      themeType:
        type: integer
        description: "0 - \"Light\", 1 - \"Dark\""
        enum:
          - 0
          - 1
      languageId:
        type: integer
      sidebarStatus:
        type: integer
        description: "0 - \"Развернуто\", 1 - \"Свернуто\""
        enum:
          - 0
          - 1
      basketStatus:
        type: integer
        description: "0 - \"Развернуто\", 1 - \"Свернуто\""
        enum:
          - 0
          - 1
      oddsFormat:
        type: integer
        description: "0 - \"Десятичный формат\", 1 - \"Дробный формат\", 2 - \"Американский формат\", 3 - \"Гонконгский формат\""
        enum:
          - 0
          - 1
          - 2
          - 3
  playerEventsFilterParams:
    type: object
    properties:
      sportId:
        type: integer
      leagueId:
        type: integer
      eventId:
        type: integer
      timeStatus:
        type: integer
        description: "1 - \"Line\", 2 - \"Live\""
        enum:
          - 1
          - 2
      isPreview:
        type: boolean
  playerEventsTableParams:
    type: object
    properties:
      filterParams:
        $ref: '#/definitions/playerEventsFilterParams'
      pagerIn:
        $ref: '#/definitions/pagerIn'
  playerEventsTable:
    type: object
    properties:
      head:
        $ref: '#/definitions/headItemsList'
      filter:
        $ref: '#/definitions/playerEventsFilter'
      sports:
        type: array
        items:
          $ref: '#/definitions/sportToPlayerEventsTable'
      pagerOut:
        $ref: '#/definitions/pagerOut'
  playerEventsFilter:
    type: object
    properties:
      sports:
        type: array
        items:
          $ref: '#/definitions/sportToPlayerEventsFilter'
  sportToPlayerEventsFilter:
    type: object
    properties:
      id:
        type: integer
      name:
        type: string
      icon:
        type: string
      sort:
        type: integer
      leagues:
        type: array
        items:
          $ref: '#/definitions/leagueToPlayerEventsFilter'
  leagueToPlayerEventsFilter:
    type: object
    properties:
      id:
        type: integer
      name:
        type: string
      sort:
        type: integer
      events:
        type: array
        items:
          $ref: '#/definitions/eventToPlayerEventsFilter'
  eventToPlayerEventsFilter:
    type: object
    properties:
      id:
        type: integer
      teams:
        type: array
        items:
          $ref: '#/definitions/team'
      sort:
        type: integer
  sportToPlayerEventsTable:
    type: object
    properties:
      sportId:
        type: integer
      sportName:
        type: string
      sportIcon:
        type: string
      tableModelPreview:
        type: string
      leagues:
        type: array
        items:
          $ref: '#/definitions/leagueToPlayerEventsTable'
  leagueToPlayerEventsTable:
    type: object
    properties:
      leagueId:
        type: integer
      leagueName:
        type: string
      leagueIcon:
        type: string
      events:
        type: array
        items:
          $ref: '#/definitions/eventToPlayerEventsTable'
  eventToPlayerEventsTable:
    type: object
    properties:
      eventId:
        type: integer
      teams:
        type: array
        items:
          $ref: '#/definitions/team'
      startTime:
        type: integer
      currentScore:
        type: string
      currentPeriod:
        type: integer
      isStopped:
        type: boolean
      oddQuantity:
        type: integer
        description: "
          1. По event_id получить записи в таблице 'odds' со значением в поле is_stopped равным false и is_win равным null\n
          2. Рассчитать количество полученных записей\n"
      outcomes:
        type: array
        items:
          $ref: '#/definitions/outcomeToPlayerEventsTable'
  outcomeToPlayerEventsTable:
    type: object
    properties:
      marketId:
        type: integer
      outcomeId:
        type: integer
      outcomeTeam:
        type: string
      outcomeDst:
        type: string
      outcomeSubName:
        type: string
      oddId:
        type: integer
      oddValue:
        type: number
        description: "
          1. Для каждого odd_id определить соответствующие outcome_id, market_id и event_id (через таблицу 'odds')\n
          2. По event_id определить соответствующие league_id и sport_id (через таблицу 'events')\n
          3. По player_id (MiddleWare), market_id, league_id и sport_id найти все записи в таблице 'limitations'. Учесть, что в полученных записях не обязательно должно быть значение всех вышеуказанных переменных сразу (Прим. значение поля в таблице должно либо совпадать либо быть равным null)\n
          4. Для каждой полученной записи получить значение odds_value\n
          5. Определить наибольшее значение odds_value из всех полученных (см. Пункт 4)\n
          6. Разделить полученное значение в Пункте 5 на 100 и вычесть его из 1. Это будет модификатор коэффициента\n
          7. Получить значение value для odd_id (через таблицу 'odds')\n
          8. Из полученного значения value (см. Пункт 7) вычесть 1, затем умножить на модификатор коэффициента (см. Пункт 6) и прибавить 1\n"
      isStopped:
        type: boolean
        description: "
          1. В таблице 'odds' значение поля is_win для данного odd_id должно быть равно null\n
          2. В таблице 'odds' значение поля is_stopped для данного odd_id должно быть равно false\n
          3. Если все условия (см. Пункты 1-2) выполняются, то в значении выходного параметра вернуть false, иначе - true\n"
  playerFavoriteEvents:
    type: object
    properties:
      favoriteEvents:
        type: array
        items:
          $ref: '#/definitions/playerFavoriteEvent'
  playerFavoriteEvent:
    type: object
    properties:
      id:
        type: integer
  playerSliders:
    type: object
    properties:
      playerTopSliders:
        type: array
        items:
          $ref: '#/definitions/playerTopSlider'
      playerSideSlider:
        type: object
        properties:
          id:
            type: integer
          type:
            type: integer
            description: "0 - \"Боковые баннеры\""
            enum:
              - 0
          positions:
            type: array
            items:
              $ref: '#/definitions/playerSideSliderPosition'
  playerTopSlider:
    type: object
    properties:
      id:
        type: integer
      type:
        type: integer
        description: "1 - \"1 Баннер\", 2 - \"2 баннера\", 3 - \"4 баннера\""
        enum:
          - 1
          - 2
          - 3
      sort:
        type: integer
      positions:
        type: array
        items:
          $ref: '#/definitions/playerTopSliderPosition'
  playerTopSliderPosition:
    type: object
    properties:
      sourceId:
        type: integer
        description: "В зависимости от значения параметра type (таблица 'banners_stocks_sliders') возвращается ID из таблицы 'banners' или таблицы 'stocks'"
      type:
        type: string
        enum:
          - banners
          - stocks
      title:
        type: string
        description: "В зависимости от значения language_id (cookie) возвращается значение title из таблицы 'stocks' (для language_id = 1) или значение title_en из таблицы 'stocks' (для language_id != 1)"
      text:
        type: string
        description: "В зависимости от значения language_id (cookie) возвращается значение text из таблицы 'stocks' (для language_id = 1) или значение text_en из таблицы 'stocks' (для language_id != 1)"
      url:
        type: string
      sportId:
        type: integer
      sportName:
        type: string
      sportIcon:
        type: string
      leagueId:
        type: integer
      leagueName:
        type: string
      leagueIcon:
        type: string
      eventId:
        type: integer
      startTime:
        type: integer
      timeStatus:
        type: integer
        description: "1 - \"Line\", 2 - \"Live\""
        enum:
          - 1
          - 2
      teams:
        type: array
        items:
          $ref: '#/definitions/teamExtra'
      outcome1Id:
        type: integer
      odd1Value:
        type: number
        description: "
          1. По event_id и outcome_id определить соответствующий odd_id (через таблицу 'odds')\n
          2. По outcome_id определить соответствующий market_id (через таблицу 'outcomes')\n
          3. По player_id (MiddleWare), market_id, league_id и sport_id найти все записи в таблице 'limitations'. Учесть, что в полученных записях не обязательно должно быть значение всех вышеуказанных переменных сразу (Прим. значение поля в таблице должно либо совпадать либо быть равным __null__)\n
          4. Для каждой полученной записи получить значение odds_value\n
          5. Определить наибольшее значение odds_value из всех полученных (см. Пункт 4)\n
          6. Разделить полученное значение в Пункте 5 на 100 и вычесть его из 1. Это будет модификатор коэффициента\n
          7. Получить значение value для odd_id, которое получено в Пункте 1 (через таблицу 'odds')\n
          8. Из полученного значения value (см. Пункт 7) вычесть 1, затем умножить на модификатор коэффициента (см. Пункт 6) и прибавить 1\n"
      outcome2Id:
        type: integer
      odd2Value:
        type: number
        description: "
          1. По event_id и outcome_id определить соответствующий odd_id (через таблицу 'odds')\n
          2. По outcome_id определить соответствующий market_id (через таблицу 'outcomes')\n
          3. По player_id (MiddleWare), market_id, league_id и sport_id найти все записи в таблице 'limitations'. Учесть, что в полученных записях не обязательно должно быть значение всех вышеуказанных переменных сразу (Прим. значение поля в таблице должно либо совпадать либо быть равным __null__)\n
          4. Для каждой полученной записи получить значение odds_value\n
          5. Определить наибольшее значение odds_value из всех полученных (см. Пункт 4)\n
          6. Разделить полученное значение в Пункте 5 на 100 и вычесть его из 1. Это будет модификатор коэффициента\n
          7. Получить значение value для odd_id, которое получено в Пункте 1 (через таблицу 'odds')\n
          8. Из полученного значения value (см. Пункт 7) вычесть 1, затем умножить на модификатор коэффициента (см. Пункт 6) и прибавить 1\n"
      outcome3Id:
        type: integer
      odd3Value:
        type: number
        description: "
          1. По event_id и outcome_id определить соответствующий odd_id (через таблицу 'odds')\n
          2. По outcome_id определить соответствующий market_id (через таблицу 'outcomes')\n
          3. По player_id (MiddleWare), market_id, league_id и sport_id найти все записи в таблице 'limitations'. Учесть, что в полученных записях не обязательно должно быть значение всех вышеуказанных переменных сразу (Прим. значение поля в таблице должно либо совпадать либо быть равным __null__)\n
          4. Для каждой полученной записи получить значение odds_value\n
          5. Определить наибольшее значение odds_value из всех полученных (см. Пункт 4)\n
          6. Разделить полученное значение в Пункте 5 на 100 и вычесть его из 1. Это будет модификатор коэффициента\n
          7. Получить значение value для odd_id, которое получено в Пункте 1 (через таблицу 'odds')\n
          8. Из полученного значения value (см. Пункт 7) вычесть 1, затем умножить на модификатор коэффициента (см. Пункт 6) и прибавить 1\n"
      oddQuantity:
        type: integer
        description: "
          1. По event_id получить записи в таблице 'odds' со значением в поле is_stopped равным false и is_win равным null\n
          2. Рассчитать количество полученных записей\n"
      startAt:
        type: integer
      endAt:
        type: integer
      bannerTemplateId:
        type: integer
      bannerTemplateImage:
        type: string
      bannerImage:
        type: string
      positionNumber:
        type: integer
        description: "0 - \"1ый Баннер\", 1 - \"2ой баннер\", 2 - \"3ий баннер\", 3 - \"4ый баннер\""
        enum:
          - 0
          - 1
          - 2
          - 3
  playerSideSliderPosition:
    type: object
    properties:
      sourceId:
        type: integer
        description: "В зависимости от значения параметра type (таблица 'banners_stocks_sliders') возвращается ID из таблицы 'banners' или таблицы 'stocks'"
      type:
        type: string
        enum:
          - banners
          - stocks
      title:
        type: string
        description: "В зависимости от значения language_id (cookie) возвращается значение title из таблицы 'stocks' (для language_id = 1) или значение title_en из таблицы 'stocks' (для language_id != 1)"
      text:
        type: string
        description: "В зависимости от значения language_id (cookie) возвращается значение text из таблицы 'stocks' (для language_id = 1) или значение text_en из таблицы 'stocks' (для language_id != 1)"
      url:
        type: string
      sportId:
        type: integer
      sportName:
        type: string
      sportIcon:
        type: string
      leagueId:
        type: integer
      leagueName:
        type: string
      leagueIcon:
        type: string
      eventId:
        type: integer
      startTime:
        type: integer
      timeStatus:
        type: integer
        description: "1 - \"Line\", 2 - \"Live\""
        enum:
          - 1
          - 2
      teams:
        type: array
        items:
          $ref: '#/definitions/teamExtra'
      outcome1Id:
        type: integer
      odd1Value:
        type: number
        description: "
          1. По event_id и outcome_id определить соответствующий odd_id (через таблицу 'odds')\n
          2. По outcome_id определить соответствующий market_id (через таблицу 'outcomes')\n
          3. По player_id (MiddleWare), market_id, league_id и sport_id найти все записи в таблице 'limitations'. Учесть, что в полученных записях не обязательно должно быть значение всех вышеуказанных переменных сразу (Прим. значение поля в таблице должно либо совпадать либо быть равным __null__)\n
          4. Для каждой полученной записи получить значение odds_value\n
          5. Определить наибольшее значение odds_value из всех полученных (см. Пункт 4)\n
          6. Разделить полученное значение в Пункте 5 на 100 и вычесть его из 1. Это будет модификатор коэффициента\n
          7. Получить значение value для odd_id, которое получено в Пункте 1 (через таблицу 'odds')\n
          8. Из полученного значения value (см. Пункт 7) вычесть 1, затем умножить на модификатор коэффициента (см. Пункт 6) и прибавить 1\n"
      outcome2Id:
        type: integer
      odd2Value:
        type: number
        description: "
          1. По event_id и outcome_id определить соответствующий odd_id (через таблицу 'odds')\n
          2. По outcome_id определить соответствующий market_id (через таблицу 'outcomes')\n
          3. По player_id (MiddleWare), market_id, league_id и sport_id найти все записи в таблице 'limitations'. Учесть, что в полученных записях не обязательно должно быть значение всех вышеуказанных переменных сразу (Прим. значение поля в таблице должно либо совпадать либо быть равным __null__)\n
          4. Для каждой полученной записи получить значение odds_value\n
          5. Определить наибольшее значение odds_value из всех полученных (см. Пункт 4)\n
          6. Разделить полученное значение в Пункте 5 на 100 и вычесть его из 1. Это будет модификатор коэффициента\n
          7. Получить значение value для odd_id, которое получено в Пункте 1 (через таблицу 'odds')\n
          8. Из полученного значения value (см. Пункт 7) вычесть 1, затем умножить на модификатор коэффициента (см. Пункт 6) и прибавить 1\n"
      outcome3Id:
        type: integer
      odd3Value:
        type: number
        description: "
          1. По event_id и outcome_id определить соответствующий odd_id (через таблицу 'odds')\n
          2. По outcome_id определить соответствующий market_id (через таблицу 'outcomes')\n
          3. По player_id (MiddleWare), market_id, league_id и sport_id найти все записи в таблице 'limitations'. Учесть, что в полученных записях не обязательно должно быть значение всех вышеуказанных переменных сразу (Прим. значение поля в таблице должно либо совпадать либо быть равным __null__)\n
          4. Для каждой полученной записи получить значение odds_value\n
          5. Определить наибольшее значение odds_value из всех полученных (см. Пункт 4)\n
          6. Разделить полученное значение в Пункте 5 на 100 и вычесть его из 1. Это будет модификатор коэффициента\n
          7. Получить значение value для odd_id, которое получено в Пункте 1 (через таблицу 'odds')\n
          8. Из полученного значения value (см. Пункт 7) вычесть 1, затем умножить на модификатор коэффициента (см. Пункт 6) и прибавить 1\n"
      oddQuantity:
        type: integer
        description: "
          1. По event_id получить записи в таблице 'odds' со значением в поле is_stopped равным false и is_win равным null\n
          2. Рассчитать количество полученных записей\n"
      startAt:
        type: integer
      endAt:
        type: integer
      bannerTemplateId:
        type: integer
      bannerTemplateImage:
        type: string
      bannerImage:
        type: string
      positionNumber:
        type: integer
        description: "0 - \"1ый Баннер\", 1 - \"2ой баннер\", 2 - \"3ий баннер\""
        enum:
          - 0
          - 1
          - 2
  playerStocks:
    type: object
    properties:
      stocks:
        type: array
        items:
          $ref: '#/definitions/playerStock'
  playerStock:
    type: object
    properties:
      id:
        type: integer
      title:
        type: string
        description: "В зависимости от значения language_id (cookie) возвращается значение title из таблицы 'stocks' (для language_id = 1) или значение title_en из таблицы 'stocks' (для language_id != 1)"
      text:
        type: string
        description: "В зависимости от значения language_id (cookie) возвращается значение text из таблицы 'stocks' (для language_id = 1) или значение text_en из таблицы 'stocks' (для language_id != 1)"
      startAt:
        type: integer
      endAt:
        type: integer
      url:
        type: string
      landingImage:
        type: string
  playerBetBasketNotCalculatedNotSaved:
    type: object
    properties:
      notCalculatedBets:
        type: array
        items:
          $ref: '#/definitions/notCalculatedBetGeneral'
      notSavedBets:
        type: array
        items:
          $ref: '#/definitions/notSavedBet'
      minValueAmount:
        type: number
        description: "
          1. Получить системную минимальную сумму ставки:\n
            а) Получить запись в таблице 'settings' со значением в поле code равным min_value_bet, получить соответствующее значение value\n
          2. Получить минимальную сумму ставки по порезкам:\n
            а) Использовать player_id текущего пользователя (MiddleWare)\n
            б) Сделать запрос в таблицу 'bet_baskets_odd' и получить все записи для текущего игрока\n
            в) Определить odd_id для каждой полученной записи\n
            г) Для каждого odd_id определить соответствующие market_id и event_id (через таблицы 'odds' и 'outcomes')\n
            д) По event_id определить соответствующие league_id и sport_id (через таблицу 'events')\n
            е) По player_id, market_id, league_id и sport_id найти все записи в таблице 'limitations'. Учесть, что в полученных записях не обязательно должно быть значение всех вышеуказанных переменных сразу (Прим. значение поля в таблице должно либо совпадать либо быть равным null)\n
            ж) Для каждой полученной записи получить значение min_value_amount (если оно имеется)\n
            з) Определить наибольшее значение min_value_amount из всех полученных (см. Пункт 2Ж)\n
          3. Рассчитать итоговую минимальную сумму ставки:\n
            а) Сравнить системную минимальную сумму ставки (см. Пункт 1) и минимальную сумму ставки по порезкам (см. Пункт 2). Выбрать наибольшее значение. Это будет итоговая минимальная сумма ставки в рублях\n
            б) Использовать player_id текущего пользователя (MiddleWare)\n
            в) Получить запись в таблице 'balances', получить соответствующее значение currency_id\n
            г) Для данного currency_id получить запись в таблице 'currencies', получить соответствующее значение course\n
            д) Разделить значение итоговой минимальной суммы ставки в рублях (см. Пункт 3А) на значение course. Это будет итоговая минимальная сумма ставки в валюте игрока\n"
      maxValueAmount:
        type: number
        description: "
          __I. Получить системную максимальную сумму ставки:__\n
            1. Получить запись в таблице 'settings' со значением в поле 'code' равным max_value_bet, получить соответствующее значение value\n
           
          __II. Получить максимальную сумму ставки по группам риска:__\n
            1. Использовать player_id текущего пользователя (MiddleWare)\n
            2. Определить данные по группам риска:\n
              а) Сделать запрос в таблицу 'bet_baskets_odd' и получить все записи для текущего игрока\n
              б) Определить odd_id для каждой полученной записи\n
              в) Для каждого odd_id определить соответствующее значение event_id (через таблицу 'odds')\n
              г) Для каждого event_id определить соответствующее значение risk_group_id (через таблицу 'events')\n
              д) Для каждого risk_group_id определить соответствующие значения name и value (через таблицу 'risk_groups'):\n
                > 1. Если у всех risk_group_id (для данной ставки) значение в поле name = \"Высокая\", то значению максимальной суммы ставки присвоить значение risk_groups.value, не учитывать максимальную сумму ставки по порезкам и перейти к IV шагу алгоритма (см. Пункт IV)\n
                > 2. Если хотя бы у одного risk_group_id (для данной ставки) значение в поле name != \"Высокая\", то перейти к следующему этапу II шага алгоритма (см. дальше)\n
            3. Рассчитать максимальную сумму ставки по группам риска:\n
              а) Сделать запрос в таблицу 'bet_baskets_odd' и получить все записи для текущего игрока\n
              б) Определить odd_id для каждой полученной записи\n
              в) Для каждого odd_id определить соответствующее значение odd_value (через таблицу 'odds')\n
              г) Для каждого odd_id разделить цифровое значение соответствующей группы риска на разницу значения коэффициента и 1 (risk_groups.value / (odds.value-1)) и записать результат в локальную переменную max_amount\n
              д) Для каждого odd_id сравнить цифровое значение соответствующей группы риска и значение его локальной переменной max_amount:\n
                > 1. Если max_amount < risk_groups.value / 3, то max_amount := risk_groups.value / 3\n
                > 2. Если max_amount >= risk_groups.value / 3, то никаких дополнительных действий не требуется\n
              
              > е) Выбрать наименьшее значение локальной переменной max_amount из всех полученных. Это будет максимальная сумма ставки по группам риска\n
           
          __III. Получить максимальную сумму ставки по порезкам:__\n
            1. Использовать player_id текущего пользователя (MiddleWare)\n
            2. Сделать запрос в таблицу 'bet_baskets_odd' и получить все записи для текущего игрока\n
            3. Определить odd_id для каждой полученной записи\n
            4. Для каждого odd_id определить соответствующие market_id и event_id (через таблицы 'odds' и 'outcomes')\n
            5. По event_id определить соответствующие league_id и sport_id (через таблицу 'events')\n
            6. По player_id, market_id, event_id, league_id и sport_id найти все записи в таблице 'limitations'. Учесть, что в полученных записях не обязательно должно быть значение всех вышеуказанных переменных сразу (Прим. значение поля в таблице должно либо совпадать либо быть равным null)\n
            7. Для каждой полученной записи получить значения max_value_amount и max_value_percent (если они имеются)\n
            8. Для тех записей, в которых значение max_value_percent получено, по event_id в таблице 'events' найти значение max_risk. Разделить значение max_risk на 100 и умножить на значение max_value_percent\n
            9. Определить наименьшее значение из всех полученных max_value_amount и всех значений полученных в предыдущем пункте\n
           
          __IV. Рассчитать итоговую максимальную сумму ставки и параметр unlim:__\n
            1. Определить значение параметра unlim:\n
              а) Если значение максимальной суммы ставки по порезкам (см. Пункт III) равно Null, то:\n
                > 1. Сравнить системную максимальную сумму ставки (см. Пункт I) и максимальную сумму ставки по группам риска (см. Пункт II)\n
                > 2. Если они равны, то значению выходного параметра unlim присвоить значение true\n
                > 3. Если они не равны, то значению выходного параметра unlim присвоить значение false\n
              
              > б) Если значение максимальной суммы ставки по порезкам (см. Пункт III) не равно Null, то значению выходного параметра unlim присвоить значение false\n
            2. Рассчитать итоговую максимальную сумму ставки:\n
              а) Сравнить системную максимальную сумму ставки (см. Пункт I), максимальную сумму ставки по группам риска (см. Пункт II) и максимальную сумму ставки по порезкам (см. Пункт III). Выбрать наименьшее значение. Это будет итоговая максимальная сумма ставки в рублях\n
              б) Использовать player_id текущего пользователя (MiddleWare)\n
              в) Получить запись в таблице 'balances', получить соответствующее значение currency_id\n
              г) Для данного currency_id получить запись в таблице 'currencies', получить соответствующее значение course\n
              д) Разделить значение итоговой максимальной суммы ставки в рублях (см. Пункт IV.2.А) на значение course. Это будет итоговая максимальная сумма ставки в валюте игрока\n"
      unlim:
        type: boolean
        description: "см. расчет значения параметра 'maxValueAmount' (Пункт IV.1)"
      timerValue:
        type: integer
        description: "
          1. Получить системное значение таймера задержки принятия ставки:\n
            а) Использовать player_id текущего пользователя\n
            б) Сделать запрос в таблицу 'bet_baskets_odd' и получить все записи для текущего игрока\n
            в) Получить значение odd_id для каждой записи\n
            г) Для каждого odd_id найти соответствующий ему sport_id (через таблицу 'events')\n
            д) Для каждого полученного sport_id получить значение timer_value\n
            е) Выбрать наибольшее значение timer_value\n
          2. Получить значение таймера задержки принятия ставки по порезкам:\n
            а) Использовать player_id текущего пользователя (MiddleWare)\n
            б) Сделать запрос в таблицу 'bet_baskets_odd' и получить все записи для текущего игрока\n
            в) Определить odd_id для каждой полученной записи\n
            г) Для каждого odd_id определить соответствующие market_id и event_id (через таблицы 'odds' и 'outcomes')\n
            д) По event_id определить соответствующие league_id и sport_id (через таблицу 'events')\n
            е) По player_id, market_id, event_id, league_id и sport_id найти все записи в таблице 'limitations'. Учесть, что в полученных записях не обязательно должно быть значение всех вышеуказанных переменных сразу (Прим. значение поля в таблице должно либо совпадать либо быть равным null)\n
            ж) Для каждой полученной записи получить значение bets_delay_value (если оно имеется)\n
            з) Определить наибольшее значение bets_delay_value из всех полученных\n
          3. Рассчитать итоговое значение таймера задержки принятия ставки:\n
            а) Сравнить системное значение таймера задержки принятия ставки (см. Пункт 1) и значение таймера задержки принятия ставки по порезкам (см. Пункт 2). Выбрать наибольшее значение\n"
      delayValue:
        type: integer
        description: "
          1. Использовать player_id текущего пользователя (MiddleWare)\n
          2. Сделать запрос в таблицу 'bet_baskets_odd' и получить все записи для текущего игрока\n
          3. Определить odd_id для каждой полученной записи\n
          4. Для каждого odd_id определить соответствующие market_id и event_id (через таблицы 'odds' и 'outcomes')\n
          5. По event_id определить соответствующие league_id и sport_id (через таблицу 'events')\n
          6. По player_id, market_id, league_id и sport_id найти все записи в таблице 'limitations'. Учесть, что в полученных записях не обязательно должно быть значение всех вышеуказанных переменных сразу (Прим. значение поля в таблице должно либо совпадать либо быть равным null)\n
          7. Для каждой полученной записи получить значение delay_between_bets_value (если оно имеется)\n
          8. Определить наибольшее значение delay_between_bets_value из всех полученных\n"
  notCalculatedBetGeneral:
    type: object
    properties:
      betId:
        type: integer
      amount:
        type: number
      currencyId:
        type: integer
      currencyName:
        type: string
      currencyIcon:
        type: string
      number:
        type: string
      expressOddValue:
        type: number
      isExpress:
        type: boolean
      createdAt:
        type: integer
      parts:
        type: array
        items:
          $ref: '#/definitions/notCalculatedBetPart'
  notCalculatedBetPart:
    type: object
    properties:
      sportId:
        type: integer
      sportIcon:
        type: string
      eventId:
        type: integer
      teams:
        type: array
        items:
          $ref: '#/definitions/team'
      marketId:
        type: integer
      marketName:
        type: string
      outcomeId:
        type: integer
      outcomeTeam:
        type: string
      outcomeDst:
        type: string
      outcomeSubName:
        type: string
      oddId:
        type: integer
      oddValue:
        type: number
      oddPeriod:
        type: integer
      isEventLive:
        type: boolean
      status:
        type: integer
        description: "0 - \"Не рассчитана\", 1 - \"Выигрыш\""
        enum:
          - 0
          - 1
  notSavedBet:
    type: object
    properties:
      sportId:
        type: integer
      sportIcon:
        type: string
      eventId:
        type: integer
      teams:
        type: array
        items:
          $ref: '#/definitions/team'
      marketId:
        type: integer
      marketName:
        type: string
      outcomeId:
        type: integer
      outcomeTeam:
        type: string
      outcomeDst:
        type: string
      outcomeSubName:
        type: string
      oddId:
        type: integer
      oddValue:
        type: number
        description: "
          1. Для каждого odd_id определить соответствующие outcome_id, market_id и event_id (через таблицу 'odds')\n
          2. По event_id определить соответствующие league_id и sport_id (через таблицу 'events')\n
          3. По player_id (MiddleWare), market_id, league_id и sport_id найти все записи в таблице 'limitations'. Учесть, что в полученных записях не обязательно должно быть значение всех вышеуказанных переменных сразу (Прим. значение поля в таблице должно либо совпадать либо быть равным null)\n
          4. Для каждой полученной записи получить значение odds_value\n
          5. Определить наибольшее значение odds_value из всех полученных (см. Пункт 4)\n
          6. Разделить полученное значение в Пункте 5 на 100 и вычесть его из 1. Это будет модификатор коэффициента\n
          7. Получить значение value для odd_id (через таблицу 'odds')\n
          8. Из полученного значения value (см. Пункт 7) вычесть 1, затем умножить на модификатор коэффициента (см. Пункт 6) и прибавить 1\n"
  playerBetBasketCalculated:
    type: object
    properties:
      calculatedBets:
        type: array
        items:
          $ref: '#/definitions/calculatedBetGeneral'
  calculatedBetGeneral:
    type: object
    properties:
      betId:
        type: integer
      number:
        type: string
      amount:
        type: number
      totalAmount:
        type: number
      currencyId:
        type: integer
      currencyName:
        type: string
      currencyIcon:
        type: string
      expressOddValue:
        type: number
      isExpress:
        type: boolean
      createdAt:
        type: integer
      status:
        type: integer
        description: "1 - \"Выигрыш\", 2 - \"Проигрыш\""
        enum:
          - 1
          - 2
      parts:
        type: array
        items:
          $ref: '#/definitions/calculatedBetPart'
  calculatedBetPart:
    type: object
    properties:
      sportId:
        type: integer
      sportIcon:
        type: string
      eventId:
        type: integer
      teams:
        type: array
        items:
          $ref: '#/definitions/team'
      marketId:
        type: integer
      marketName:
        type: string
      outcomeId:
        type: integer
      outcomeTeam:
        type: string
      outcomeDst:
        type: string
      outcomeSubName:
        type: string
      oddId:
        type: integer
      oddValue:
        type: number
      oddPeriod:
        type: integer
      isEventLive:
        type: boolean
      status:
        type: integer
        description: "0 - \"Не рассчитана\", 1 - \"Выигрыш\", 2 - \"Проигрыш\""
        enum:
          - 0
          - 1
          - 2
  oddsList:
    type: object
    properties:
      odds:
        type: array
        items:
          $ref: '#/definitions/odd'
  odd:
    type: object
    properties:
      oddId:
        type: integer
  timersAndAmounts:
    type: object
    properties:
      minValueAmount:
        type: number
        description: "
          1. Получить системную минимальную сумму ставки:\n
            а) Получить запись в таблице 'settings' со значением в поле code равным min_value_bet, получить соответствующее значение value\n
          2. Получить минимальную сумму ставки по порезкам:\n
            а) Использовать player_id текущего пользователя (MiddleWare)\n
            б) Сделать запрос в таблицу 'bet_baskets_odd' и получить все записи для текущего игрока\n
            в) Определить odd_id для каждой полученной записи\n
            г) Для каждого odd_id определить соответствующие market_id и event_id (через таблицы 'odds' и 'outcomes')\n
            д) По event_id определить соответствующие league_id и sport_id (через таблицу 'events')\n
            е) По player_id, market_id, league_id и sport_id найти все записи в таблице 'limitations'. Учесть, что в полученных записях не обязательно должно быть значение всех вышеуказанных переменных сразу (Прим. значение поля в таблице должно либо совпадать либо быть равным null)\n
            ж) Для каждой полученной записи получить значение min_value_amount (если оно имеется)\n
            з) Определить наибольшее значение min_value_amount из всех полученных (см. Пункт 2Ж)\n
          3. Рассчитать итоговую минимальную сумму ставки:\n
            а) Сравнить системную минимальную сумму ставки (см. Пункт 1) и минимальную сумму ставки по порезкам (см. Пункт 2). Выбрать наибольшее значение. Это будет итоговая минимальная сумма ставки в рублях\n
            б) Использовать player_id текущего пользователя (MiddleWare)\n
            в) Получить запись в таблице 'balances', получить соответствующее значение currency_id\n
            г) Для данного currency_id получить запись в таблице 'currencies', получить соответствующее значение course\n
            д) Разделить значение итоговой минимальной суммы ставки в рублях (см. Пункт 3А) на значение course. Это будет итоговая минимальная сумма ставки в валюте игрока\n"
      maxValueAmount:
        type: number
        description: "
          __I. Получить системную максимальную сумму ставки:__\n
            1. Получить запись в таблице 'settings' со значением в поле code равным max_value_bet, получить соответствующее значение value\n
          
          __II. Получить максимальную сумму ставки по группам риска:__\n
            1. Использовать player_id текущего пользователя (MiddleWare)\n
            2. Определить данные по группам риска:\n
              а) Сделать запрос в таблицу 'bet_baskets_odd' и получить все записи для текущего игрока\n
              б) Определить odd_id для каждой полученной записи\n
              в) Для каждого odd_id определить соответствующее значение event_id (через таблицу 'odds')\n
              г) Для каждого event_id определить соответствующее значение risk_group_id (через таблицу 'events')\n
              д) Для каждого risk_group_id определить соответствующие значения name и value (через таблицу 'risk_groups'):\n
                > 1. Если у всех risk_group_id (для данной ставки) значение в поле name = \"Высокая\", то значению максимальной суммы ставки присвоить значение risk_groups.value, не учитывать максимальную сумму ставки по порезкам и перейти к IV шагу алгоритма (см. Пункт IV)\n
                > 2. Если хотя бы у одного risk_group_id (для данной ставки) значение в поле name != \"Высокая\", то перейти к следующему этапу II шага алгоритма (см. дальше)\n
            3. Рассчитать максимальную сумму ставки по группам риска:\n
              а) Сделать запрос в таблицу 'bet_baskets_odd' и получить все записи для текущего игрока\n
              б) Определить odd_id для каждой полученной записи\n
              в) Для каждого odd_id определить соответствующее значение odd_value (через таблицу 'odds')\n
              г) Для каждого odd_id разделить цифровое значение соответствующей группы риска на разницу значения коэффициента и 1 (risk_groups.value / (odds.value-1)) и записать результат в локальную переменную max_amount\n
              д) Для каждого odd_id сравнить цифровое значение соответствующей группы риска и значение его локальной переменной max_amount\n
                > 1. Если max_amount < risk_groups.value / 3, то max_amount := risk_groups.value / 3\n
                > 2. Если max_amount >= risk_groups.value / 3, то никаких дополнительных действий не требуется\n
              
              > е) Выбрать наименьшее значение локальной переменной max_amount из всех полученных. Это будет максимальная сумма ставки по группам риска\n
          
          __III. Получить максимальную сумму ставки по порезкам:__\n
            1. Использовать player_id текущего пользователя (MiddleWare)\n
            2. Сделать запрос в таблицу 'bet_baskets_odd' и получить все записи для текущего игрока\n
            3. Определить odd_id для каждой полученной записи\n
            4. Для каждого odd_id определить соответствующие market_id и event_id (через таблицы 'odds' и 'outcomes')\n
            5. По event_id определить соответствующие league_id и sport_id (через таблицу 'events')\n
            6. По player_id, market_id, event_id, league_id и sport_id найти все записи в таблице 'limitations'. Учесть, что в полученных записях не обязательно должно быть значение всех вышеуказанных переменных сразу (Прим. значение поля в таблице должно либо совпадать либо быть равным null)\n
            7. Для каждой полученной записи получить значения max_value_amount и max_value_percent (если они имеются)\n
            8. Для тех записей, в которых значение max_value_percent получено, по event_id в таблице 'events' найти значение max_risk. Разделить значение max_risk на 100 и умножить на значение max_value_percent\n
            9. Определить наименьшее значение из всех полученных max_value_amount и всех значений полученных в предыдущем пункте\n
          
          __IV. Рассчитать итоговую максимальную сумму ставки и параметр unlim:__\n
            1. Определить значение параметра unlim:\n
              а) Если значение максимальной суммы ставки по порезкам (см. Пункт III) равно Null, то:\n
                > 1. Сравнить системную максимальную сумму ставки (см. Пункт I) и максимальную сумму ставки по группам риска (см. Пункт II)\n
                > 2. Если они равны, то значению выходного параметра unlim присвоить значение true\n
                > 3. Если они не равны, то значению выходного параметра unlim присвоить значение false\n
              
              > б) Если значение максимальной суммы ставки по порезкам (см. Пункт III) не равно Null, то значению выходного параметра unlim присвоить значение false\n
              
            2. Рассчитать итоговую максимальную сумму ставки:\n
              а) Сравнить системную максимальную сумму ставки (см. Пункт I), максимальную сумму ставки по группам риска (см. Пункт II) и максимальную сумму ставки по порезкам (см. Пункт III). Выбрать наименьшее значение. Это будет итоговая максимальная сумма ставки в рублях\n
              б) Использовать player_id текущего пользователя (MiddleWare)\n
              в) Получить запись в таблице 'balances', получить соответствующее значение currency_id\n
              г) Для данного currency_id получить запись в таблице 'currencies', получить соответствующее значение course\n
              д) Разделить значение итоговой максимальной суммы ставки в рублях (см. Пункт IV.2.A) на значение course. Это будет итоговая максимальная сумма ставки в валюте игрока\n"
      unlim:
        type: boolean
        description: "см. расчет значения параметра 'maxValueAmount' (Пункт IV.1)"
      timerValue:
        type: integer
        description: "
          1. Получить системное значение таймера задержки принятия ставки:\n
            а) Использовать player_id текущего пользователя\n
            б) Сделать запрос в таблицу 'bet_baskets_odd' и получить все записи для текущего игрока\n
            в) Получить значение odd_id для каждой записи\n
            г) Для каждого odd_id найти соответствующий ему sport_id (через таблицу 'events')\n
            д) Для каждого полученного sport_id получить значение timer_value\n
            е) Выбрать наибольшее значение timer_value\n
          2. Получить значение таймера задержки принятия ставки по порезкам:\n
            а) Использовать player_id текущего пользователя (MiddleWare)\n
            б) Сделать запрос в таблицу 'bet_baskets_odd' и получить все записи для текущего игрока\n
            в) Определить odd_id для каждой полученной записи\n
            г) Для каждого odd_id определить соответствующие market_id и event_id (через таблицы 'odds' и 'outcomes')\n
            д) По event_id определить соответствующие league_id и sport_id (через таблицу 'events')\n
            е) По player_id, market_id, event_id, league_id и sport_id найти все записи в таблице 'limitations'. Учесть, что в полученных записях не обязательно должно быть значение всех вышеуказанных переменных сразу (Прим. значение поля в таблице должно либо совпадать либо быть равным null)\n
            ж) Для каждой полученной записи получить значение bets_delay_value (если оно имеется)\n
            з) Определить наибольшее значение bets_delay_value из всех полученных\n
          3. Рассчитать итоговое значение таймера задержки принятия ставки:\n
            а) Сравнить системное значение таймера задержки принятия ставки (см. Пункт 1) и значение таймера задержки принятия ставки по порезкам (см. Пункт 2). Выбрать наибольшее значение\n"
      delayValue:
        type: integer
        description: "
          1. Использовать player_id текущего пользователя (MiddleWare)\n
          2. Сделать запрос в таблицу 'bet_baskets_odd' и получить все записи для текущего игрока\n
          3. Определить odd_id для каждой полученной записи\n
          4. Для каждого odd_id определить соответствующие market_id и event_id (через таблицы 'odds' и 'outcomes')\n
          5. По event_id определить соответствующие league_id и sport_id (через таблицу 'events')\n
          6. По player_id, market_id, league_id и sport_id найти все записи в таблице 'limitations'. Учесть, что в полученных записях не обязательно должно быть значение всех вышеуказанных переменных сразу (Прим. значение поля в таблице должно либо совпадать либо быть равным null)\n
          7. Для каждой полученной записи получить значение delay_between_bets_value (если оно имеется)\n
          8. Определить наибольшее значение delay_between_bets_value из всех полученных\n"
  newPlayerBet:
    type: object
    properties:
      betId:
        type: integer
      amount:
        type: number
      currencyId:
        type: integer
      currencyName:
        type: string
      currencyIcon:
        type: string
      number:
        type: string
      expressOddValue:
        type: number
      isExpress:
        type: boolean
      createdAt:
        type: integer
      parts:
        type: array
        items:
          $ref: '#/definitions/newPlayerBetPart'
  newPlayerBetPart:
    type: object
    properties:
      sportId:
        type: integer
      sportIcon:
        type: string
      eventId:
        type: integer
      teams:
        type: array
        items:
          $ref: '#/definitions/team'
      marketId:
        type: integer
      marketName:
        type: string
      outcomeId:
        type: integer
      outcomeTeam:
        type: string
      outcomeDst:
        type: string
      outcomeSubName:
        type: string
      oddId:
        type: integer
      oddValue:
        type: number
      oddPeriod:
        type: integer
      isEventLive:
        type: boolean
      status:
        type: integer
        description: "0 - \"Не рассчитана\", 1 - \"Выигрыш\""
        enum:
          - 0
          - 1
  betOneClick:
    type: object
    properties:
      oddId:
        type: integer
      amount:
        type: number
  playerFavoriteBets:
    type: object
    properties:
      favoriteBets:
        type: array
        items:
          $ref: '#/definitions/playerFavoriteBet'
  playerFavoriteBet:
    type: object
    properties:
      id:
        type: integer
      type:
        type: integer
        description: "0 - \"Абсолютная величина\", 1 - \"В процентах\""
        enum:
          - 0
          - 1
      value:
        type: number
  playerBetSettings:
    type: object
    properties:
      reception_when_odds_change:
        type: integer
        description: "0 - \"Согласиться с повышением\", 1 - \"Согласиться с любым\", 2 - \"Требовать подтверждения\""
        enum:
          - 0
          - 1
          - 2
      reception_when_totals_change:
        type: integer
        description: "0 - \"Согласиться с любым\", 1 - \"Требовать подтверждения\""
        enum:
          - 0
          - 1
      sale_when_odds_change:
        type: integer
        description: "0 - \"Согласиться с повышением\", 1 - \"Согласиться с любым\", 2 - \"Требовать подтверждения\""
        enum:
          - 0
          - 1
          - 2
      is_fast_amount:
        type: boolean
  requestDataForEventInfo:
    type: object
    properties:
      eventId:
        type: integer
      data:
        type: integer
  eventInfo:
    type: object
    properties:
      sportId:
        type: integer
      sportName:
        type: string
      sportImage:
        type: string
      sportIcon:
        type: string
      leagueId:
        type: integer
      leagueName:
        type: string
      leagueIcon:
        type: string
      eventId:
        type: integer
      timeStatus:
        type: integer
        description: "0 - \"Line\", 1 - \"Live\""
        enum:
          - 0
          - 1
      startTime:
        type: integer
      isStopped:
        type: boolean
      isOverTime:
        type: boolean
      currentScore:
        type: string
      currentPeriod:
        type: integer
      teams:
        type: array
        items:
          $ref: '#/definitions/teamExtra'
      stats:
        type: string
        description: "
          1. Блок JSON с характеристиками-результатами по событию\n
          2. В блоке каждого параметра первая цифра означает значение для первой камнды, вторая цифра - для второй команды\n
          3. Пояснение-перевод параметров:\n
            а) \"Corners\": Количество угловых передач\n
            б) \"Yellowcards\": Количество желтых карточек\n
            в) \"Redcards\": Количество красных карточек\n
            г) \"Penalties\": Количество пенальти\n
            д) \"Substitutions\": Количество замен игроков\n
            е) \"Attacks\": Количество атак (переводов мяча на половину поля соперника)\n
            ж) \"Dangerous Attacks\": Количество опасных атак - голевых ситуации (переводов мяча на половину поля соперника и игроков у соперника при этом меньше)\n
            з) \"On Target\": Количество ударов в створ ворот\n
            и) \"Off Target\": Количество ударов мимо створа ворот\n
            к) \"Possession\": Процент владения мячом, шайбой и др.\n"
  requestDataForEventOddsTables:
    type: object
    properties:
      eventId:
        type: integer
      timeStatus:
        type: integer
        description: "1 - \"Line\", 2 - \"Live\""
        enum:
          - 1
          - 2
      data:
        type: integer
  eventOddsTables:
    type: object
    properties:
      marketGroups:
        type: array
        items:
          $ref: '#/definitions/marketGroupToEventOddsTables'
  marketGroupToEventOddsTables:
    type: object
    properties:
      marketType:
        type: integer
        description: "0 - \"Весь матч\", 1 - \"Период матча\", 2 - \"Половина матча\""
        enum:
          - 0
          - 1
          - 2
      marketTypeNumber:
        type: integer
        description: "Номер конкретного периода или половины матча"
      marketIsOverTime:
        type: boolean
        description: "null, false - \"Regular Time\", true - \"Over Time\""
      markets:
        type: array
        items:
          $ref: '#/definitions/marketToEventOddsTables'
  marketToEventOddsTables:
    type: object
    properties:
      marketId:
        type: integer
      marketName:
        type: string
      marketTableType:
        type: integer
      marketStatus:
        type: integer
        description: "1 - \"Активен\", 2 - \"Скрыт от игроков\", 3 - \"Удален\""
        enum:
          - 1
          - 2
          - 3
      marketSort:
        type: integer
      outcomes:
        type: array
        items:
          $ref: '#/definitions/outcomeToEventOddsTables'
  outcomeToEventOddsTables:
    type: object
    properties:
      outcomeId:
        type: integer
      outcomeTeam:
        type: string
      outcomeDst:
        type: string
      outcomeSubName:
        type: string
      oddId:
        type: integer
      oddValue:
        type: number
        description: "
          1. Для каждого odd_id определить соответствующие market_id и event_id (через таблицу 'odds')\n
          2. По event_id определить соответствующие league_id и sport_id (через таблицу 'events')\n
          3. По player_id (MiddleWare), market_id, league_id и sport_id найти все записи в таблице 'limitations'. Учесть, что в полученных записях не обязательно должно быть значение всех вышеуказанных переменных сразу (Прим. значение поля в таблице должно либо совпадать либо быть равным null)\n
          4. Для каждой полученной записи получить значение odds_value\n
          5. Определить наибольшее значение odds_value из всех полученных (см. Пункт 4)\n
          6. Разделить полученное значение в Пункте 5 на 100 и вычесть его из 1. Это будет модификатор коэффициента\n
          7. Получить значение value для odd_id (через таблицу 'odds')\n
          8. Из полученного значения value (см. Пункт 7) вычесть 1, затем умножить на модификатор коэффициента (см. Пункт 6) и прибавить 1\n"
      isStopped:
        type: boolean
        description: "
          1. В таблице 'odds' значение поля is_win для данного odd_id должно быть равно Null\n
          2. В таблице 'odds' значение поля is_stopped для данного odd_id должно быть равно false\n
          3. Если все условия (см. Пункты 1 и 2) выполняются, то в значении выходного параметра вернуть false, иначе - true\n"
  favoriteMarkets:
    type: object
    properties:
      markets:
        type: array
        items:
          $ref: '#/definitions/favoriteMarket'
  favoriteMarket:
    type: object
    properties:
      id:
        type: integer
  collapsedMarkets:
    type: object
    properties:
      markets:
        type: array
        items:
          $ref: '#/definitions/collapsedMarket'
  collapsedMarket:
    type: object
    properties:
      id:
        type: integer
  playerSearchParams:
    type: object
    properties:
      sportId:
        type: integer
      leagueId:
        type: integer
      teamId:
        type: integer
      value:
        type: string
  playerSearch:
    type: object
    properties:
      sportsFilter:
        type: array
        items:
          $ref: '#/definitions/sportForPlayerSearch'
      leaguesFilter:
        type: array
        items:
          $ref: '#/definitions/leagueForPlayerSearch'
      teamsFilter:
        type: array
        items:
          $ref: '#/definitions/teamForPlayerSearch'
      eventsTable:
        type: array
        items:
          $ref: '#/definitions/eventForPlayerSearch'
  sportForPlayerSearch:
    type: object
    properties:
      sportId:
        type: integer
      sportName:
        type: string
      sportIcon:
        type: string
  leagueForPlayerSearch:
    type: object
    properties:
      sportId:
        type: integer
      sportName:
        type: string
      sportIcon:
        type: string
      leagues:
        type: array
        items:
          $ref: '#/definitions/leagueForPlayerSearchParts'
  leagueForPlayerSearchParts:
    type: object
    properties:
      leagueId:
        type: integer
      leagueName:
        type: string
      leagueIcon:
        type: string
  teamForPlayerSearch:
    type: object
    properties:
      sportId:
        type: integer
      sportName:
        type: string
      sportIcon:
        type: string
      teams:
        type: array
        items:
          $ref: '#/definitions/teamForPlayerSearchParts'
  teamForPlayerSearchParts:
    type: object
    properties:
      teamId:
        type: integer
      teamName:
        type: string
      teamIcon:
        type: string
  eventForPlayerSearch:
    type: object
    properties:
      sportId:
        type: integer
      sportName:
        type: string
      sportIcon:
        type: string
      leagues:
        type: array
        items:
          $ref: '#/definitions/leaguesInEventForPlayerSearch'
  leaguesInEventForPlayerSearch:
    type: object
    properties:
      leagueId:
        type: integer
      leagueName:
        type: string
      leagueIcon:
        type: string
      events:
        type: array
        items:
          $ref: '#/definitions/eventInEventForPlayerSearch'
  eventInEventForPlayerSearch:
    type: object
    properties:
      eventId:
        type: integer
      teams:
        type: array
        items:
          $ref: '#/definitions/team'
      timeStatus:
        type: integer
        description: "0 - \"Line\", 1 - \"Live\""
        enum:
          - 0
          - 1
      startTime:
        type: integer
      currentScore:
        type: string
  playerData:
    type: object
    properties:
      userId:
        type: integer
      name:
        type: string
      surname:
        type: string
      patronymic:
        type: string
      balanceId:
        type: integer
      balanceValue:
        type: number
      currencyId:
        type: integer
      currencyName:
        type: string
      currencyIcon:
        type: string
      phone:
        type: string
      email:
        type: string
      advertisingMails:
        type: boolean
  phoneNumberChangeAdress:
    type: object
    properties:
      phone:
        type: string
  phoneNumberChangeRequest:
    type: object
    properties:
      phoneNumberChangeRequestId:
        type: integer
      phoneNumberChangeRequestStatus:
        type: string
  phoneNumberChangeCode:
    type: object
    properties:
      phoneNumberChangeRequestId:
        type: integer
      code:
        type: string
  emailChangeAdress:
    type: object
    properties:
      email:
        type: string
  emailChangeRequest:
    type: object
    properties:
      emailChangeRequestId:
        type: integer
      emailChangeRequestStatus:
        type: string
  emailChangeCode:
    type: object
    properties:
      emailChangeRequestId:
        type: integer
      code:
        type: string
  changePassword:
    type: object
    properties:
      oldPassword:
        type: string
      newPassword:
        type: string
  currenciesList:
    type: object
    properties:
      currency:
        type: array
        items:
          $ref: '#/definitions/currency'
  currency:
    type: object
    properties:
      id:
        type: integer
      name:
        type: string
      icon:
        type: string
  playerBetsNotificationsStatus:
    type: object
    properties:
      status:
        type: integer
        description: "0 - \"Не получать уведомления о ставках\", 1 - \"Получать уведомления о ставках\""
        enum:
          - 0
          - 1
  betsHistoryTableParams:
    type: object
    properties:
      filterParams:
        $ref: '#/definitions/betsHistoryFilterParams'
      pagerIn:
        $ref: '#/definitions/pagerIn'
  betsHistoryFilterParams:
    type: object
    properties:
      dateFrom:
        type: integer
      dateTo:
        type: integer
      statuses:
        type: array
        items:
          $ref: '#/definitions/playerBetStatus'
  playerBetStatus:
    type: object
    properties:
      status:
        type: integer
        description: "0 - \"Не рассчитана\", 1 - \"Выигрыш\", 2 - \"Проигрыш\", 3 - \"Отмена\", 4 - \"Возврат\""
        enum:
          - 0
          - 1
          - 2
          - 3
          - 4
  betsHistoryTable:
    type: object
    properties:
      head:
        $ref: '#/definitions/headItemsList'
      bets:
        type: array
        items:
          $ref: '#/definitions/betForBetsHistoryGeneral'
      pagerOut:
        $ref: '#/definitions/pagerOut'
  betForBetsHistoryGeneral:
    type: object
    properties:
      betId:
        type: integer
      number:
        type: string
      date:
        type: integer
      amount:
        type: number
      totalAmount:
        type: number
      expressOddValue:
        type: number
      isExpress:
        type: boolean
      status:
        type: integer
        description: "0 - \"Не рассчитана\", 1 - \"Выигрыш\", 2 - \"Проигрыш\", 3 - \"Отмена\", 4 - \"Возврат\""
        enum:
          - 0
          - 1
          - 2
          - 3
          - 4
      parts:
        type: array
        items:
          $ref: '#/definitions/betForBetsHistoryPart'
  betForBetsHistoryPart:
    type: object
    properties:
      sportId:
        type: integer
      sportName:
        type: string
      leagueId:
        type: integer
      leagueName:
        type: string
      eventId:
        type: integer
      teams:
        type: array
        items:
          $ref: '#/definitions/team'
      marketId:
        type: integer
      marketName:
        type: string
      outcomeId:
        type: integer
      outcomeTeam:
        type: string
      outcomeDst:
        type: string
      outcomeSubName:
        type: string
      oddValue:
        type: number
      status:
        type: integer
        description: "0 - \"Не рассчитана\", 1 - \"Выигрыш\", 2 - \"Проигрыш\", 3 - \"Отмена\", 4 - \"Возврат\""
        enum:
          - 0
          - 1
          - 2
          - 3
          - 4
      isEventLive:
        type: boolean
  paymentsHistoryTableParams:
    type: object
    properties:
      filterParams:
        $ref: '#/definitions/paymentsHistoryFilterParams'
      pagerIn:
        $ref: '#/definitions/pagerIn'
  paymentsHistoryFilterParams:
    type: object
    properties:
      dateFrom:
        type: integer
      dateTo:
        type: integer
      types:
        type: array
        items:
          $ref: '#/definitions/playerPaymentType'
  playerPaymentType:
    type: object
    properties:
      type:
        type: integer
        description: "0 - \"Пополнение\", 1 - \"Выплата\""
        enum:
          - 0
          - 1
  paymentsHistoryTable:
    type: object
    properties:
      head:
        $ref: '#/definitions/headItemsList'
      payments:
        type: array
        items:
          $ref: '#/definitions/paymentForPaymentsHistory'
      pagerOut:
        $ref: '#/definitions/pagerOut'
  paymentForPaymentsHistory:
    type: object
    properties:
      id:
        type: integer
        description: "В зависимости от значения параметра type возвращается id из таблицы 'user_deposits' или таблицы 'user_withdraws'"
      date:
        type: integer
        description: "В зависимости от значения параметра type возвращается paid_at из таблицы 'user_deposits' или таблицы 'user_withdraws'"
      amount:
        type: number
        description: "В зависимости от значения параметра type возвращается amount из таблицы 'user_deposits' или таблицы 'user_withdraws'"
      amountCurrencyId:
        type: integer
        description: "В зависимости от значения параметра type возвращается amount_currency_id из таблицы 'user_deposits' или таблицы 'user_withdraws'"
      outcomeAmount:
        type: number
        description: "В зависимости от значения параметра type возвращается outcome_amount из таблицы 'user_deposits' или таблицы 'user_withdraws'"
      outcomeAmountCurrencyId:
        type: integer
        description: "В зависимости от значения параметра type возвращается outcome_amount_currency_id из таблицы 'user_deposits' или таблицы 'user_withdraws'"
      type:
        type: integer
        description: "0 - \"Пополнение\", 1 - \"Выплата\""
        enum:
          - 0
          - 1
  playerIdentificationCountries:
    type: object
    properties:
      countries:
        type: array
        items:
          $ref: '#/definitions/filterCountryOut'
  playerIdentificationCities:
    type: object
    properties:
      cities:
        type: array
        items:
          $ref: '#/definitions/filterCityOut'
  playerIdentificationData:
    type: object
    properties:
      name:
        type: string
      surname:
        type: string
      patronymic:
        type: string
      birthday:
        type: integer
      countryId:
        type: integer
      countryName:
        type: string
      cityId:
        type: integer
      cityName:
        type: string
      address:
        type: string
  playerIdentificationDataForSave:
    type: object
    properties:
      name:
        type: string
      surname:
        type: string
      patronymic:
        type: string
      birthday:
        type: integer
      countryId:
        type: integer
      cityId:
        type: integer
      address:
        type: string
  playerIdentificationRequest:
    type: object
    properties:
      id:
        type: integer
      status:
        type: integer
        description: "1 - \"Открыт\", 2 - \"Одобрен\""
        enum:
          - 0
          - 1
      rejectionReason:
        type: string
      createdAt:
        type: integer
      updatedAt:
        type: integer
      playerIdentificationDocuments:
        type: array
        items:
          $ref: '#/definitions/playerIdentificationDocument'
  playerIdentificationDocument:
    type: object
    properties:
      id:
        type: integer
      type:
        type: integer
        description: "1 - \"Паспорт\", 2 - \"ID_карта\", 3 - \"Водительское удостоверение\", 4 - \"Селфи с паспортом и листом с датой и названием БК\", 5 - \"Селфи с ID_картой\", 6 - \"Банковская выписка или квиток ЖКХ\""
        enum:
          - 1
          - 2
          - 3
          - 4
          - 5
          - 6
      status:
        type: integer
        description: "0 - \"Ожидает загрузки\", 1 - \"Загружен\", 2 - \"Одобрен\""
        enum:
          - 0
          - 1
      createdAt:
        type: integer
      uploadedAt:
        type: integer
      approvedAt:
        type: integer
  depositMethodsList:
    type: object
    properties:
      paymentAggregators:
        type: array
        items:
          $ref: '#/definitions/depositMethod'
  depositMethod:
    type: object
    properties:
      id:
        type: integer
      name:
        type: string
      type:
        type: integer
        description: "1 - \"Банковские карты\", 2 - \"Электронные кошельки\", 3 - \"Мобильные платежи\", 4 - \"Наличные\", 5 - \"Платежные системы\", 6 - \"Предоплаченные карты\", 7 - \"Bank Transfer\", 8 - \"Криптовалюты\", 9 - \"Электронные ваучеры\""
        enum:
          - 1
          - 2
          - 3
          - 4
          - 5
          - 6
          - 7
          - 8
          - 9
      icon:
        type: string
  withdrawMethodsList:
    type: object
    properties:
      paymentAggregators:
        type: array
        items:
          $ref: '#/definitions/withdrawMethod'
      currencies:
        type: array
        items:
          $ref: '#/definitions/currencyForWithdrawMethodsList'
  withdrawMethod:
    type: object
    properties:
      id:
        type: integer
      name:
        type: string
      type:
        type: integer
        description: "1 - \"Банковские карты\", 2 - \"Электронные кошельки\", 3 - \"Мобильные платежи\", 4 - \"Наличные\", 5 - \"Платежные системы\", 6 - \"Предоплаченные карты\", 7 - \"Bank Transfer\", 8 - \"Криптовалюты\", 9 - \"Электронные ваучеры\""
        enum:
          - 1
          - 2
          - 3
          - 4
          - 5
          - 6
          - 7
          - 8
          - 9
      icon:
        type: string
      currencyId:
        type: integer
  currencyForWithdrawMethodsList:
    type: object
    properties:
      id:
        type: integer
      name:
        type: string
      icon:
        type: string
      minWithdraw:
        type: number
        description: "
          1. По currency_id найти запись в таблице 'currencies'\n
          2. Получить значение min_withdraw\n"
      playerMinWithdraw:
        type: number
        description: "
          1. Рассчитать курс валюты игрока по отношению к рублю:\n
            а) Использовать player_id текущего пользователя (MiddleWare)\n
            б) По player_id найти запись в таблице 'balances'. Получить значение currency_id\n
            в) По currency_id найти запись в таблице 'currencies'. Получить значение course. Это будет курс валюты игрока по отношению к рублю\n
          2. Рассчитать курс каждой валюты по отношению к рублю:\n
            а) Получить соответствующую запись в таблице 'currencies' (для каждой валюты)\n
            б) Получить значение course\n
          3. Рассчитать значение минимальной суммы вывода для каждой валюты (в значении валюты игрока):\n
            а) Получить соответствующую запись в таблице 'currencies' (для каждой валюты)\n
            б) Получить значение min_withdraw\n
            в) Умножить значение min_withdraw на значение курса валюты по отношению к рублю (см. Пункт 2) и разделить на значение курса валюты игрока по отношению к рублю (см. Пункт 1)\n"
  requestDepositParams:
    type: object
    properties:
      paymentAggregatorId:
        type: integer
      amount:
        type: number
  depositInfo:
    type: object
    properties:
      info:
        type: string
  requestWithdrawParams:
    type: object
    properties:
      paymentAggregatorId:
        type: integer
      currencyId:
        type: integer
      source:
        type: string
      amount:
        type: number
  referralList:
    type: object
    properties:
      referrals:
        type: array
        items:
          $ref: '#/definitions/referral'
  referral:
    type: object
    properties:
      name:
        type: string
      surname:
        type: string
      patronymic:
        type: string
      email:
        type: string
      createdAt:
        type: integer
      referralStatus:
        type: integer
        description: "0 - \"Активен\", 1 - \"Неактивен\""
        enum:
          - 0
          - 1
  referralReport:
    type: object
    properties:
      referralsCount:
        type: integer
        description: "
          1. Для текущего пользователя (player_id) получить все записи в таблице 'referrals_money'\n
          2. Определить количество полученных записей\n"
      profit:
        type: number
        description: "
          1. Для текущего пользователя (player_id) получить все записи в таблице 'referrals_money'\n
          2. Определить значение amount каждой полученной записи\n
          3. Просуммировать значения amount\n"
      profitPerLastWeek:
        type: number
        description: "
          1. Для текущего пользователя (player_id) получить последнюю запись в таблице 'referrals_money'\n
          2. Определить являеется ли данная запись \"предыдущей неделей\":\n
            а) Получить значение date_to полученной записи (см. Пункт 1)\n
            б) Значение в поле date_to должно быть равно дате ближайшего прошедшего понедельника\n
          3. Определить и вернуть значение amount если полученная запись является \"предыдущей неделей\", иначе вернуть 0\n"
      referrerHash:
        type: string
        description: "
          1. Для текущего пользователя (player_id) получить запись в таблице 'users'\n
          2. Определить значение referrer_hash полученной записи\n"
